
PROJET_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cba0  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  0800cce0  0800cce0  0000dce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d350  0800d350  0000f2d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d350  0800d350  0000e350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d358  0800d358  0000f2d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d358  0800d358  0000e358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d35c  0800d35c  0000e35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  0800d360  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  200002d0  0800d630  0000f2d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000070c  0800d630  0000f70c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f2d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc3a  00000000  00000000  0000f2f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ccc  00000000  00000000  0002af33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b30  00000000  00000000  0002ec00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014f5  00000000  00000000  00030730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5fb  00000000  00000000  00031c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c77a  00000000  00000000  0004c220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dca6  00000000  00000000  0006899a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106640  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086a4  00000000  00000000  00106684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010ed28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002d0 	.word	0x200002d0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ccc8 	.word	0x0800ccc8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002d4 	.word	0x200002d4
 800017c:	0800ccc8 	.word	0x0800ccc8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_uldivmod>:
 8001100:	b953      	cbnz	r3, 8001118 <__aeabi_uldivmod+0x18>
 8001102:	b94a      	cbnz	r2, 8001118 <__aeabi_uldivmod+0x18>
 8001104:	2900      	cmp	r1, #0
 8001106:	bf08      	it	eq
 8001108:	2800      	cmpeq	r0, #0
 800110a:	bf1c      	itt	ne
 800110c:	f04f 31ff 	movne.w	r1, #4294967295
 8001110:	f04f 30ff 	movne.w	r0, #4294967295
 8001114:	f000 b968 	b.w	80013e8 <__aeabi_idiv0>
 8001118:	f1ad 0c08 	sub.w	ip, sp, #8
 800111c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001120:	f000 f806 	bl	8001130 <__udivmoddi4>
 8001124:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800112c:	b004      	add	sp, #16
 800112e:	4770      	bx	lr

08001130 <__udivmoddi4>:
 8001130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001134:	9d08      	ldr	r5, [sp, #32]
 8001136:	460c      	mov	r4, r1
 8001138:	2b00      	cmp	r3, #0
 800113a:	d14e      	bne.n	80011da <__udivmoddi4+0xaa>
 800113c:	4694      	mov	ip, r2
 800113e:	458c      	cmp	ip, r1
 8001140:	4686      	mov	lr, r0
 8001142:	fab2 f282 	clz	r2, r2
 8001146:	d962      	bls.n	800120e <__udivmoddi4+0xde>
 8001148:	b14a      	cbz	r2, 800115e <__udivmoddi4+0x2e>
 800114a:	f1c2 0320 	rsb	r3, r2, #32
 800114e:	4091      	lsls	r1, r2
 8001150:	fa20 f303 	lsr.w	r3, r0, r3
 8001154:	fa0c fc02 	lsl.w	ip, ip, r2
 8001158:	4319      	orrs	r1, r3
 800115a:	fa00 fe02 	lsl.w	lr, r0, r2
 800115e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001162:	fbb1 f4f7 	udiv	r4, r1, r7
 8001166:	fb07 1114 	mls	r1, r7, r4, r1
 800116a:	fa1f f68c 	uxth.w	r6, ip
 800116e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001172:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001176:	fb04 f106 	mul.w	r1, r4, r6
 800117a:	4299      	cmp	r1, r3
 800117c:	d90a      	bls.n	8001194 <__udivmoddi4+0x64>
 800117e:	eb1c 0303 	adds.w	r3, ip, r3
 8001182:	f104 30ff 	add.w	r0, r4, #4294967295
 8001186:	f080 8110 	bcs.w	80013aa <__udivmoddi4+0x27a>
 800118a:	4299      	cmp	r1, r3
 800118c:	f240 810d 	bls.w	80013aa <__udivmoddi4+0x27a>
 8001190:	3c02      	subs	r4, #2
 8001192:	4463      	add	r3, ip
 8001194:	1a59      	subs	r1, r3, r1
 8001196:	fbb1 f0f7 	udiv	r0, r1, r7
 800119a:	fb07 1110 	mls	r1, r7, r0, r1
 800119e:	fb00 f606 	mul.w	r6, r0, r6
 80011a2:	fa1f f38e 	uxth.w	r3, lr
 80011a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011aa:	429e      	cmp	r6, r3
 80011ac:	d90a      	bls.n	80011c4 <__udivmoddi4+0x94>
 80011ae:	eb1c 0303 	adds.w	r3, ip, r3
 80011b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80011b6:	f080 80fa 	bcs.w	80013ae <__udivmoddi4+0x27e>
 80011ba:	429e      	cmp	r6, r3
 80011bc:	f240 80f7 	bls.w	80013ae <__udivmoddi4+0x27e>
 80011c0:	4463      	add	r3, ip
 80011c2:	3802      	subs	r0, #2
 80011c4:	2100      	movs	r1, #0
 80011c6:	1b9b      	subs	r3, r3, r6
 80011c8:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80011cc:	b11d      	cbz	r5, 80011d6 <__udivmoddi4+0xa6>
 80011ce:	40d3      	lsrs	r3, r2
 80011d0:	2200      	movs	r2, #0
 80011d2:	e9c5 3200 	strd	r3, r2, [r5]
 80011d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011da:	428b      	cmp	r3, r1
 80011dc:	d905      	bls.n	80011ea <__udivmoddi4+0xba>
 80011de:	b10d      	cbz	r5, 80011e4 <__udivmoddi4+0xb4>
 80011e0:	e9c5 0100 	strd	r0, r1, [r5]
 80011e4:	2100      	movs	r1, #0
 80011e6:	4608      	mov	r0, r1
 80011e8:	e7f5      	b.n	80011d6 <__udivmoddi4+0xa6>
 80011ea:	fab3 f183 	clz	r1, r3
 80011ee:	2900      	cmp	r1, #0
 80011f0:	d146      	bne.n	8001280 <__udivmoddi4+0x150>
 80011f2:	42a3      	cmp	r3, r4
 80011f4:	d302      	bcc.n	80011fc <__udivmoddi4+0xcc>
 80011f6:	4290      	cmp	r0, r2
 80011f8:	f0c0 80ee 	bcc.w	80013d8 <__udivmoddi4+0x2a8>
 80011fc:	1a86      	subs	r6, r0, r2
 80011fe:	eb64 0303 	sbc.w	r3, r4, r3
 8001202:	2001      	movs	r0, #1
 8001204:	2d00      	cmp	r5, #0
 8001206:	d0e6      	beq.n	80011d6 <__udivmoddi4+0xa6>
 8001208:	e9c5 6300 	strd	r6, r3, [r5]
 800120c:	e7e3      	b.n	80011d6 <__udivmoddi4+0xa6>
 800120e:	2a00      	cmp	r2, #0
 8001210:	f040 808f 	bne.w	8001332 <__udivmoddi4+0x202>
 8001214:	eba1 040c 	sub.w	r4, r1, ip
 8001218:	2101      	movs	r1, #1
 800121a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800121e:	fa1f f78c 	uxth.w	r7, ip
 8001222:	fbb4 f6f8 	udiv	r6, r4, r8
 8001226:	fb08 4416 	mls	r4, r8, r6, r4
 800122a:	fb07 f006 	mul.w	r0, r7, r6
 800122e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001232:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001236:	4298      	cmp	r0, r3
 8001238:	d908      	bls.n	800124c <__udivmoddi4+0x11c>
 800123a:	eb1c 0303 	adds.w	r3, ip, r3
 800123e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001242:	d202      	bcs.n	800124a <__udivmoddi4+0x11a>
 8001244:	4298      	cmp	r0, r3
 8001246:	f200 80cb 	bhi.w	80013e0 <__udivmoddi4+0x2b0>
 800124a:	4626      	mov	r6, r4
 800124c:	1a1c      	subs	r4, r3, r0
 800124e:	fbb4 f0f8 	udiv	r0, r4, r8
 8001252:	fb08 4410 	mls	r4, r8, r0, r4
 8001256:	fb00 f707 	mul.w	r7, r0, r7
 800125a:	fa1f f38e 	uxth.w	r3, lr
 800125e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001262:	429f      	cmp	r7, r3
 8001264:	d908      	bls.n	8001278 <__udivmoddi4+0x148>
 8001266:	eb1c 0303 	adds.w	r3, ip, r3
 800126a:	f100 34ff 	add.w	r4, r0, #4294967295
 800126e:	d202      	bcs.n	8001276 <__udivmoddi4+0x146>
 8001270:	429f      	cmp	r7, r3
 8001272:	f200 80ae 	bhi.w	80013d2 <__udivmoddi4+0x2a2>
 8001276:	4620      	mov	r0, r4
 8001278:	1bdb      	subs	r3, r3, r7
 800127a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800127e:	e7a5      	b.n	80011cc <__udivmoddi4+0x9c>
 8001280:	f1c1 0720 	rsb	r7, r1, #32
 8001284:	408b      	lsls	r3, r1
 8001286:	fa22 fc07 	lsr.w	ip, r2, r7
 800128a:	ea4c 0c03 	orr.w	ip, ip, r3
 800128e:	fa24 f607 	lsr.w	r6, r4, r7
 8001292:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001296:	fbb6 f8f9 	udiv	r8, r6, r9
 800129a:	fa1f fe8c 	uxth.w	lr, ip
 800129e:	fb09 6618 	mls	r6, r9, r8, r6
 80012a2:	fa20 f307 	lsr.w	r3, r0, r7
 80012a6:	408c      	lsls	r4, r1
 80012a8:	fa00 fa01 	lsl.w	sl, r0, r1
 80012ac:	fb08 f00e 	mul.w	r0, r8, lr
 80012b0:	431c      	orrs	r4, r3
 80012b2:	0c23      	lsrs	r3, r4, #16
 80012b4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80012b8:	4298      	cmp	r0, r3
 80012ba:	fa02 f201 	lsl.w	r2, r2, r1
 80012be:	d90a      	bls.n	80012d6 <__udivmoddi4+0x1a6>
 80012c0:	eb1c 0303 	adds.w	r3, ip, r3
 80012c4:	f108 36ff 	add.w	r6, r8, #4294967295
 80012c8:	f080 8081 	bcs.w	80013ce <__udivmoddi4+0x29e>
 80012cc:	4298      	cmp	r0, r3
 80012ce:	d97e      	bls.n	80013ce <__udivmoddi4+0x29e>
 80012d0:	f1a8 0802 	sub.w	r8, r8, #2
 80012d4:	4463      	add	r3, ip
 80012d6:	1a1e      	subs	r6, r3, r0
 80012d8:	fbb6 f3f9 	udiv	r3, r6, r9
 80012dc:	fb09 6613 	mls	r6, r9, r3, r6
 80012e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80012e4:	b2a4      	uxth	r4, r4
 80012e6:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80012ea:	45a6      	cmp	lr, r4
 80012ec:	d908      	bls.n	8001300 <__udivmoddi4+0x1d0>
 80012ee:	eb1c 0404 	adds.w	r4, ip, r4
 80012f2:	f103 30ff 	add.w	r0, r3, #4294967295
 80012f6:	d266      	bcs.n	80013c6 <__udivmoddi4+0x296>
 80012f8:	45a6      	cmp	lr, r4
 80012fa:	d964      	bls.n	80013c6 <__udivmoddi4+0x296>
 80012fc:	3b02      	subs	r3, #2
 80012fe:	4464      	add	r4, ip
 8001300:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001304:	fba0 8302 	umull	r8, r3, r0, r2
 8001308:	eba4 040e 	sub.w	r4, r4, lr
 800130c:	429c      	cmp	r4, r3
 800130e:	46c6      	mov	lr, r8
 8001310:	461e      	mov	r6, r3
 8001312:	d350      	bcc.n	80013b6 <__udivmoddi4+0x286>
 8001314:	d04d      	beq.n	80013b2 <__udivmoddi4+0x282>
 8001316:	b155      	cbz	r5, 800132e <__udivmoddi4+0x1fe>
 8001318:	ebba 030e 	subs.w	r3, sl, lr
 800131c:	eb64 0406 	sbc.w	r4, r4, r6
 8001320:	fa04 f707 	lsl.w	r7, r4, r7
 8001324:	40cb      	lsrs	r3, r1
 8001326:	431f      	orrs	r7, r3
 8001328:	40cc      	lsrs	r4, r1
 800132a:	e9c5 7400 	strd	r7, r4, [r5]
 800132e:	2100      	movs	r1, #0
 8001330:	e751      	b.n	80011d6 <__udivmoddi4+0xa6>
 8001332:	fa0c fc02 	lsl.w	ip, ip, r2
 8001336:	f1c2 0320 	rsb	r3, r2, #32
 800133a:	40d9      	lsrs	r1, r3
 800133c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001340:	fa20 f303 	lsr.w	r3, r0, r3
 8001344:	fa00 fe02 	lsl.w	lr, r0, r2
 8001348:	fbb1 f0f8 	udiv	r0, r1, r8
 800134c:	fb08 1110 	mls	r1, r8, r0, r1
 8001350:	4094      	lsls	r4, r2
 8001352:	431c      	orrs	r4, r3
 8001354:	fa1f f78c 	uxth.w	r7, ip
 8001358:	0c23      	lsrs	r3, r4, #16
 800135a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800135e:	fb00 f107 	mul.w	r1, r0, r7
 8001362:	4299      	cmp	r1, r3
 8001364:	d908      	bls.n	8001378 <__udivmoddi4+0x248>
 8001366:	eb1c 0303 	adds.w	r3, ip, r3
 800136a:	f100 36ff 	add.w	r6, r0, #4294967295
 800136e:	d22c      	bcs.n	80013ca <__udivmoddi4+0x29a>
 8001370:	4299      	cmp	r1, r3
 8001372:	d92a      	bls.n	80013ca <__udivmoddi4+0x29a>
 8001374:	3802      	subs	r0, #2
 8001376:	4463      	add	r3, ip
 8001378:	1a5b      	subs	r3, r3, r1
 800137a:	fbb3 f1f8 	udiv	r1, r3, r8
 800137e:	fb08 3311 	mls	r3, r8, r1, r3
 8001382:	b2a4      	uxth	r4, r4
 8001384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001388:	fb01 f307 	mul.w	r3, r1, r7
 800138c:	42a3      	cmp	r3, r4
 800138e:	d908      	bls.n	80013a2 <__udivmoddi4+0x272>
 8001390:	eb1c 0404 	adds.w	r4, ip, r4
 8001394:	f101 36ff 	add.w	r6, r1, #4294967295
 8001398:	d213      	bcs.n	80013c2 <__udivmoddi4+0x292>
 800139a:	42a3      	cmp	r3, r4
 800139c:	d911      	bls.n	80013c2 <__udivmoddi4+0x292>
 800139e:	3902      	subs	r1, #2
 80013a0:	4464      	add	r4, ip
 80013a2:	1ae4      	subs	r4, r4, r3
 80013a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013a8:	e73b      	b.n	8001222 <__udivmoddi4+0xf2>
 80013aa:	4604      	mov	r4, r0
 80013ac:	e6f2      	b.n	8001194 <__udivmoddi4+0x64>
 80013ae:	4608      	mov	r0, r1
 80013b0:	e708      	b.n	80011c4 <__udivmoddi4+0x94>
 80013b2:	45c2      	cmp	sl, r8
 80013b4:	d2af      	bcs.n	8001316 <__udivmoddi4+0x1e6>
 80013b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80013ba:	eb63 060c 	sbc.w	r6, r3, ip
 80013be:	3801      	subs	r0, #1
 80013c0:	e7a9      	b.n	8001316 <__udivmoddi4+0x1e6>
 80013c2:	4631      	mov	r1, r6
 80013c4:	e7ed      	b.n	80013a2 <__udivmoddi4+0x272>
 80013c6:	4603      	mov	r3, r0
 80013c8:	e79a      	b.n	8001300 <__udivmoddi4+0x1d0>
 80013ca:	4630      	mov	r0, r6
 80013cc:	e7d4      	b.n	8001378 <__udivmoddi4+0x248>
 80013ce:	46b0      	mov	r8, r6
 80013d0:	e781      	b.n	80012d6 <__udivmoddi4+0x1a6>
 80013d2:	4463      	add	r3, ip
 80013d4:	3802      	subs	r0, #2
 80013d6:	e74f      	b.n	8001278 <__udivmoddi4+0x148>
 80013d8:	4606      	mov	r6, r0
 80013da:	4623      	mov	r3, r4
 80013dc:	4608      	mov	r0, r1
 80013de:	e711      	b.n	8001204 <__udivmoddi4+0xd4>
 80013e0:	3e02      	subs	r6, #2
 80013e2:	4463      	add	r3, ip
 80013e4:	e732      	b.n	800124c <__udivmoddi4+0x11c>
 80013e6:	bf00      	nop

080013e8 <__aeabi_idiv0>:
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop

080013ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char init_success[12] = {'I','N','I','T',' ','S','U','C','C','E','S','S'};
 80013f2:	4a3d      	ldr	r2, [pc, #244]	@ (80014e8 <main+0xfc>)
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80013f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fc:	f003 ff58 	bl	80052b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001400:	f000 f894 	bl	800152c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001404:	f000 fa42 	bl	800188c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001408:	f000 fa16 	bl	8001838 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800140c:	f000 f9de 	bl	80017cc <MX_TIM6_Init>
  MX_SPI1_Init();
 8001410:	f000 f932 	bl	8001678 <MX_SPI1_Init>
  MX_ADC_Init();
 8001414:	f000 f8d8 	bl	80015c8 <MX_ADC_Init>
  MX_TIM3_Init();
 8001418:	f000 f964 	bl	80016e4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  printf("INIT START\r\n");
 800141c:	4833      	ldr	r0, [pc, #204]	@ (80014ec <main+0x100>)
 800141e:	f009 fb01 	bl	800aa24 <puts>
  printf("-INIT SENSOR START\r\n");
 8001422:	4833      	ldr	r0, [pc, #204]	@ (80014f0 <main+0x104>)
 8001424:	f009 fafe 	bl	800aa24 <puts>
  if (IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0,ENV_TEMPERATURE) != BSP_ERROR_NONE){
 8001428:	2101      	movs	r1, #1
 800142a:	2000      	movs	r0, #0
 800142c:	f003 fba8 	bl	8004b80 <IKS01A3_ENV_SENSOR_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d004      	beq.n	8001440 <main+0x54>
  	  printf("ERROR INIT ENV SENSOR TEMPERATURE\r\n");
 8001436:	482f      	ldr	r0, [pc, #188]	@ (80014f4 <main+0x108>)
 8001438:	f009 faf4 	bl	800aa24 <puts>
  	  return 1;
 800143c:	2301      	movs	r3, #1
 800143e:	e04f      	b.n	80014e0 <main+0xf4>
    }
  else printf("	INIT ENV SENSOR TEMPERATURE FINISH\r\n");
 8001440:	482d      	ldr	r0, [pc, #180]	@ (80014f8 <main+0x10c>)
 8001442:	f009 faef 	bl	800aa24 <puts>

  if (IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0,ENV_HUMIDITY) != BSP_ERROR_NONE){
 8001446:	2104      	movs	r1, #4
 8001448:	2000      	movs	r0, #0
 800144a:	f003 fb99 	bl	8004b80 <IKS01A3_ENV_SENSOR_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d004      	beq.n	800145e <main+0x72>
	  printf("ERROR INIT ENV SENSOR HUMIDITY\r\n");
 8001454:	4829      	ldr	r0, [pc, #164]	@ (80014fc <main+0x110>)
 8001456:	f009 fae5 	bl	800aa24 <puts>
	  return 1;
 800145a:	2301      	movs	r3, #1
 800145c:	e040      	b.n	80014e0 <main+0xf4>
  }
  else printf("	INIT ENV SENSOR HUMIDITY FINISH\r\n");
 800145e:	4828      	ldr	r0, [pc, #160]	@ (8001500 <main+0x114>)
 8001460:	f009 fae0 	bl	800aa24 <puts>

  if (IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0,ENV_PRESSURE) != BSP_ERROR_NONE){
 8001464:	2102      	movs	r1, #2
 8001466:	2001      	movs	r0, #1
 8001468:	f003 fb8a 	bl	8004b80 <IKS01A3_ENV_SENSOR_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d004      	beq.n	800147c <main+0x90>
	  printf("ERROR INIT ENV SENSOR PRESSURE\r\n");
 8001472:	4824      	ldr	r0, [pc, #144]	@ (8001504 <main+0x118>)
 8001474:	f009 fad6 	bl	800aa24 <puts>
	  return 1;
 8001478:	2301      	movs	r3, #1
 800147a:	e031      	b.n	80014e0 <main+0xf4>
  }
  else printf("	INIT ENV SENSOR PRESSURE FINISH\r\n");
 800147c:	4822      	ldr	r0, [pc, #136]	@ (8001508 <main+0x11c>)
 800147e:	f009 fad1 	bl	800aa24 <puts>

  printf("INIT SENSOR FINISH\r\n");
 8001482:	4822      	ldr	r0, [pc, #136]	@ (800150c <main+0x120>)
 8001484:	f009 face 	bl	800aa24 <puts>

  MAX7219_Init();
 8001488:	f008 fc88 	bl	8009d9c <MAX7219_Init>
  printf("-INIT SCREEN 7 SEGMENT MAX7219 START \r\n");
 800148c:	4820      	ldr	r0, [pc, #128]	@ (8001510 <main+0x124>)
 800148e:	f009 fac9 	bl	800aa24 <puts>
  printf("	TEST SCREEN 7 SEGEMENT START \r\n");
 8001492:	4820      	ldr	r0, [pc, #128]	@ (8001514 <main+0x128>)
 8001494:	f009 fac6 	bl	800aa24 <puts>
  MAX7219_DisplayTestStart();
 8001498:	f008 fc9d 	bl	8009dd6 <MAX7219_DisplayTestStart>
  HAL_Delay(1000);
 800149c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014a0:	f003 ff74 	bl	800538c <HAL_Delay>
  MAX7219_DisplayTestStop();
 80014a4:	f008 fc9f 	bl	8009de6 <MAX7219_DisplayTestStop>
  printf("	TEST SCREEN 7 SEGEMENT STOP");
 80014a8:	481b      	ldr	r0, [pc, #108]	@ (8001518 <main+0x12c>)
 80014aa:	f009 fa53 	bl	800a954 <iprintf>
  printf("INIT SCREEN 7 SEGMENT MAX7219 FINISH \r\n");
 80014ae:	481b      	ldr	r0, [pc, #108]	@ (800151c <main+0x130>)
 80014b0:	f009 fab8 	bl	800aa24 <puts>

  printf("INIT FINISH\r\n");
 80014b4:	481a      	ldr	r0, [pc, #104]	@ (8001520 <main+0x134>)
 80014b6:	f009 fab5 	bl	800aa24 <puts>
  displayIndex(init_success);
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 ff53 	bl	8002368 <displayIndex>

  MAX7219_SetBrightness(1);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f008 fc97 	bl	8009df6 <MAX7219_SetBrightness>
  printf("TIMER 3 START\r\n");
 80014c8:	4816      	ldr	r0, [pc, #88]	@ (8001524 <main+0x138>)
 80014ca:	f009 faab 	bl	800aa24 <puts>
  HAL_TIM_Base_Start_IT(&htim3);
 80014ce:	4816      	ldr	r0, [pc, #88]	@ (8001528 <main+0x13c>)
 80014d0:	f007 fb8a 	bl	8008be8 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_EXTI_Callback(BTN1_Pin);
 80014d4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80014d8:	f000 fcc8 	bl	8001e6c <HAL_GPIO_EXTI_Callback>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <main+0xf0>

    /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	0800ce98 	.word	0x0800ce98
 80014ec:	0800cce0 	.word	0x0800cce0
 80014f0:	0800ccec 	.word	0x0800ccec
 80014f4:	0800cd00 	.word	0x0800cd00
 80014f8:	0800cd24 	.word	0x0800cd24
 80014fc:	0800cd4c 	.word	0x0800cd4c
 8001500:	0800cd6c 	.word	0x0800cd6c
 8001504:	0800cd90 	.word	0x0800cd90
 8001508:	0800cdb0 	.word	0x0800cdb0
 800150c:	0800cdd4 	.word	0x0800cdd4
 8001510:	0800cde8 	.word	0x0800cde8
 8001514:	0800ce10 	.word	0x0800ce10
 8001518:	0800ce30 	.word	0x0800ce30
 800151c:	0800ce50 	.word	0x0800ce50
 8001520:	0800ce78 	.word	0x0800ce78
 8001524:	0800ce88 	.word	0x0800ce88
 8001528:	20000398 	.word	0x20000398

0800152c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b092      	sub	sp, #72	@ 0x48
 8001530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	2234      	movs	r2, #52	@ 0x34
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f009 fb86 	bl	800ac4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001540:	463b      	mov	r3, r7
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800154e:	4b1d      	ldr	r3, [pc, #116]	@ (80015c4 <SystemClock_Config+0x98>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8001556:	4a1b      	ldr	r2, [pc, #108]	@ (80015c4 <SystemClock_Config+0x98>)
 8001558:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800155c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800155e:	2302      	movs	r3, #2
 8001560:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001562:	2301      	movs	r3, #1
 8001564:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001566:	2310      	movs	r3, #16
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156a:	2302      	movs	r3, #2
 800156c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800156e:	2300      	movs	r3, #0
 8001570:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001572:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001576:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001578:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800157c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4618      	mov	r0, r3
 8001584:	f006 f952 	bl	800782c <HAL_RCC_OscConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800158e:	f000 fa39 	bl	8001a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001592:	230f      	movs	r3, #15
 8001594:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001596:	2303      	movs	r3, #3
 8001598:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015a6:	463b      	mov	r3, r7
 80015a8:	2101      	movs	r1, #1
 80015aa:	4618      	mov	r0, r3
 80015ac:	f006 fc6e 	bl	8007e8c <HAL_RCC_ClockConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80015b6:	f000 fa25 	bl	8001a04 <Error_Handler>
  }
}
 80015ba:	bf00      	nop
 80015bc:	3748      	adds	r7, #72	@ 0x48
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40007000 	.word	0x40007000

080015c8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80015d8:	4b25      	ldr	r3, [pc, #148]	@ (8001670 <MX_ADC_Init+0xa8>)
 80015da:	4a26      	ldr	r2, [pc, #152]	@ (8001674 <MX_ADC_Init+0xac>)
 80015dc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015de:	4b24      	ldr	r3, [pc, #144]	@ (8001670 <MX_ADC_Init+0xa8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80015e4:	4b22      	ldr	r3, [pc, #136]	@ (8001670 <MX_ADC_Init+0xa8>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ea:	4b21      	ldr	r3, [pc, #132]	@ (8001670 <MX_ADC_Init+0xa8>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001670 <MX_ADC_Init+0xa8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80015f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <MX_ADC_Init+0xa8>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80015fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <MX_ADC_Init+0xa8>)
 80015fe:	2200      	movs	r2, #0
 8001600:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001602:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <MX_ADC_Init+0xa8>)
 8001604:	2200      	movs	r2, #0
 8001606:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001608:	4b19      	ldr	r3, [pc, #100]	@ (8001670 <MX_ADC_Init+0xa8>)
 800160a:	2200      	movs	r2, #0
 800160c:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800160e:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <MX_ADC_Init+0xa8>)
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 8001616:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <MX_ADC_Init+0xa8>)
 8001618:	2201      	movs	r2, #1
 800161a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800161c:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <MX_ADC_Init+0xa8>)
 800161e:	2200      	movs	r2, #0
 8001620:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001624:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <MX_ADC_Init+0xa8>)
 8001626:	2210      	movs	r2, #16
 8001628:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800162a:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <MX_ADC_Init+0xa8>)
 800162c:	2200      	movs	r2, #0
 800162e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001630:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <MX_ADC_Init+0xa8>)
 8001632:	2200      	movs	r2, #0
 8001634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001638:	480d      	ldr	r0, [pc, #52]	@ (8001670 <MX_ADC_Init+0xa8>)
 800163a:	f003 fec9 	bl	80053d0 <HAL_ADC_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8001644:	f000 f9de 	bl	8001a04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001648:	2301      	movs	r3, #1
 800164a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800164c:	2301      	movs	r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_ADC_Init+0xa8>)
 800165a:	f004 fa4b 	bl	8005af4 <HAL_ADC_ConfigChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8001664:	f000 f9ce 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200002ec 	.word	0x200002ec
 8001674:	40012400 	.word	0x40012400

08001678 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800167c:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <MX_SPI1_Init+0x64>)
 800167e:	4a18      	ldr	r2, [pc, #96]	@ (80016e0 <MX_SPI1_Init+0x68>)
 8001680:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001682:	4b16      	ldr	r3, [pc, #88]	@ (80016dc <MX_SPI1_Init+0x64>)
 8001684:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001688:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800168a:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <MX_SPI1_Init+0x64>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001690:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <MX_SPI1_Init+0x64>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001696:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <MX_SPI1_Init+0x64>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800169c:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <MX_SPI1_Init+0x64>)
 800169e:	2200      	movs	r2, #0
 80016a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <MX_SPI1_Init+0x64>)
 80016a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <MX_SPI1_Init+0x64>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b0:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <MX_SPI1_Init+0x64>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <MX_SPI1_Init+0x64>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016bc:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <MX_SPI1_Init+0x64>)
 80016be:	2200      	movs	r2, #0
 80016c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <MX_SPI1_Init+0x64>)
 80016c4:	220a      	movs	r2, #10
 80016c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016c8:	4804      	ldr	r0, [pc, #16]	@ (80016dc <MX_SPI1_Init+0x64>)
 80016ca:	f006 fea5 	bl	8008418 <HAL_SPI_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016d4:	f000 f996 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000340 	.word	0x20000340
 80016e0:	40013000 	.word	0x40013000

080016e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	@ 0x28
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ea:	f107 0318 	add.w	r3, r7, #24
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001702:	463b      	mov	r3, r7
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800170e:	4b2d      	ldr	r3, [pc, #180]	@ (80017c4 <MX_TIM3_Init+0xe0>)
 8001710:	4a2d      	ldr	r2, [pc, #180]	@ (80017c8 <MX_TIM3_Init+0xe4>)
 8001712:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8001714:	4b2b      	ldr	r3, [pc, #172]	@ (80017c4 <MX_TIM3_Init+0xe0>)
 8001716:	221f      	movs	r2, #31
 8001718:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171a:	4b2a      	ldr	r3, [pc, #168]	@ (80017c4 <MX_TIM3_Init+0xe0>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2278;
 8001720:	4b28      	ldr	r3, [pc, #160]	@ (80017c4 <MX_TIM3_Init+0xe0>)
 8001722:	f640 02e6 	movw	r2, #2278	@ 0x8e6
 8001726:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001728:	4b26      	ldr	r3, [pc, #152]	@ (80017c4 <MX_TIM3_Init+0xe0>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172e:	4b25      	ldr	r3, [pc, #148]	@ (80017c4 <MX_TIM3_Init+0xe0>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001734:	4823      	ldr	r0, [pc, #140]	@ (80017c4 <MX_TIM3_Init+0xe0>)
 8001736:	f007 fa17 	bl	8008b68 <HAL_TIM_Base_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001740:	f000 f960 	bl	8001a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001744:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001748:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800174a:	f107 0318 	add.w	r3, r7, #24
 800174e:	4619      	mov	r1, r3
 8001750:	481c      	ldr	r0, [pc, #112]	@ (80017c4 <MX_TIM3_Init+0xe0>)
 8001752:	f007 fd7b 	bl	800924c <HAL_TIM_ConfigClockSource>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800175c:	f000 f952 	bl	8001a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001760:	4818      	ldr	r0, [pc, #96]	@ (80017c4 <MX_TIM3_Init+0xe0>)
 8001762:	f007 fab9 	bl	8008cd8 <HAL_TIM_PWM_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800176c:	f000 f94a 	bl	8001a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001778:	f107 0310 	add.w	r3, r7, #16
 800177c:	4619      	mov	r1, r3
 800177e:	4811      	ldr	r0, [pc, #68]	@ (80017c4 <MX_TIM3_Init+0xe0>)
 8001780:	f008 f870 	bl	8009864 <HAL_TIMEx_MasterConfigSynchronization>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800178a:	f000 f93b 	bl	8001a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800178e:	2360      	movs	r3, #96	@ 0x60
 8001790:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001792:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001796:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017a0:	463b      	mov	r3, r7
 80017a2:	2204      	movs	r2, #4
 80017a4:	4619      	mov	r1, r3
 80017a6:	4807      	ldr	r0, [pc, #28]	@ (80017c4 <MX_TIM3_Init+0xe0>)
 80017a8:	f007 fc8e 	bl	80090c8 <HAL_TIM_PWM_ConfigChannel>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80017b2:	f000 f927 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017b6:	4803      	ldr	r0, [pc, #12]	@ (80017c4 <MX_TIM3_Init+0xe0>)
 80017b8:	f000 fa56 	bl	8001c68 <HAL_TIM_MspPostInit>

}
 80017bc:	bf00      	nop
 80017be:	3728      	adds	r7, #40	@ 0x28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000398 	.word	0x20000398
 80017c8:	40000400 	.word	0x40000400

080017cc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d2:	463b      	mov	r3, r7
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017da:	4b15      	ldr	r3, [pc, #84]	@ (8001830 <MX_TIM6_Init+0x64>)
 80017dc:	4a15      	ldr	r2, [pc, #84]	@ (8001834 <MX_TIM6_Init+0x68>)
 80017de:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000;
 80017e0:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <MX_TIM6_Init+0x64>)
 80017e2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80017e6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <MX_TIM6_Init+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80017ee:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <MX_TIM6_Init+0x64>)
 80017f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017f4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <MX_TIM6_Init+0x64>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017fc:	480c      	ldr	r0, [pc, #48]	@ (8001830 <MX_TIM6_Init+0x64>)
 80017fe:	f007 f9b3 	bl	8008b68 <HAL_TIM_Base_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001808:	f000 f8fc 	bl	8001a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001814:	463b      	mov	r3, r7
 8001816:	4619      	mov	r1, r3
 8001818:	4805      	ldr	r0, [pc, #20]	@ (8001830 <MX_TIM6_Init+0x64>)
 800181a:	f008 f823 	bl	8009864 <HAL_TIMEx_MasterConfigSynchronization>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001824:	f000 f8ee 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	200003d8 	.word	0x200003d8
 8001834:	40001000 	.word	0x40001000

08001838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800183c:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <MX_USART2_UART_Init+0x4c>)
 800183e:	4a12      	ldr	r2, [pc, #72]	@ (8001888 <MX_USART2_UART_Init+0x50>)
 8001840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001842:	4b10      	ldr	r3, [pc, #64]	@ (8001884 <MX_USART2_UART_Init+0x4c>)
 8001844:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800184a:	4b0e      	ldr	r3, [pc, #56]	@ (8001884 <MX_USART2_UART_Init+0x4c>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001850:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <MX_USART2_UART_Init+0x4c>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001856:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <MX_USART2_UART_Init+0x4c>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800185c:	4b09      	ldr	r3, [pc, #36]	@ (8001884 <MX_USART2_UART_Init+0x4c>)
 800185e:	220c      	movs	r2, #12
 8001860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001862:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <MX_USART2_UART_Init+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <MX_USART2_UART_Init+0x4c>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800186e:	4805      	ldr	r0, [pc, #20]	@ (8001884 <MX_USART2_UART_Init+0x4c>)
 8001870:	f008 f856 	bl	8009920 <HAL_UART_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800187a:	f000 f8c3 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000418 	.word	0x20000418
 8001888:	40004400 	.word	0x40004400

0800188c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	@ 0x28
 8001890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	4b4b      	ldr	r3, [pc, #300]	@ (80019d0 <MX_GPIO_Init+0x144>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a4a      	ldr	r2, [pc, #296]	@ (80019d0 <MX_GPIO_Init+0x144>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	61d3      	str	r3, [r2, #28]
 80018ae:	4b48      	ldr	r3, [pc, #288]	@ (80019d0 <MX_GPIO_Init+0x144>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ba:	4b45      	ldr	r3, [pc, #276]	@ (80019d0 <MX_GPIO_Init+0x144>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	4a44      	ldr	r2, [pc, #272]	@ (80019d0 <MX_GPIO_Init+0x144>)
 80018c0:	f043 0320 	orr.w	r3, r3, #32
 80018c4:	61d3      	str	r3, [r2, #28]
 80018c6:	4b42      	ldr	r3, [pc, #264]	@ (80019d0 <MX_GPIO_Init+0x144>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f003 0320 	and.w	r3, r3, #32
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	4b3f      	ldr	r3, [pc, #252]	@ (80019d0 <MX_GPIO_Init+0x144>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	4a3e      	ldr	r2, [pc, #248]	@ (80019d0 <MX_GPIO_Init+0x144>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	61d3      	str	r3, [r2, #28]
 80018de:	4b3c      	ldr	r3, [pc, #240]	@ (80019d0 <MX_GPIO_Init+0x144>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	4b39      	ldr	r3, [pc, #228]	@ (80019d0 <MX_GPIO_Init+0x144>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	4a38      	ldr	r2, [pc, #224]	@ (80019d0 <MX_GPIO_Init+0x144>)
 80018f0:	f043 0302 	orr.w	r3, r3, #2
 80018f4:	61d3      	str	r3, [r2, #28]
 80018f6:	4b36      	ldr	r3, [pc, #216]	@ (80019d0 <MX_GPIO_Init+0x144>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001902:	2200      	movs	r2, #0
 8001904:	f64f 4106 	movw	r1, #64518	@ 0xfc06
 8001908:	4832      	ldr	r0, [pc, #200]	@ (80019d4 <MX_GPIO_Init+0x148>)
 800190a:	f004 fed3 	bl	80066b4 <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001914:	4830      	ldr	r0, [pc, #192]	@ (80019d8 <MX_GPIO_Init+0x14c>)
 8001916:	f004 fecd 	bl	80066b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin BTN4_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = B1_Pin|BTN4_Pin|BTN3_Pin;
 800191a:	f242 0360 	movw	r3, #8288	@ 0x2060
 800191e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001920:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	482a      	ldr	r0, [pc, #168]	@ (80019dc <MX_GPIO_Init+0x150>)
 8001932:	f004 fc3f 	bl	80061b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin
                           LED4_Pin LED5_Pin LED6_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001936:	f64f 4306 	movw	r3, #64518	@ 0xfc06
 800193a:	617b      	str	r3, [r7, #20]
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193c:	2301      	movs	r3, #1
 800193e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	4821      	ldr	r0, [pc, #132]	@ (80019d4 <MX_GPIO_Init+0x148>)
 8001950:	f004 fc30 	bl	80061b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001954:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195a:	2301      	movs	r3, #1
 800195c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	481a      	ldr	r0, [pc, #104]	@ (80019d8 <MX_GPIO_Init+0x14c>)
 800196e:	f004 fc21 	bl	80061b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 8001972:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001978:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800197c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	4813      	ldr	r0, [pc, #76]	@ (80019d8 <MX_GPIO_Init+0x14c>)
 800198a:	f004 fc13 	bl	80061b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DOUBLE_TAP_Pin */
  GPIO_InitStruct.Pin = DOUBLE_TAP_Pin;
 800198e:	2380      	movs	r3, #128	@ 0x80
 8001990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001992:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DOUBLE_TAP_GPIO_Port, &GPIO_InitStruct);
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4619      	mov	r1, r3
 80019a2:	480c      	ldr	r0, [pc, #48]	@ (80019d4 <MX_GPIO_Init+0x148>)
 80019a4:	f004 fc06 	bl	80061b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2101      	movs	r1, #1
 80019ac:	2017      	movs	r0, #23
 80019ae:	f004 fb8a 	bl	80060c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019b2:	2017      	movs	r0, #23
 80019b4:	f004 fba3 	bl	80060fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80019b8:	2200      	movs	r2, #0
 80019ba:	2101      	movs	r1, #1
 80019bc:	2028      	movs	r0, #40	@ 0x28
 80019be:	f004 fb82 	bl	80060c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019c2:	2028      	movs	r0, #40	@ 0x28
 80019c4:	f004 fb9b 	bl	80060fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019c8:	bf00      	nop
 80019ca:	3728      	adds	r7, #40	@ 0x28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020400 	.word	0x40020400
 80019d8:	40020000 	.word	0x40020000
 80019dc:	40020800 	.word	0x40020800

080019e0 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 80019e8:	1d39      	adds	r1, r7, #4
 80019ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019ee:	2201      	movs	r2, #1
 80019f0:	4803      	ldr	r0, [pc, #12]	@ (8001a00 <__io_putchar+0x20>)
 80019f2:	f007 ffe5 	bl	80099c0 <HAL_UART_Transmit>
	// ITM_SendChar(ch);
	return ch;
 80019f6:	687b      	ldr	r3, [r7, #4]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000418 	.word	0x20000418

08001a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a08:	b672      	cpsid	i
}
 8001a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <Error_Handler+0x8>

08001a10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001a16:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <HAL_MspInit+0x5c>)
 8001a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1a:	4a14      	ldr	r2, [pc, #80]	@ (8001a6c <HAL_MspInit+0x5c>)
 8001a1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a20:	6253      	str	r3, [r2, #36]	@ 0x24
 8001a22:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <HAL_MspInit+0x5c>)
 8001a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <HAL_MspInit+0x5c>)
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4a0e      	ldr	r2, [pc, #56]	@ (8001a6c <HAL_MspInit+0x5c>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6213      	str	r3, [r2, #32]
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <HAL_MspInit+0x5c>)
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <HAL_MspInit+0x5c>)
 8001a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4a:	4a08      	ldr	r2, [pc, #32]	@ (8001a6c <HAL_MspInit+0x5c>)
 8001a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a50:	6253      	str	r3, [r2, #36]	@ 0x24
 8001a52:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_MspInit+0x5c>)
 8001a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001a5e:	2006      	movs	r0, #6
 8001a60:	f004 fb26 	bl	80060b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40023800 	.word	0x40023800

08001a70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	@ 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a19      	ldr	r2, [pc, #100]	@ (8001af4 <HAL_ADC_MspInit+0x84>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d12b      	bne.n	8001aea <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a92:	4b19      	ldr	r3, [pc, #100]	@ (8001af8 <HAL_ADC_MspInit+0x88>)
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	4a18      	ldr	r2, [pc, #96]	@ (8001af8 <HAL_ADC_MspInit+0x88>)
 8001a98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a9c:	6213      	str	r3, [r2, #32]
 8001a9e:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <HAL_ADC_MspInit+0x88>)
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aaa:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <HAL_ADC_MspInit+0x88>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	4a12      	ldr	r2, [pc, #72]	@ (8001af8 <HAL_ADC_MspInit+0x88>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	61d3      	str	r3, [r2, #28]
 8001ab6:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <HAL_ADC_MspInit+0x88>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = POT2_Pin|POT1_Pin;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4809      	ldr	r0, [pc, #36]	@ (8001afc <HAL_ADC_MspInit+0x8c>)
 8001ad6:	f004 fb6d 	bl	80061b4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2100      	movs	r1, #0
 8001ade:	2012      	movs	r0, #18
 8001ae0:	f004 faf1 	bl	80060c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001ae4:	2012      	movs	r0, #18
 8001ae6:	f004 fb0a 	bl	80060fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001aea:	bf00      	nop
 8001aec:	3728      	adds	r7, #40	@ 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40012400 	.word	0x40012400
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020000 	.word	0x40020000

08001b00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	@ 0x28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001b8c <HAL_SPI_MspInit+0x8c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d12f      	bne.n	8001b82 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b22:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <HAL_SPI_MspInit+0x90>)
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	4a1a      	ldr	r2, [pc, #104]	@ (8001b90 <HAL_SPI_MspInit+0x90>)
 8001b28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b2c:	6213      	str	r3, [r2, #32]
 8001b2e:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <HAL_SPI_MspInit+0x90>)
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <HAL_SPI_MspInit+0x90>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	4a14      	ldr	r2, [pc, #80]	@ (8001b90 <HAL_SPI_MspInit+0x90>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	61d3      	str	r3, [r2, #28]
 8001b46:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <HAL_SPI_MspInit+0x90>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8001b52:	23e0      	movs	r3, #224	@ 0xe0
 8001b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b62:	2305      	movs	r3, #5
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	f107 0314 	add.w	r3, r7, #20
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4809      	ldr	r0, [pc, #36]	@ (8001b94 <HAL_SPI_MspInit+0x94>)
 8001b6e:	f004 fb21 	bl	80061b4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	2023      	movs	r0, #35	@ 0x23
 8001b78:	f004 faa5 	bl	80060c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001b7c:	2023      	movs	r0, #35	@ 0x23
 8001b7e:	f004 fabe 	bl	80060fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b82:	bf00      	nop
 8001b84:	3728      	adds	r7, #40	@ 0x28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40013000 	.word	0x40013000
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020000 	.word	0x40020000

08001b98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	@ 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a28      	ldr	r2, [pc, #160]	@ (8001c58 <HAL_TIM_Base_MspInit+0xc0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d130      	bne.n	8001c1c <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bba:	4b28      	ldr	r3, [pc, #160]	@ (8001c5c <HAL_TIM_Base_MspInit+0xc4>)
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	4a27      	ldr	r2, [pc, #156]	@ (8001c5c <HAL_TIM_Base_MspInit+0xc4>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	6253      	str	r3, [r2, #36]	@ 0x24
 8001bc6:	4b25      	ldr	r3, [pc, #148]	@ (8001c5c <HAL_TIM_Base_MspInit+0xc4>)
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	4b22      	ldr	r3, [pc, #136]	@ (8001c5c <HAL_TIM_Base_MspInit+0xc4>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	4a21      	ldr	r2, [pc, #132]	@ (8001c5c <HAL_TIM_Base_MspInit+0xc4>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	61d3      	str	r3, [r2, #28]
 8001bde:	4b1f      	ldr	r3, [pc, #124]	@ (8001c5c <HAL_TIM_Base_MspInit+0xc4>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bea:	2310      	movs	r3, #16
 8001bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	4816      	ldr	r0, [pc, #88]	@ (8001c60 <HAL_TIM_Base_MspInit+0xc8>)
 8001c06:	f004 fad5 	bl	80061b4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	201d      	movs	r0, #29
 8001c10:	f004 fa59 	bl	80060c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c14:	201d      	movs	r0, #29
 8001c16:	f004 fa72 	bl	80060fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001c1a:	e018      	b.n	8001c4e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM6)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a10      	ldr	r2, [pc, #64]	@ (8001c64 <HAL_TIM_Base_MspInit+0xcc>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d113      	bne.n	8001c4e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c26:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <HAL_TIM_Base_MspInit+0xc4>)
 8001c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c5c <HAL_TIM_Base_MspInit+0xc4>)
 8001c2c:	f043 0310 	orr.w	r3, r3, #16
 8001c30:	6253      	str	r3, [r2, #36]	@ 0x24
 8001c32:	4b0a      	ldr	r3, [pc, #40]	@ (8001c5c <HAL_TIM_Base_MspInit+0xc4>)
 8001c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c36:	f003 0310 	and.w	r3, r3, #16
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2100      	movs	r1, #0
 8001c42:	202b      	movs	r0, #43	@ 0x2b
 8001c44:	f004 fa3f 	bl	80060c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001c48:	202b      	movs	r0, #43	@ 0x2b
 8001c4a:	f004 fa58 	bl	80060fe <HAL_NVIC_EnableIRQ>
}
 8001c4e:	bf00      	nop
 8001c50:	3728      	adds	r7, #40	@ 0x28
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40000400 	.word	0x40000400
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020400 	.word	0x40020400
 8001c64:	40001000 	.word	0x40001000

08001c68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a11      	ldr	r2, [pc, #68]	@ (8001ccc <HAL_TIM_MspPostInit+0x64>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d11b      	bne.n	8001cc2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8a:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <HAL_TIM_MspPostInit+0x68>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	4a10      	ldr	r2, [pc, #64]	@ (8001cd0 <HAL_TIM_MspPostInit+0x68>)
 8001c90:	f043 0304 	orr.w	r3, r3, #4
 8001c94:	61d3      	str	r3, [r2, #28]
 8001c96:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <HAL_TIM_MspPostInit+0x68>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ca2:	2380      	movs	r3, #128	@ 0x80
 8001ca4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb6:	f107 030c 	add.w	r3, r7, #12
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4805      	ldr	r0, [pc, #20]	@ (8001cd4 <HAL_TIM_MspPostInit+0x6c>)
 8001cbe:	f004 fa79 	bl	80061b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001cc2:	bf00      	nop
 8001cc4:	3720      	adds	r7, #32
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40000400 	.word	0x40000400
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40020800 	.word	0x40020800

08001cd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	@ 0x28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a17      	ldr	r2, [pc, #92]	@ (8001d54 <HAL_UART_MspInit+0x7c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d127      	bne.n	8001d4a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cfa:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <HAL_UART_MspInit+0x80>)
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfe:	4a16      	ldr	r2, [pc, #88]	@ (8001d58 <HAL_UART_MspInit+0x80>)
 8001d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d04:	6253      	str	r3, [r2, #36]	@ 0x24
 8001d06:	4b14      	ldr	r3, [pc, #80]	@ (8001d58 <HAL_UART_MspInit+0x80>)
 8001d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	4b11      	ldr	r3, [pc, #68]	@ (8001d58 <HAL_UART_MspInit+0x80>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	4a10      	ldr	r2, [pc, #64]	@ (8001d58 <HAL_UART_MspInit+0x80>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	61d3      	str	r3, [r2, #28]
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d58 <HAL_UART_MspInit+0x80>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d2a:	230c      	movs	r3, #12
 8001d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d36:	2303      	movs	r3, #3
 8001d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	4619      	mov	r1, r3
 8001d44:	4805      	ldr	r0, [pc, #20]	@ (8001d5c <HAL_UART_MspInit+0x84>)
 8001d46:	f004 fa35 	bl	80061b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d4a:	bf00      	nop
 8001d4c:	3728      	adds	r7, #40	@ 0x28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40004400 	.word	0x40004400
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40020000 	.word	0x40020000

08001d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <NMI_Handler+0x4>

08001d68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <HardFault_Handler+0x4>

08001d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <MemManage_Handler+0x4>

08001d78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <BusFault_Handler+0x4>

08001d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <UsageFault_Handler+0x4>

08001d88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr

08001da0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db0:	f003 fad0 	bl	8005354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001dbc:	4802      	ldr	r0, [pc, #8]	@ (8001dc8 <ADC1_IRQHandler+0x10>)
 8001dbe:	f003 fd87 	bl	80058d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200002ec 	.word	0x200002ec

08001dcc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 8001dd0:	2020      	movs	r0, #32
 8001dd2:	f004 fca1 	bl	8006718 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 8001dd6:	2040      	movs	r0, #64	@ 0x40
 8001dd8:	f004 fc9e 	bl	8006718 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DOUBLE_TAP_Pin);
 8001ddc:	2080      	movs	r0, #128	@ 0x80
 8001dde:	f004 fc9b 	bl	8006718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dec:	4802      	ldr	r0, [pc, #8]	@ (8001df8 <TIM3_IRQHandler+0x10>)
 8001dee:	f007 f88e 	bl	8008f0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000398 	.word	0x20000398

08001dfc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001e00:	4802      	ldr	r0, [pc, #8]	@ (8001e0c <SPI1_IRQHandler+0x10>)
 8001e02:	f006 fcd5 	bl	80087b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000340 	.word	0x20000340

08001e10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8001e14:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001e18:	f004 fc7e 	bl	8006718 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8001e1c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001e20:	f004 fc7a 	bl	8006718 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001e24:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e28:	f004 fc76 	bl	8006718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e34:	4802      	ldr	r0, [pc, #8]	@ (8001e40 <TIM6_IRQHandler+0x10>)
 8001e36:	f007 f86a 	bl	8008f0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200003d8 	.word	0x200003d8

08001e44 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a06      	ldr	r2, [pc, #24]	@ (8001e68 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d105      	bne.n	8001e60 <HAL_TIM_PeriodElapsedCallback+0x1c>
		updateVariableSensor();
 8001e54:	f000 f868 	bl	8001f28 <updateVariableSensor>
		displayVariableSensor();
 8001e58:	f000 f878 	bl	8001f4c <displayVariableSensor>
		checkVariableSensor();
 8001e5c:	f000 f89c 	bl	8001f98 <checkVariableSensor>
	}
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	200003d8 	.word	0x200003d8

08001e6c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin != currentSensor){
 8001e76:	4b21      	ldr	r3, [pc, #132]	@ (8001efc <HAL_GPIO_EXTI_Callback+0x90>)
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	88fa      	ldrh	r2, [r7, #6]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d03a      	beq.n	8001ef6 <HAL_GPIO_EXTI_Callback+0x8a>
		HAL_TIM_Base_Stop_IT(&htim6);
 8001e80:	481f      	ldr	r0, [pc, #124]	@ (8001f00 <HAL_GPIO_EXTI_Callback+0x94>)
 8001e82:	f006 ff03 	bl	8008c8c <HAL_TIM_Base_Stop_IT>
		currentSensor = GPIO_Pin;
 8001e86:	4a1d      	ldr	r2, [pc, #116]	@ (8001efc <HAL_GPIO_EXTI_Callback+0x90>)
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	8013      	strh	r3, [r2, #0]
		switch(GPIO_Pin){
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e92:	d014      	beq.n	8001ebe <HAL_GPIO_EXTI_Callback+0x52>
 8001e94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e98:	dc26      	bgt.n	8001ee8 <HAL_GPIO_EXTI_Callback+0x7c>
 8001e9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e9e:	d007      	beq.n	8001eb0 <HAL_GPIO_EXTI_Callback+0x44>
 8001ea0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ea4:	dc20      	bgt.n	8001ee8 <HAL_GPIO_EXTI_Callback+0x7c>
 8001ea6:	2b20      	cmp	r3, #32
 8001ea8:	d017      	beq.n	8001eda <HAL_GPIO_EXTI_Callback+0x6e>
 8001eaa:	2b40      	cmp	r3, #64	@ 0x40
 8001eac:	d00e      	beq.n	8001ecc <HAL_GPIO_EXTI_Callback+0x60>
 8001eae:	e01b      	b.n	8001ee8 <HAL_GPIO_EXTI_Callback+0x7c>
			case BTN1_Pin:
				printf("TEMPERATURE\r\n");
 8001eb0:	4814      	ldr	r0, [pc, #80]	@ (8001f04 <HAL_GPIO_EXTI_Callback+0x98>)
 8001eb2:	f008 fdb7 	bl	800aa24 <puts>
				displayIndex(index_temperature);
 8001eb6:	4814      	ldr	r0, [pc, #80]	@ (8001f08 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001eb8:	f000 fa56 	bl	8002368 <displayIndex>
				break;
 8001ebc:	e017      	b.n	8001eee <HAL_GPIO_EXTI_Callback+0x82>
			case BTN2_Pin:
				printf("HUMIDITY\r\n");
 8001ebe:	4813      	ldr	r0, [pc, #76]	@ (8001f0c <HAL_GPIO_EXTI_Callback+0xa0>)
 8001ec0:	f008 fdb0 	bl	800aa24 <puts>
				displayIndex(index_humidity);
 8001ec4:	4812      	ldr	r0, [pc, #72]	@ (8001f10 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001ec6:	f000 fa4f 	bl	8002368 <displayIndex>
				break;
 8001eca:	e010      	b.n	8001eee <HAL_GPIO_EXTI_Callback+0x82>
			case BTN3_Pin:
				printf("ALARM_TEMPERATURE\r\n");
 8001ecc:	4811      	ldr	r0, [pc, #68]	@ (8001f14 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001ece:	f008 fda9 	bl	800aa24 <puts>
				displayIndex(index_alarm_temperature);
 8001ed2:	4811      	ldr	r0, [pc, #68]	@ (8001f18 <HAL_GPIO_EXTI_Callback+0xac>)
 8001ed4:	f000 fa48 	bl	8002368 <displayIndex>
				break;
 8001ed8:	e009      	b.n	8001eee <HAL_GPIO_EXTI_Callback+0x82>
			case BTN4_Pin:
				printf("ALARM HUMIDITY\r\n");
 8001eda:	4810      	ldr	r0, [pc, #64]	@ (8001f1c <HAL_GPIO_EXTI_Callback+0xb0>)
 8001edc:	f008 fda2 	bl	800aa24 <puts>
				displayIndex(index_alarm_humidity);
 8001ee0:	480f      	ldr	r0, [pc, #60]	@ (8001f20 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001ee2:	f000 fa41 	bl	8002368 <displayIndex>
				break;
 8001ee6:	e002      	b.n	8001eee <HAL_GPIO_EXTI_Callback+0x82>
			default:
				printf("PIN INCONNUE \r\n");
 8001ee8:	480e      	ldr	r0, [pc, #56]	@ (8001f24 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001eea:	f008 fd9b 	bl	800aa24 <puts>
		}
		HAL_TIM_Base_Start_IT(&htim6);
 8001eee:	4804      	ldr	r0, [pc, #16]	@ (8001f00 <HAL_GPIO_EXTI_Callback+0x94>)
 8001ef0:	f006 fe7a 	bl	8008be8 <HAL_TIM_Base_Start_IT>
		return;
 8001ef4:	bf00      	nop
	}
}
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000460 	.word	0x20000460
 8001f00:	200003d8 	.word	0x200003d8
 8001f04:	0800cea4 	.word	0x0800cea4
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	0800ceb4 	.word	0x0800ceb4
 8001f10:	20000024 	.word	0x20000024
 8001f14:	0800cec0 	.word	0x0800cec0
 8001f18:	20000010 	.word	0x20000010
 8001f1c:	0800ced4 	.word	0x0800ced4
 8001f20:	20000034 	.word	0x20000034
 8001f24:	0800cee4 	.word	0x0800cee4

08001f28 <updateVariableSensor>:

void updateVariableSensor(){
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
	IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_TEMPERATURE, &Temperature);
 8001f2c:	4a05      	ldr	r2, [pc, #20]	@ (8001f44 <updateVariableSensor+0x1c>)
 8001f2e:	2101      	movs	r1, #1
 8001f30:	2000      	movs	r0, #0
 8001f32:	f002 ff33 	bl	8004d9c <IKS01A3_ENV_SENSOR_GetValue>
	IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_HUMIDITY, &Humidity);
 8001f36:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <updateVariableSensor+0x20>)
 8001f38:	2104      	movs	r1, #4
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f002 ff2e 	bl	8004d9c <IKS01A3_ENV_SENSOR_GetValue>
	// IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &Pressure);
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000464 	.word	0x20000464
 8001f48:	20000468 	.word	0x20000468

08001f4c <displayVariableSensor>:

void displayVariableSensor(){
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
	switch(currentSensor){
 8001f50:	4b10      	ldr	r3, [pc, #64]	@ (8001f94 <displayVariableSensor+0x48>)
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f58:	d010      	beq.n	8001f7c <displayVariableSensor+0x30>
 8001f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f5e:	dc16      	bgt.n	8001f8e <displayVariableSensor+0x42>
 8001f60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f64:	d007      	beq.n	8001f76 <displayVariableSensor+0x2a>
 8001f66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f6a:	dc10      	bgt.n	8001f8e <displayVariableSensor+0x42>
 8001f6c:	2b20      	cmp	r3, #32
 8001f6e:	d00b      	beq.n	8001f88 <displayVariableSensor+0x3c>
 8001f70:	2b40      	cmp	r3, #64	@ 0x40
 8001f72:	d006      	beq.n	8001f82 <displayVariableSensor+0x36>
			break;
		case BTN4_Pin:
			displayAlarmHumidity();
			break;
	}
}
 8001f74:	e00b      	b.n	8001f8e <displayVariableSensor+0x42>
			displayTemperature();
 8001f76:	f000 f8c5 	bl	8002104 <displayTemperature>
			break;
 8001f7a:	e008      	b.n	8001f8e <displayVariableSensor+0x42>
			displayHumidity();
 8001f7c:	f000 f8fe 	bl	800217c <displayHumidity>
			break;
 8001f80:	e005      	b.n	8001f8e <displayVariableSensor+0x42>
			displayAlarmTemperature();
 8001f82:	f000 f937 	bl	80021f4 <displayAlarmTemperature>
			break;
 8001f86:	e002      	b.n	8001f8e <displayVariableSensor+0x42>
			displayAlarmHumidity();
 8001f88:	f000 f986 	bl	8002298 <displayAlarmHumidity>
			break;
 8001f8c:	bf00      	nop
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000460 	.word	0x20000460

08001f98 <checkVariableSensor>:

void checkVariableSensor(){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
	bool state_alarm_temperature= false;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	71fb      	strb	r3, [r7, #7]
	bool state_alarm_humidity= false;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	71bb      	strb	r3, [r7, #6]

	if(Humidity > alarmHumidity && alarmHumidity !=-1.0){
 8001fa6:	4b4e      	ldr	r3, [pc, #312]	@ (80020e0 <checkVariableSensor+0x148>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a4e      	ldr	r2, [pc, #312]	@ (80020e4 <checkVariableSensor+0x14c>)
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff f89b 	bl	80010ec <__aeabi_fcmpgt>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d020      	beq.n	8001ffe <checkVariableSensor+0x66>
 8001fbc:	4b49      	ldr	r3, [pc, #292]	@ (80020e4 <checkVariableSensor+0x14c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4949      	ldr	r1, [pc, #292]	@ (80020e8 <checkVariableSensor+0x150>)
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff f86a 	bl	800109c <__aeabi_fcmpeq>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d117      	bne.n	8001ffe <checkVariableSensor+0x66>
		printf("ALARM TEMPERATURE ON\r\n");
 8001fce:	4847      	ldr	r0, [pc, #284]	@ (80020ec <checkVariableSensor+0x154>)
 8001fd0:	f008 fd28 	bl	800aa24 <puts>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8001fd4:	2102      	movs	r1, #2
 8001fd6:	4846      	ldr	r0, [pc, #280]	@ (80020f0 <checkVariableSensor+0x158>)
 8001fd8:	f004 fb84 	bl	80066e4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001fdc:	2104      	movs	r1, #4
 8001fde:	4844      	ldr	r0, [pc, #272]	@ (80020f0 <checkVariableSensor+0x158>)
 8001fe0:	f004 fb80 	bl	80066e4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001fe4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fe8:	4841      	ldr	r0, [pc, #260]	@ (80020f0 <checkVariableSensor+0x158>)
 8001fea:	f004 fb7b 	bl	80066e4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001fee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ff2:	483f      	ldr	r0, [pc, #252]	@ (80020f0 <checkVariableSensor+0x158>)
 8001ff4:	f004 fb76 	bl	80066e4 <HAL_GPIO_TogglePin>
		state_alarm_temperature = true;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	71fb      	strb	r3, [r7, #7]
 8001ffc:	e015      	b.n	800202a <checkVariableSensor+0x92>
	}
	else {
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2102      	movs	r1, #2
 8002002:	483b      	ldr	r0, [pc, #236]	@ (80020f0 <checkVariableSensor+0x158>)
 8002004:	f004 fb56 	bl	80066b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8002008:	2200      	movs	r2, #0
 800200a:	2104      	movs	r1, #4
 800200c:	4838      	ldr	r0, [pc, #224]	@ (80020f0 <checkVariableSensor+0x158>)
 800200e:	f004 fb51 	bl	80066b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8002012:	2200      	movs	r2, #0
 8002014:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002018:	4835      	ldr	r0, [pc, #212]	@ (80020f0 <checkVariableSensor+0x158>)
 800201a:	f004 fb4b 	bl	80066b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002024:	4832      	ldr	r0, [pc, #200]	@ (80020f0 <checkVariableSensor+0x158>)
 8002026:	f004 fb45 	bl	80066b4 <HAL_GPIO_WritePin>
	}

	if(Temperature > alarmTemperature && alarmTemperature !=-1){
 800202a:	4b32      	ldr	r3, [pc, #200]	@ (80020f4 <checkVariableSensor+0x15c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a32      	ldr	r2, [pc, #200]	@ (80020f8 <checkVariableSensor+0x160>)
 8002030:	6812      	ldr	r2, [r2, #0]
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff f859 	bl	80010ec <__aeabi_fcmpgt>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d022      	beq.n	8002086 <checkVariableSensor+0xee>
 8002040:	4b2d      	ldr	r3, [pc, #180]	@ (80020f8 <checkVariableSensor+0x160>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4928      	ldr	r1, [pc, #160]	@ (80020e8 <checkVariableSensor+0x150>)
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff f828 	bl	800109c <__aeabi_fcmpeq>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d119      	bne.n	8002086 <checkVariableSensor+0xee>
		printf("ALARM HUMIDITY ON\r\n");
 8002052:	482a      	ldr	r0, [pc, #168]	@ (80020fc <checkVariableSensor+0x164>)
 8002054:	f008 fce6 	bl	800aa24 <puts>
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8002058:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800205c:	4824      	ldr	r0, [pc, #144]	@ (80020f0 <checkVariableSensor+0x158>)
 800205e:	f004 fb41 	bl	80066e4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 8002062:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002066:	4822      	ldr	r0, [pc, #136]	@ (80020f0 <checkVariableSensor+0x158>)
 8002068:	f004 fb3c 	bl	80066e4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
 800206c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002070:	481f      	ldr	r0, [pc, #124]	@ (80020f0 <checkVariableSensor+0x158>)
 8002072:	f004 fb37 	bl	80066e4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED7_GPIO_Port, LED7_Pin);
 8002076:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800207a:	481d      	ldr	r0, [pc, #116]	@ (80020f0 <checkVariableSensor+0x158>)
 800207c:	f004 fb32 	bl	80066e4 <HAL_GPIO_TogglePin>
		state_alarm_humidity = true;
 8002080:	2301      	movs	r3, #1
 8002082:	71bb      	strb	r3, [r7, #6]
 8002084:	e017      	b.n	80020b6 <checkVariableSensor+0x11e>
	}
	else {
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800208c:	4818      	ldr	r0, [pc, #96]	@ (80020f0 <checkVariableSensor+0x158>)
 800208e:	f004 fb11 	bl	80066b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002098:	4815      	ldr	r0, [pc, #84]	@ (80020f0 <checkVariableSensor+0x158>)
 800209a:	f004 fb0b 	bl	80066b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80020a4:	4812      	ldr	r0, [pc, #72]	@ (80020f0 <checkVariableSensor+0x158>)
 80020a6:	f004 fb05 	bl	80066b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020b0:	480f      	ldr	r0, [pc, #60]	@ (80020f0 <checkVariableSensor+0x158>)
 80020b2:	f004 faff 	bl	80066b4 <HAL_GPIO_WritePin>
	}

	(state_alarm_temperature || state_alarm_humidity) ? HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) : HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <checkVariableSensor+0x12a>
 80020bc:	79bb      	ldrb	r3, [r7, #6]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d004      	beq.n	80020cc <checkVariableSensor+0x134>
 80020c2:	2104      	movs	r1, #4
 80020c4:	480e      	ldr	r0, [pc, #56]	@ (8002100 <checkVariableSensor+0x168>)
 80020c6:	f006 fe4f 	bl	8008d68 <HAL_TIM_PWM_Start>
 80020ca:	e004      	b.n	80020d6 <checkVariableSensor+0x13e>
 80020cc:	2104      	movs	r1, #4
 80020ce:	480c      	ldr	r0, [pc, #48]	@ (8002100 <checkVariableSensor+0x168>)
 80020d0:	f006 fee0 	bl	8008e94 <HAL_TIM_PWM_Stop>
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000468 	.word	0x20000468
 80020e4:	20000030 	.word	0x20000030
 80020e8:	bf800000 	.word	0xbf800000
 80020ec:	0800cef4 	.word	0x0800cef4
 80020f0:	40020400 	.word	0x40020400
 80020f4:	20000464 	.word	0x20000464
 80020f8:	2000000c 	.word	0x2000000c
 80020fc:	0800cf0c 	.word	0x0800cf0c
 8002100:	20000398 	.word	0x20000398

08002104 <displayTemperature>:

void displayTemperature(){
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af02      	add	r7, sp, #8
	char temp_Temperature[5];
	snprintf(temp_Temperature, sizeof(temp_Temperature), "%.2f", Temperature);
 800210a:	4b19      	ldr	r3, [pc, #100]	@ (8002170 <displayTemperature+0x6c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe f9a2 	bl	8000458 <__aeabi_f2d>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4638      	mov	r0, r7
 800211a:	e9cd 2300 	strd	r2, r3, [sp]
 800211e:	4a15      	ldr	r2, [pc, #84]	@ (8002174 <displayTemperature+0x70>)
 8002120:	2105      	movs	r1, #5
 8002122:	f008 fc87 	bl	800aa34 <sniprintf>
	printf("Temperature : %s \r\n",temp_Temperature);
 8002126:	463b      	mov	r3, r7
 8002128:	4619      	mov	r1, r3
 800212a:	4813      	ldr	r0, [pc, #76]	@ (8002178 <displayTemperature+0x74>)
 800212c:	f008 fc12 	bl	800a954 <iprintf>

	MAX7219_DisplayChar(1, temp_Temperature[0]);
 8002130:	783b      	ldrb	r3, [r7, #0]
 8002132:	4619      	mov	r1, r3
 8002134:	2001      	movs	r0, #1
 8002136:	f007 fe86 	bl	8009e46 <MAX7219_DisplayChar>
	MAX7219_DisplayChar(2, temp_Temperature[1]);
 800213a:	787b      	ldrb	r3, [r7, #1]
 800213c:	4619      	mov	r1, r3
 800213e:	2002      	movs	r0, #2
 8002140:	f007 fe81 	bl	8009e46 <MAX7219_DisplayChar>
	(temp_Temperature[2] == '.') ? MAX7219_DisplayChar(3, ' ') : MAX7219_DisplayChar(3, temp_Temperature[2]);
 8002144:	78bb      	ldrb	r3, [r7, #2]
 8002146:	2b2e      	cmp	r3, #46	@ 0x2e
 8002148:	d104      	bne.n	8002154 <displayTemperature+0x50>
 800214a:	2120      	movs	r1, #32
 800214c:	2003      	movs	r0, #3
 800214e:	f007 fe7a 	bl	8009e46 <MAX7219_DisplayChar>
 8002152:	e004      	b.n	800215e <displayTemperature+0x5a>
 8002154:	78bb      	ldrb	r3, [r7, #2]
 8002156:	4619      	mov	r1, r3
 8002158:	2003      	movs	r0, #3
 800215a:	f007 fe74 	bl	8009e46 <MAX7219_DisplayChar>
	MAX7219_DisplayChar(4, temp_Temperature[3]);
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	4619      	mov	r1, r3
 8002162:	2004      	movs	r0, #4
 8002164:	f007 fe6f 	bl	8009e46 <MAX7219_DisplayChar>
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20000464 	.word	0x20000464
 8002174:	0800cf20 	.word	0x0800cf20
 8002178:	0800cf28 	.word	0x0800cf28

0800217c <displayHumidity>:

void displayHumidity(){
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af02      	add	r7, sp, #8
	char temp_Humidity[5];
	snprintf(temp_Humidity, sizeof(temp_Humidity), "%.2f", Humidity);
 8002182:	4b19      	ldr	r3, [pc, #100]	@ (80021e8 <displayHumidity+0x6c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe f966 	bl	8000458 <__aeabi_f2d>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4638      	mov	r0, r7
 8002192:	e9cd 2300 	strd	r2, r3, [sp]
 8002196:	4a15      	ldr	r2, [pc, #84]	@ (80021ec <displayHumidity+0x70>)
 8002198:	2105      	movs	r1, #5
 800219a:	f008 fc4b 	bl	800aa34 <sniprintf>
	printf("Humidity : %s \r\n",temp_Humidity);
 800219e:	463b      	mov	r3, r7
 80021a0:	4619      	mov	r1, r3
 80021a2:	4813      	ldr	r0, [pc, #76]	@ (80021f0 <displayHumidity+0x74>)
 80021a4:	f008 fbd6 	bl	800a954 <iprintf>

	MAX7219_DisplayChar(1, temp_Humidity[0]);
 80021a8:	783b      	ldrb	r3, [r7, #0]
 80021aa:	4619      	mov	r1, r3
 80021ac:	2001      	movs	r0, #1
 80021ae:	f007 fe4a 	bl	8009e46 <MAX7219_DisplayChar>
	MAX7219_DisplayChar(2, temp_Humidity[1]);
 80021b2:	787b      	ldrb	r3, [r7, #1]
 80021b4:	4619      	mov	r1, r3
 80021b6:	2002      	movs	r0, #2
 80021b8:	f007 fe45 	bl	8009e46 <MAX7219_DisplayChar>
	(temp_Humidity[2] == '.') ? MAX7219_DisplayChar(3, ' ') : MAX7219_DisplayChar(3, temp_Humidity[2]);
 80021bc:	78bb      	ldrb	r3, [r7, #2]
 80021be:	2b2e      	cmp	r3, #46	@ 0x2e
 80021c0:	d104      	bne.n	80021cc <displayHumidity+0x50>
 80021c2:	2120      	movs	r1, #32
 80021c4:	2003      	movs	r0, #3
 80021c6:	f007 fe3e 	bl	8009e46 <MAX7219_DisplayChar>
 80021ca:	e004      	b.n	80021d6 <displayHumidity+0x5a>
 80021cc:	78bb      	ldrb	r3, [r7, #2]
 80021ce:	4619      	mov	r1, r3
 80021d0:	2003      	movs	r0, #3
 80021d2:	f007 fe38 	bl	8009e46 <MAX7219_DisplayChar>
	MAX7219_DisplayChar(4, temp_Humidity[3]);
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	4619      	mov	r1, r3
 80021da:	2004      	movs	r0, #4
 80021dc:	f007 fe33 	bl	8009e46 <MAX7219_DisplayChar>
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000468 	.word	0x20000468
 80021ec:	0800cf20 	.word	0x0800cf20
 80021f0:	0800cf3c 	.word	0x0800cf3c

080021f4 <displayAlarmTemperature>:
	MAX7219_DisplayChar(2, temp_Pressure[1]);
	MAX7219_DisplayChar(3, temp_Pressure[2]);
	MAX7219_DisplayChar(4, temp_Pressure[3]);
}

void displayAlarmTemperature(){
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af02      	add	r7, sp, #8
	HAL_ADC_Start_IT(&hadc);
 80021fa:	4822      	ldr	r0, [pc, #136]	@ (8002284 <displayAlarmTemperature+0x90>)
 80021fc:	f003 fabe 	bl	800577c <HAL_ADC_Start_IT>
	HAL_ADC_PollForConversion(&hadc, 1);
 8002200:	2101      	movs	r1, #1
 8002202:	4820      	ldr	r0, [pc, #128]	@ (8002284 <displayAlarmTemperature+0x90>)
 8002204:	f003 fa2a 	bl	800565c <HAL_ADC_PollForConversion>
	alarmTemperature = (float) HAL_ADC_GetValue(&hadc) /100;
 8002208:	481e      	ldr	r0, [pc, #120]	@ (8002284 <displayAlarmTemperature+0x90>)
 800220a:	f003 fb55 	bl	80058b8 <HAL_ADC_GetValue>
 800220e:	4603      	mov	r3, r0
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe fd57 	bl	8000cc4 <__aeabi_ui2f>
 8002216:	4603      	mov	r3, r0
 8002218:	491b      	ldr	r1, [pc, #108]	@ (8002288 <displayAlarmTemperature+0x94>)
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe fe5e 	bl	8000edc <__aeabi_fdiv>
 8002220:	4603      	mov	r3, r0
 8002222:	461a      	mov	r2, r3
 8002224:	4b19      	ldr	r3, [pc, #100]	@ (800228c <displayAlarmTemperature+0x98>)
 8002226:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_IT(&hadc);
 8002228:	4816      	ldr	r0, [pc, #88]	@ (8002284 <displayAlarmTemperature+0x90>)
 800222a:	f003 fb11 	bl	8005850 <HAL_ADC_Stop_IT>

	char temp_alarmTemperature[5];
	snprintf(temp_alarmTemperature, sizeof(temp_alarmTemperature), "%.2f", alarmTemperature);
 800222e:	4b17      	ldr	r3, [pc, #92]	@ (800228c <displayAlarmTemperature+0x98>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe f910 	bl	8000458 <__aeabi_f2d>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4638      	mov	r0, r7
 800223e:	e9cd 2300 	strd	r2, r3, [sp]
 8002242:	4a13      	ldr	r2, [pc, #76]	@ (8002290 <displayAlarmTemperature+0x9c>)
 8002244:	2105      	movs	r1, #5
 8002246:	f008 fbf5 	bl	800aa34 <sniprintf>
	printf("analogValuePotentiometer : %s\r\n",temp_alarmTemperature);
 800224a:	463b      	mov	r3, r7
 800224c:	4619      	mov	r1, r3
 800224e:	4811      	ldr	r0, [pc, #68]	@ (8002294 <displayAlarmTemperature+0xa0>)
 8002250:	f008 fb80 	bl	800a954 <iprintf>
	MAX7219_DisplayChar(1, temp_alarmTemperature[0]);
 8002254:	783b      	ldrb	r3, [r7, #0]
 8002256:	4619      	mov	r1, r3
 8002258:	2001      	movs	r0, #1
 800225a:	f007 fdf4 	bl	8009e46 <MAX7219_DisplayChar>
	MAX7219_DisplayChar(2, temp_alarmTemperature[1]);
 800225e:	787b      	ldrb	r3, [r7, #1]
 8002260:	4619      	mov	r1, r3
 8002262:	2002      	movs	r0, #2
 8002264:	f007 fdef 	bl	8009e46 <MAX7219_DisplayChar>
	MAX7219_DisplayChar(3, ' ');
 8002268:	2120      	movs	r1, #32
 800226a:	2003      	movs	r0, #3
 800226c:	f007 fdeb 	bl	8009e46 <MAX7219_DisplayChar>
	MAX7219_DisplayChar(4, temp_alarmTemperature[3]);
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	4619      	mov	r1, r3
 8002274:	2004      	movs	r0, #4
 8002276:	f007 fde6 	bl	8009e46 <MAX7219_DisplayChar>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200002ec 	.word	0x200002ec
 8002288:	42c80000 	.word	0x42c80000
 800228c:	2000000c 	.word	0x2000000c
 8002290:	0800cf20 	.word	0x0800cf20
 8002294:	0800cf64 	.word	0x0800cf64

08002298 <displayAlarmHumidity>:

void displayAlarmHumidity(){
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af02      	add	r7, sp, #8
	HAL_ADC_Start_IT(&hadc);
 800229e:	482e      	ldr	r0, [pc, #184]	@ (8002358 <displayAlarmHumidity+0xc0>)
 80022a0:	f003 fa6c 	bl	800577c <HAL_ADC_Start_IT>
	HAL_ADC_PollForConversion(&hadc, 1);
 80022a4:	2101      	movs	r1, #1
 80022a6:	482c      	ldr	r0, [pc, #176]	@ (8002358 <displayAlarmHumidity+0xc0>)
 80022a8:	f003 f9d8 	bl	800565c <HAL_ADC_PollForConversion>
	alarmHumidity = (float) HAL_ADC_GetValue(&hadc) /40.95;
 80022ac:	482a      	ldr	r0, [pc, #168]	@ (8002358 <displayAlarmHumidity+0xc0>)
 80022ae:	f003 fb03 	bl	80058b8 <HAL_ADC_GetValue>
 80022b2:	4603      	mov	r3, r0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe fd05 	bl	8000cc4 <__aeabi_ui2f>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe f8cb 	bl	8000458 <__aeabi_f2d>
 80022c2:	a323      	add	r3, pc, #140	@ (adr r3, 8002350 <displayAlarmHumidity+0xb8>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	f7fe fa48 	bl	800075c <__aeabi_ddiv>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4610      	mov	r0, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	f7fe fbf0 	bl	8000ab8 <__aeabi_d2f>
 80022d8:	4603      	mov	r3, r0
 80022da:	4a20      	ldr	r2, [pc, #128]	@ (800235c <displayAlarmHumidity+0xc4>)
 80022dc:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop_IT(&hadc);
 80022de:	481e      	ldr	r0, [pc, #120]	@ (8002358 <displayAlarmHumidity+0xc0>)
 80022e0:	f003 fab6 	bl	8005850 <HAL_ADC_Stop_IT>

	char temp_alarmHumidity[5];
	snprintf(temp_alarmHumidity, sizeof(temp_alarmHumidity), "%.2f", alarmHumidity);
 80022e4:	4b1d      	ldr	r3, [pc, #116]	@ (800235c <displayAlarmHumidity+0xc4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe f8b5 	bl	8000458 <__aeabi_f2d>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	4638      	mov	r0, r7
 80022f4:	e9cd 2300 	strd	r2, r3, [sp]
 80022f8:	4a19      	ldr	r2, [pc, #100]	@ (8002360 <displayAlarmHumidity+0xc8>)
 80022fa:	2105      	movs	r1, #5
 80022fc:	f008 fb9a 	bl	800aa34 <sniprintf>
	printf("analogValuePotentiometer : %s\r\n",temp_alarmHumidity);
 8002300:	463b      	mov	r3, r7
 8002302:	4619      	mov	r1, r3
 8002304:	4817      	ldr	r0, [pc, #92]	@ (8002364 <displayAlarmHumidity+0xcc>)
 8002306:	f008 fb25 	bl	800a954 <iprintf>
	MAX7219_DisplayChar(1, temp_alarmHumidity[0]);
 800230a:	783b      	ldrb	r3, [r7, #0]
 800230c:	4619      	mov	r1, r3
 800230e:	2001      	movs	r0, #1
 8002310:	f007 fd99 	bl	8009e46 <MAX7219_DisplayChar>
	MAX7219_DisplayChar(2, temp_alarmHumidity[1]);
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	4619      	mov	r1, r3
 8002318:	2002      	movs	r0, #2
 800231a:	f007 fd94 	bl	8009e46 <MAX7219_DisplayChar>
	(temp_alarmHumidity[2] == '.') ? MAX7219_DisplayChar(3, ' ') : MAX7219_DisplayChar(3, temp_alarmHumidity[2]);
 800231e:	78bb      	ldrb	r3, [r7, #2]
 8002320:	2b2e      	cmp	r3, #46	@ 0x2e
 8002322:	d104      	bne.n	800232e <displayAlarmHumidity+0x96>
 8002324:	2120      	movs	r1, #32
 8002326:	2003      	movs	r0, #3
 8002328:	f007 fd8d 	bl	8009e46 <MAX7219_DisplayChar>
 800232c:	e004      	b.n	8002338 <displayAlarmHumidity+0xa0>
 800232e:	78bb      	ldrb	r3, [r7, #2]
 8002330:	4619      	mov	r1, r3
 8002332:	2003      	movs	r0, #3
 8002334:	f007 fd87 	bl	8009e46 <MAX7219_DisplayChar>
	MAX7219_DisplayChar(4, temp_alarmHumidity[3]);
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	4619      	mov	r1, r3
 800233c:	2004      	movs	r0, #4
 800233e:	f007 fd82 	bl	8009e46 <MAX7219_DisplayChar>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	f3af 8000 	nop.w
 8002350:	9999999a 	.word	0x9999999a
 8002354:	40447999 	.word	0x40447999
 8002358:	200002ec 	.word	0x200002ec
 800235c:	20000030 	.word	0x20000030
 8002360:	0800cf20 	.word	0x0800cf20
 8002364:	0800cf64 	.word	0x0800cf64

08002368 <displayIndex>:

void displayIndex(char *message){
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	char first_character;
	char second_character;
	char third_character;
	char fourth_character;
	for(int i =0 ; i < strlen(message)+4 ; i++ ){
 8002370:	2300      	movs	r3, #0
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	e06e      	b.n	8002454 <displayIndex+0xec>
		(i < 0 ) || (i > strlen(message)-1) ? (fourth_character = ' ') : (fourth_character = message[i]);
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	db07      	blt.n	800238c <displayIndex+0x24>
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7fd feff 	bl	8000180 <strlen>
 8002382:	4603      	mov	r3, r0
 8002384:	1e5a      	subs	r2, r3, #1
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	429a      	cmp	r2, r3
 800238a:	d202      	bcs.n	8002392 <displayIndex+0x2a>
 800238c:	2320      	movs	r3, #32
 800238e:	733b      	strb	r3, [r7, #12]
 8002390:	e004      	b.n	800239c <displayIndex+0x34>
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	4413      	add	r3, r2
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	733b      	strb	r3, [r7, #12]
		(i-1 < 0 ) || (i-1 > strlen(message)-1) ? (third_character = ' ') : (third_character = message[i-1]);
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	dd09      	ble.n	80023b6 <displayIndex+0x4e>
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	3b01      	subs	r3, #1
 80023a6:	461c      	mov	r4, r3
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7fd fee9 	bl	8000180 <strlen>
 80023ae:	4603      	mov	r3, r0
 80023b0:	3b01      	subs	r3, #1
 80023b2:	429c      	cmp	r4, r3
 80023b4:	d902      	bls.n	80023bc <displayIndex+0x54>
 80023b6:	2320      	movs	r3, #32
 80023b8:	737b      	strb	r3, [r7, #13]
 80023ba:	e005      	b.n	80023c8 <displayIndex+0x60>
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	3b01      	subs	r3, #1
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	4413      	add	r3, r2
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	737b      	strb	r3, [r7, #13]
		(i-2 < 0 ) || (i-2 > strlen(message)-1) ? (second_character = ' ') : (second_character = message[i-2]);
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	dd09      	ble.n	80023e2 <displayIndex+0x7a>
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	3b02      	subs	r3, #2
 80023d2:	461c      	mov	r4, r3
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7fd fed3 	bl	8000180 <strlen>
 80023da:	4603      	mov	r3, r0
 80023dc:	3b01      	subs	r3, #1
 80023de:	429c      	cmp	r4, r3
 80023e0:	d902      	bls.n	80023e8 <displayIndex+0x80>
 80023e2:	2320      	movs	r3, #32
 80023e4:	73bb      	strb	r3, [r7, #14]
 80023e6:	e005      	b.n	80023f4 <displayIndex+0x8c>
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	3b02      	subs	r3, #2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	4413      	add	r3, r2
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	73bb      	strb	r3, [r7, #14]
		(i-3 < 0 ) || (i-3 > strlen(message)-1) ? (first_character = ' ') : (first_character = message[i-3]);
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	dd09      	ble.n	800240e <displayIndex+0xa6>
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	3b03      	subs	r3, #3
 80023fe:	461c      	mov	r4, r3
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7fd febd 	bl	8000180 <strlen>
 8002406:	4603      	mov	r3, r0
 8002408:	3b01      	subs	r3, #1
 800240a:	429c      	cmp	r4, r3
 800240c:	d902      	bls.n	8002414 <displayIndex+0xac>
 800240e:	2320      	movs	r3, #32
 8002410:	73fb      	strb	r3, [r7, #15]
 8002412:	e005      	b.n	8002420 <displayIndex+0xb8>
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	3b03      	subs	r3, #3
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	4413      	add	r3, r2
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	73fb      	strb	r3, [r7, #15]
		MAX7219_DisplayChar(1, first_character);
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	4619      	mov	r1, r3
 8002424:	2001      	movs	r0, #1
 8002426:	f007 fd0e 	bl	8009e46 <MAX7219_DisplayChar>
		MAX7219_DisplayChar(2, second_character);
 800242a:	7bbb      	ldrb	r3, [r7, #14]
 800242c:	4619      	mov	r1, r3
 800242e:	2002      	movs	r0, #2
 8002430:	f007 fd09 	bl	8009e46 <MAX7219_DisplayChar>
		MAX7219_DisplayChar(3, third_character);
 8002434:	7b7b      	ldrb	r3, [r7, #13]
 8002436:	4619      	mov	r1, r3
 8002438:	2003      	movs	r0, #3
 800243a:	f007 fd04 	bl	8009e46 <MAX7219_DisplayChar>
		MAX7219_DisplayChar(4, fourth_character);
 800243e:	7b3b      	ldrb	r3, [r7, #12]
 8002440:	4619      	mov	r1, r3
 8002442:	2004      	movs	r0, #4
 8002444:	f007 fcff 	bl	8009e46 <MAX7219_DisplayChar>
		HAL_Delay(100);
 8002448:	2064      	movs	r0, #100	@ 0x64
 800244a:	f002 ff9f 	bl	800538c <HAL_Delay>
	for(int i =0 ; i < strlen(message)+4 ; i++ ){
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	3301      	adds	r3, #1
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7fd fe93 	bl	8000180 <strlen>
 800245a:	4603      	mov	r3, r0
 800245c:	1d1a      	adds	r2, r3, #4
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	429a      	cmp	r2, r3
 8002462:	d888      	bhi.n	8002376 <displayIndex+0xe>
	}
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	bd90      	pop	{r4, r7, pc}
	...

08002470 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800247a:	4b13      	ldr	r3, [pc, #76]	@ (80024c8 <BSP_I2C1_Init+0x58>)
 800247c:	4a13      	ldr	r2, [pc, #76]	@ (80024cc <BSP_I2C1_Init+0x5c>)
 800247e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002480:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <BSP_I2C1_Init+0x60>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	4912      	ldr	r1, [pc, #72]	@ (80024d0 <BSP_I2C1_Init+0x60>)
 8002488:	600a      	str	r2, [r1, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d117      	bne.n	80024be <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800248e:	480e      	ldr	r0, [pc, #56]	@ (80024c8 <BSP_I2C1_Init+0x58>)
 8002490:	f004 fe00 	bl	8007094 <HAL_I2C_GetState>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d111      	bne.n	80024be <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800249a:	480b      	ldr	r0, [pc, #44]	@ (80024c8 <BSP_I2C1_Init+0x58>)
 800249c:	f000 f8e2 	bl	8002664 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10b      	bne.n	80024be <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80024a6:	4808      	ldr	r0, [pc, #32]	@ (80024c8 <BSP_I2C1_Init+0x58>)
 80024a8:	f000 f8a8 	bl	80025fc <MX_I2C1_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80024b2:	f06f 0307 	mvn.w	r3, #7
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	e001      	b.n	80024be <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80024be:	687b      	ldr	r3, [r7, #4]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	2000046c 	.word	0x2000046c
 80024cc:	40005400 	.word	0x40005400
 80024d0:	200004c0 	.word	0x200004c0

080024d4 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80024da:	2300      	movs	r3, #0
 80024dc:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80024de:	4b0f      	ldr	r3, [pc, #60]	@ (800251c <BSP_I2C1_DeInit+0x48>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d014      	beq.n	8002510 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80024e6:	4b0d      	ldr	r3, [pc, #52]	@ (800251c <BSP_I2C1_DeInit+0x48>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	4a0b      	ldr	r2, [pc, #44]	@ (800251c <BSP_I2C1_DeInit+0x48>)
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	4b0a      	ldr	r3, [pc, #40]	@ (800251c <BSP_I2C1_DeInit+0x48>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10b      	bne.n	8002510 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80024f8:	4809      	ldr	r0, [pc, #36]	@ (8002520 <BSP_I2C1_DeInit+0x4c>)
 80024fa:	f000 f8f9 	bl	80026f0 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80024fe:	4808      	ldr	r0, [pc, #32]	@ (8002520 <BSP_I2C1_DeInit+0x4c>)
 8002500:	f004 fa66 	bl	80069d0 <HAL_I2C_DeInit>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800250a:	f06f 0307 	mvn.w	r3, #7
 800250e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002510:	687b      	ldr	r3, [r7, #4]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	200004c0 	.word	0x200004c0
 8002520:	2000046c 	.word	0x2000046c

08002524 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	@ 0x28
 8002528:	af04      	add	r7, sp, #16
 800252a:	60ba      	str	r2, [r7, #8]
 800252c:	461a      	mov	r2, r3
 800252e:	4603      	mov	r3, r0
 8002530:	81fb      	strh	r3, [r7, #14]
 8002532:	460b      	mov	r3, r1
 8002534:	81bb      	strh	r3, [r7, #12]
 8002536:	4613      	mov	r3, r2
 8002538:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800253e:	89ba      	ldrh	r2, [r7, #12]
 8002540:	89f9      	ldrh	r1, [r7, #14]
 8002542:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002546:	9302      	str	r3, [sp, #8]
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	9301      	str	r3, [sp, #4]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	2301      	movs	r3, #1
 8002552:	480c      	ldr	r0, [pc, #48]	@ (8002584 <BSP_I2C1_WriteReg+0x60>)
 8002554:	f004 fa7e 	bl	8006a54 <HAL_I2C_Mem_Write>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00c      	beq.n	8002578 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800255e:	4809      	ldr	r0, [pc, #36]	@ (8002584 <BSP_I2C1_WriteReg+0x60>)
 8002560:	f004 fda5 	bl	80070ae <HAL_I2C_GetError>
 8002564:	4603      	mov	r3, r0
 8002566:	2b04      	cmp	r3, #4
 8002568:	d103      	bne.n	8002572 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800256a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	e002      	b.n	8002578 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002572:	f06f 0303 	mvn.w	r3, #3
 8002576:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002578:	697b      	ldr	r3, [r7, #20]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	2000046c 	.word	0x2000046c

08002588 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	@ 0x28
 800258c:	af04      	add	r7, sp, #16
 800258e:	60ba      	str	r2, [r7, #8]
 8002590:	461a      	mov	r2, r3
 8002592:	4603      	mov	r3, r0
 8002594:	81fb      	strh	r3, [r7, #14]
 8002596:	460b      	mov	r3, r1
 8002598:	81bb      	strh	r3, [r7, #12]
 800259a:	4613      	mov	r3, r2
 800259c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80025a2:	89ba      	ldrh	r2, [r7, #12]
 80025a4:	89f9      	ldrh	r1, [r7, #14]
 80025a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025aa:	9302      	str	r3, [sp, #8]
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	2301      	movs	r3, #1
 80025b6:	480c      	ldr	r0, [pc, #48]	@ (80025e8 <BSP_I2C1_ReadReg+0x60>)
 80025b8:	f004 fb46 	bl	8006c48 <HAL_I2C_Mem_Read>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00c      	beq.n	80025dc <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80025c2:	4809      	ldr	r0, [pc, #36]	@ (80025e8 <BSP_I2C1_ReadReg+0x60>)
 80025c4:	f004 fd73 	bl	80070ae <HAL_I2C_GetError>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d103      	bne.n	80025d6 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80025ce:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	e002      	b.n	80025dc <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80025d6:	f06f 0303 	mvn.w	r3, #3
 80025da:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80025dc:	697b      	ldr	r3, [r7, #20]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	2000046c 	.word	0x2000046c

080025ec <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80025f0:	f002 fec2 	bl	8005378 <HAL_GetTick>
 80025f4:	4603      	mov	r3, r0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a14      	ldr	r2, [pc, #80]	@ (800265c <MX_I2C1_Init+0x60>)
 800260c:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a13      	ldr	r2, [pc, #76]	@ (8002660 <MX_I2C1_Init+0x64>)
 8002612:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002626:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f004 f881 	bl	8006748 <HAL_I2C_Init>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002650:	7bfb      	ldrb	r3, [r7, #15]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40005400 	.word	0x40005400
 8002660:	000186a0 	.word	0x000186a0

08002664 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08a      	sub	sp, #40	@ 0x28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800266c:	4b1e      	ldr	r3, [pc, #120]	@ (80026e8 <I2C1_MspInit+0x84>)
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	4a1d      	ldr	r2, [pc, #116]	@ (80026e8 <I2C1_MspInit+0x84>)
 8002672:	f043 0302 	orr.w	r3, r3, #2
 8002676:	61d3      	str	r3, [r2, #28]
 8002678:	4b1b      	ldr	r3, [pc, #108]	@ (80026e8 <I2C1_MspInit+0x84>)
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002684:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800268a:	2312      	movs	r3, #18
 800268c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002692:	2303      	movs	r3, #3
 8002694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8002696:	2304      	movs	r3, #4
 8002698:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	4619      	mov	r1, r3
 80026a0:	4812      	ldr	r0, [pc, #72]	@ (80026ec <I2C1_MspInit+0x88>)
 80026a2:	f003 fd87 	bl	80061b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80026a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ac:	2312      	movs	r3, #18
 80026ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b4:	2303      	movs	r3, #3
 80026b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80026b8:	2304      	movs	r3, #4
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	4619      	mov	r1, r3
 80026c2:	480a      	ldr	r0, [pc, #40]	@ (80026ec <I2C1_MspInit+0x88>)
 80026c4:	f003 fd76 	bl	80061b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026c8:	4b07      	ldr	r3, [pc, #28]	@ (80026e8 <I2C1_MspInit+0x84>)
 80026ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026cc:	4a06      	ldr	r2, [pc, #24]	@ (80026e8 <I2C1_MspInit+0x84>)
 80026ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026d2:	6253      	str	r3, [r2, #36]	@ 0x24
 80026d4:	4b04      	ldr	r3, [pc, #16]	@ (80026e8 <I2C1_MspInit+0x84>)
 80026d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80026e0:	bf00      	nop
 80026e2:	3728      	adds	r7, #40	@ 0x28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40020400 	.word	0x40020400

080026f0 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80026f8:	4b09      	ldr	r3, [pc, #36]	@ (8002720 <I2C1_MspDeInit+0x30>)
 80026fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fc:	4a08      	ldr	r2, [pc, #32]	@ (8002720 <I2C1_MspDeInit+0x30>)
 80026fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002702:	6253      	str	r3, [r2, #36]	@ 0x24

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002704:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002708:	4806      	ldr	r0, [pc, #24]	@ (8002724 <I2C1_MspDeInit+0x34>)
 800270a:	f003 fee3 	bl	80064d4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800270e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002712:	4804      	ldr	r0, [pc, #16]	@ (8002724 <I2C1_MspDeInit+0x34>)
 8002714:	f003 fede 	bl	80064d4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40023800 	.word	0x40023800
 8002724:	40020400 	.word	0x40020400

08002728 <_getpid>:
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
 800272c:	2301      	movs	r3, #1
 800272e:	4618      	mov	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr

08002736 <_kill>:
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
 8002740:	f008 fad6 	bl	800acf0 <__errno>
 8002744:	4603      	mov	r3, r0
 8002746:	2216      	movs	r2, #22
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	f04f 33ff 	mov.w	r3, #4294967295
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <_exit>:
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	f04f 31ff 	mov.w	r1, #4294967295
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ffe7 	bl	8002736 <_kill>
 8002768:	bf00      	nop
 800276a:	e7fd      	b.n	8002768 <_exit+0x12>

0800276c <_read>:
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	e00a      	b.n	8002794 <_read+0x28>
 800277e:	f3af 8000 	nop.w
 8002782:	4601      	mov	r1, r0
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	60ba      	str	r2, [r7, #8]
 800278a:	b2ca      	uxtb	r2, r1
 800278c:	701a      	strb	r2, [r3, #0]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	3301      	adds	r3, #1
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	429a      	cmp	r2, r3
 800279a:	dbf0      	blt.n	800277e <_read+0x12>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <_write>:
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	e009      	b.n	80027cc <_write+0x26>
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	60ba      	str	r2, [r7, #8]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff f90d 	bl	80019e0 <__io_putchar>
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	3301      	adds	r3, #1
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	dbf1      	blt.n	80027b8 <_write+0x12>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <_close>:
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ea:	4618      	mov	r0, r3
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <_fstat>:
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	2300      	movs	r3, #0
 8002808:	4618      	mov	r0, r3
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <_isatty>:
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	2301      	movs	r3, #1
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <_lseek>:
 8002826:	b480      	push	{r7}
 8002828:	b085      	sub	sp, #20
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
 8002832:	2300      	movs	r3, #0
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
	...

08002840 <_sbrk>:
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	4a14      	ldr	r2, [pc, #80]	@ (800289c <_sbrk+0x5c>)
 800284a:	4b15      	ldr	r3, [pc, #84]	@ (80028a0 <_sbrk+0x60>)
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	4b13      	ldr	r3, [pc, #76]	@ (80028a4 <_sbrk+0x64>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d102      	bne.n	8002862 <_sbrk+0x22>
 800285c:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <_sbrk+0x64>)
 800285e:	4a12      	ldr	r2, [pc, #72]	@ (80028a8 <_sbrk+0x68>)
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	4b10      	ldr	r3, [pc, #64]	@ (80028a4 <_sbrk+0x64>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	429a      	cmp	r2, r3
 800286e:	d207      	bcs.n	8002880 <_sbrk+0x40>
 8002870:	f008 fa3e 	bl	800acf0 <__errno>
 8002874:	4603      	mov	r3, r0
 8002876:	220c      	movs	r2, #12
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
 800287e:	e009      	b.n	8002894 <_sbrk+0x54>
 8002880:	4b08      	ldr	r3, [pc, #32]	@ (80028a4 <_sbrk+0x64>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	4b07      	ldr	r3, [pc, #28]	@ (80028a4 <_sbrk+0x64>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4413      	add	r3, r2
 800288e:	4a05      	ldr	r2, [pc, #20]	@ (80028a4 <_sbrk+0x64>)
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20014000 	.word	0x20014000
 80028a0:	00000400 	.word	0x00000400
 80028a4:	200004c4 	.word	0x200004c4
 80028a8:	20000710 	.word	0x20000710

080028ac <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <Reset_Handler>:
 80028b8:	f7ff fff8 	bl	80028ac <SystemInit>
 80028bc:	480b      	ldr	r0, [pc, #44]	@ (80028ec <LoopFillZerobss+0xe>)
 80028be:	490c      	ldr	r1, [pc, #48]	@ (80028f0 <LoopFillZerobss+0x12>)
 80028c0:	4a0c      	ldr	r2, [pc, #48]	@ (80028f4 <LoopFillZerobss+0x16>)
 80028c2:	2300      	movs	r3, #0
 80028c4:	e002      	b.n	80028cc <LoopCopyDataInit>

080028c6 <CopyDataInit>:
 80028c6:	58d4      	ldr	r4, [r2, r3]
 80028c8:	50c4      	str	r4, [r0, r3]
 80028ca:	3304      	adds	r3, #4

080028cc <LoopCopyDataInit>:
 80028cc:	18c4      	adds	r4, r0, r3
 80028ce:	428c      	cmp	r4, r1
 80028d0:	d3f9      	bcc.n	80028c6 <CopyDataInit>
 80028d2:	4a09      	ldr	r2, [pc, #36]	@ (80028f8 <LoopFillZerobss+0x1a>)
 80028d4:	4c09      	ldr	r4, [pc, #36]	@ (80028fc <LoopFillZerobss+0x1e>)
 80028d6:	2300      	movs	r3, #0
 80028d8:	e001      	b.n	80028de <LoopFillZerobss>

080028da <FillZerobss>:
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	3204      	adds	r2, #4

080028de <LoopFillZerobss>:
 80028de:	42a2      	cmp	r2, r4
 80028e0:	d3fb      	bcc.n	80028da <FillZerobss>
 80028e2:	f008 fa0b 	bl	800acfc <__libc_init_array>
 80028e6:	f7fe fd81 	bl	80013ec <main>
 80028ea:	4770      	bx	lr
 80028ec:	20000000 	.word	0x20000000
 80028f0:	200002d0 	.word	0x200002d0
 80028f4:	0800d360 	.word	0x0800d360
 80028f8:	200002d0 	.word	0x200002d0
 80028fc:	2000070c 	.word	0x2000070c

08002900 <COMP_ACQ_IRQHandler>:
 8002900:	e7fe      	b.n	8002900 <COMP_ACQ_IRQHandler>
	...

08002904 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d103      	bne.n	800291c <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8002914:	f04f 33ff 	mov.w	r3, #4294967295
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	e034      	b.n	8002986 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	7b1a      	ldrb	r2, [r3, #12]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	699a      	ldr	r2, [r3, #24]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a0e      	ldr	r2, [pc, #56]	@ (8002990 <HTS221_RegisterBusIO+0x8c>)
 8002958:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a0d      	ldr	r2, [pc, #52]	@ (8002994 <HTS221_RegisterBusIO+0x90>)
 800295e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	69da      	ldr	r2, [r3, #28]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d004      	beq.n	8002980 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4798      	blx	r3
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	e002      	b.n	8002986 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8002980:	f04f 33ff 	mov.w	r3, #4294967295
 8002984:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002986:	68fb      	ldr	r3, [r7, #12]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	08002fcd 	.word	0x08002fcd
 8002994:	0800302f 	.word	0x0800302f

08002998 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d108      	bne.n	80029bc <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 fa9e 	bl	8002eec <HTS221_Initialize>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 80029b6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ba:	e004      	b.n	80029c6 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d111      	bne.n	8002a04 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f87e 	bl	8002ae2 <HTS221_HUM_Disable>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 80029ec:	f04f 33ff 	mov.w	r3, #4294967295
 80029f0:	e00d      	b.n	8002a0e <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f95f 	bl	8002cb6 <HTS221_TEMP_Disable>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d002      	beq.n	8002a04 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 80029fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002a02:	e004      	b.n	8002a0e <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3320      	adds	r3, #32
 8002a24:	6839      	ldr	r1, [r7, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fc2a 	bl	8003280 <hts221_device_id_get>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8002a32:	f04f 33ff 	mov.w	r3, #4294967295
 8002a36:	e000      	b.n	8002a3a <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2201      	movs	r2, #1
 8002a52:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2200      	movs	r2, #0
 8002a58:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	2200      	movs	r2, #0
 8002a64:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 12.5f;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	4a09      	ldr	r2, [pc, #36]	@ (8002a94 <HTS221_GetCapabilities+0x50>)
 8002a70:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 12.5f;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	4a07      	ldr	r2, [pc, #28]	@ (8002a94 <HTS221_GetCapabilities+0x50>)
 8002a76:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	615a      	str	r2, [r3, #20]
  return HTS221_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	41480000 	.word	0x41480000

08002a98 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e015      	b.n	8002ada <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10b      	bne.n	8002ad0 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3320      	adds	r3, #32
 8002abc:	2101      	movs	r1, #1
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fbef 	bl	80032a2 <hts221_power_on_set>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ace:	e004      	b.n	8002ada <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	e015      	b.n	8002b24 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10b      	bne.n	8002b1a <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3320      	adds	r3, #32
 8002b06:	2100      	movs	r1, #0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 fbca 	bl	80032a2 <hts221_power_on_set>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d002      	beq.n	8002b1a <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8002b14:	f04f 33ff 	mov.w	r3, #4294967295
 8002b18:	e004      	b.n	8002b24 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8002b36:	6839      	ldr	r1, [r7, #0]
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f965 	bl	8002e08 <HTS221_GetOutputDataRate>
 8002b3e:	4603      	mov	r3, r0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002b52:	6839      	ldr	r1, [r7, #0]
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f99b 	bl	8002e90 <HTS221_SetOutputDataRate>
 8002b5a:	4603      	mov	r3, r0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3320      	adds	r3, #32
 8002b72:	f107 020c 	add.w	r2, r7, #12
 8002b76:	4611      	mov	r1, r2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 fc5e 	bl	800343a <hts221_hum_adc_point_0_get>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8002b84:	f04f 33ff 	mov.w	r3, #4294967295
 8002b88:	e069      	b.n	8002c5e <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f103 0220 	add.w	r2, r3, #32
 8002b90:	f107 030c 	add.w	r3, r7, #12
 8002b94:	3304      	adds	r3, #4
 8002b96:	4619      	mov	r1, r3
 8002b98:	4610      	mov	r0, r2
 8002b9a:	f000 fba8 	bl	80032ee <hts221_hum_rh_point_0_get>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8002ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba8:	e059      	b.n	8002c5e <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f103 0220 	add.w	r2, r3, #32
 8002bb0:	f107 030c 	add.w	r3, r7, #12
 8002bb4:	3308      	adds	r3, #8
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4610      	mov	r0, r2
 8002bba:	f000 fc5f 	bl	800347c <hts221_hum_adc_point_1_get>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8002bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc8:	e049      	b.n	8002c5e <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f103 0220 	add.w	r2, r3, #32
 8002bd0:	f107 030c 	add.w	r3, r7, #12
 8002bd4:	330c      	adds	r3, #12
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4610      	mov	r0, r2
 8002bda:	f000 fba8 	bl	800332e <hts221_hum_rh_point_1_get>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8002be4:	f04f 33ff 	mov.w	r3, #4294967295
 8002be8:	e039      	b.n	8002c5e <HTS221_HUM_GetHumidity+0xfa>
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
 8002bea:	2300      	movs	r3, #0
 8002bec:	83bb      	strh	r3, [r7, #28]
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3320      	adds	r3, #32
 8002bf2:	f107 021c 	add.w	r2, r7, #28
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 fafd 	bl	80031f8 <hts221_humidity_raw_get>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8002c04:	f04f 33ff 	mov.w	r3, #4294967295
 8002c08:	e029      	b.n	8002c5e <HTS221_HUM_GetHumidity+0xfa>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8002c0a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe f85c 	bl	8000ccc <__aeabi_i2f>
 8002c14:	4602      	mov	r2, r0
 8002c16:	f107 030c 	add.w	r3, r7, #12
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 f991 	bl	8002f44 <Linear_Interpolation>
 8002c22:	4602      	mov	r2, r0
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	601a      	str	r2, [r3, #0]

  if (*Value < 0.0f)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f04f 0100 	mov.w	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fe fa3d 	bl	80010b0 <__aeabi_fcmplt>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HTS221_HUM_GetHumidity+0xe0>
  {
    *Value = 0.0f;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4907      	ldr	r1, [pc, #28]	@ (8002c68 <HTS221_HUM_GetHumidity+0x104>)
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe fa4e 	bl	80010ec <__aeabi_fcmpgt>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <HTS221_HUM_GetHumidity+0xf8>
  {
    *Value = 100.0f;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	4a03      	ldr	r2, [pc, #12]	@ (8002c68 <HTS221_HUM_GetHumidity+0x104>)
 8002c5a:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3720      	adds	r7, #32
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	42c80000 	.word	0x42c80000

08002c6c <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e015      	b.n	8002cae <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10b      	bne.n	8002ca4 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3320      	adds	r3, #32
 8002c90:	2101      	movs	r1, #1
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fb05 	bl	80032a2 <hts221_power_on_set>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8002c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca2:	e004      	b.n	8002cae <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	e015      	b.n	8002cf8 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10b      	bne.n	8002cee <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3320      	adds	r3, #32
 8002cda:	2100      	movs	r1, #0
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 fae0 	bl	80032a2 <hts221_power_on_set>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8002ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cec:	e004      	b.n	8002cf8 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8002d0a:	6839      	ldr	r1, [r7, #0]
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f87b 	bl	8002e08 <HTS221_GetOutputDataRate>
 8002d12:	4603      	mov	r3, r0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002d26:	6839      	ldr	r1, [r7, #0]
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f8b1 	bl	8002e90 <HTS221_SetOutputDataRate>
 8002d2e:	4603      	mov	r3, r0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3320      	adds	r3, #32
 8002d46:	f107 020c 	add.w	r2, r7, #12
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 fbb6 	bl	80034be <hts221_temp_adc_point_0_get>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8002d58:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5c:	e04f      	b.n	8002dfe <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f103 0220 	add.w	r2, r3, #32
 8002d64:	f107 030c 	add.w	r3, r7, #12
 8002d68:	3304      	adds	r3, #4
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	f000 fafe 	bl	800336e <hts221_temp_deg_point_0_get>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8002d78:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7c:	e03f      	b.n	8002dfe <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f103 0220 	add.w	r2, r3, #32
 8002d84:	f107 030c 	add.w	r3, r7, #12
 8002d88:	3308      	adds	r3, #8
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	f000 fbb7 	bl	8003500 <hts221_temp_adc_point_1_get>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8002d98:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9c:	e02f      	b.n	8002dfe <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f103 0220 	add.w	r2, r3, #32
 8002da4:	f107 030c 	add.w	r3, r7, #12
 8002da8:	330c      	adds	r3, #12
 8002daa:	4619      	mov	r1, r3
 8002dac:	4610      	mov	r0, r2
 8002dae:	f000 fb11 	bl	80033d4 <hts221_temp_deg_point_1_get>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8002db8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dbc:	e01f      	b.n	8002dfe <HTS221_TEMP_GetTemperature+0xc6>
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	83bb      	strh	r3, [r7, #28]
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3320      	adds	r3, #32
 8002dc6:	f107 021c 	add.w	r2, r7, #28
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 fa35 	bl	800323c <hts221_temperature_raw_get>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8002dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ddc:	e00f      	b.n	8002dfe <HTS221_TEMP_GetTemperature+0xc6>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8002dde:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd ff72 	bl	8000ccc <__aeabi_i2f>
 8002de8:	4602      	mov	r2, r0
 8002dea:	f107 030c 	add.w	r3, r7, #12
 8002dee:	4611      	mov	r1, r2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 f8a7 	bl	8002f44 <Linear_Interpolation>
 8002df6:	4602      	mov	r2, r0
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	601a      	str	r2, [r3, #0]

  return HTS221_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3720      	adds	r7, #32
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	3320      	adds	r3, #32
 8002e1a:	f107 020b 	add.w	r2, r7, #11
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 f98b 	bl	800313c <hts221_data_rate_get>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8002e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e30:	e025      	b.n	8002e7e <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8002e32:	7afb      	ldrb	r3, [r7, #11]
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d81d      	bhi.n	8002e74 <HTS221_GetOutputDataRate+0x6c>
 8002e38:	a201      	add	r2, pc, #4	@ (adr r2, 8002e40 <HTS221_GetOutputDataRate+0x38>)
 8002e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3e:	bf00      	nop
 8002e40:	08002e51 	.word	0x08002e51
 8002e44:	08002e5b 	.word	0x08002e5b
 8002e48:	08002e65 	.word	0x08002e65
 8002e4c:	08002e6d 	.word	0x08002e6d
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
      break;
 8002e58:	e010      	b.n	8002e7c <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e60:	601a      	str	r2, [r3, #0]
      break;
 8002e62:	e00b      	b.n	8002e7c <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	4a08      	ldr	r2, [pc, #32]	@ (8002e88 <HTS221_GetOutputDataRate+0x80>)
 8002e68:	601a      	str	r2, [r3, #0]
      break;
 8002e6a:	e007      	b.n	8002e7c <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	4a07      	ldr	r2, [pc, #28]	@ (8002e8c <HTS221_GetOutputDataRate+0x84>)
 8002e70:	601a      	str	r2, [r3, #0]
      break;
 8002e72:	e003      	b.n	8002e7c <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8002e74:	f04f 33ff 	mov.w	r3, #4294967295
 8002e78:	60fb      	str	r3, [r7, #12]
      break;
 8002e7a:	bf00      	nop
  }

  return ret;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40e00000 	.word	0x40e00000
 8002e8c:	41480000 	.word	0x41480000

08002e90 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8002e9a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002e9e:	6838      	ldr	r0, [r7, #0]
 8002ea0:	f7fe f910 	bl	80010c4 <__aeabi_fcmple>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HTS221_SetOutputDataRate+0x1e>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e009      	b.n	8002ec2 <HTS221_SetOutputDataRate+0x32>
 8002eae:	490e      	ldr	r1, [pc, #56]	@ (8002ee8 <HTS221_SetOutputDataRate+0x58>)
 8002eb0:	6838      	ldr	r0, [r7, #0]
 8002eb2:	f7fe f907 	bl	80010c4 <__aeabi_fcmple>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HTS221_SetOutputDataRate+0x30>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e000      	b.n	8002ec2 <HTS221_SetOutputDataRate+0x32>
 8002ec0:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8002ec2:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3320      	adds	r3, #32
 8002ec8:	7bfa      	ldrb	r2, [r7, #15]
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 f90f 	bl	80030f0 <hts221_data_rate_set>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <HTS221_SetOutputDataRate+0x4e>
  {
    return HTS221_ERROR;
 8002ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8002edc:	e000      	b.n	8002ee0 <HTS221_SetOutputDataRate+0x50>
  }

  return HTS221_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40e00000 	.word	0x40e00000

08002eec <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3320      	adds	r3, #32
 8002ef8:	2100      	movs	r1, #0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 f9d1 	bl	80032a2 <hts221_power_on_set>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8002f06:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0a:	e017      	b.n	8002f3c <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3320      	adds	r3, #32
 8002f10:	2101      	movs	r1, #1
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 f94a 	bl	80031ac <hts221_block_data_update_set>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8002f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f22:	e00b      	b.n	8002f3c <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8002f24:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff ffb1 	bl	8002e90 <HTS221_SetOutputDataRate>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8002f34:	f04f 33ff 	mov.w	r3, #4294967295
 8002f38:	e000      	b.n	8002f3c <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8002f44:	b5b0      	push	{r4, r5, r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	4619      	mov	r1, r3
 8002f58:	4610      	mov	r0, r2
 8002f5a:	f7fd fe01 	bl	8000b60 <__aeabi_fsub>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	6839      	ldr	r1, [r7, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fd ff06 	bl	8000d74 <__aeabi_fmul>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	461c      	mov	r4, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4619      	mov	r1, r3
 8002f76:	4610      	mov	r0, r2
 8002f78:	f7fd fefc 	bl	8000d74 <__aeabi_fmul>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	461d      	mov	r5, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	f7fd fef2 	bl	8000d74 <__aeabi_fmul>
 8002f90:	4603      	mov	r3, r0
 8002f92:	4619      	mov	r1, r3
 8002f94:	4628      	mov	r0, r5
 8002f96:	f7fd fde3 	bl	8000b60 <__aeabi_fsub>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f7fd fde0 	bl	8000b64 <__addsf3>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	461c      	mov	r4, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	f7fd fdd4 	bl	8000b60 <__aeabi_fsub>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f7fd ff8d 	bl	8000edc <__aeabi_fdiv>
 8002fc2:	4603      	mov	r3, r0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bdb0      	pop	{r4, r5, r7, pc}

08002fcc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002fcc:	b590      	push	{r4, r7, lr}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	607a      	str	r2, [r7, #4]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	460b      	mov	r3, r1
 8002fda:	72fb      	strb	r3, [r7, #11]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10e      	bne.n	800300a <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	695c      	ldr	r4, [r3, #20]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	7b1b      	ldrb	r3, [r3, #12]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	7afb      	ldrb	r3, [r7, #11]
 8002ff8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	4619      	mov	r1, r3
 8003000:	893b      	ldrh	r3, [r7, #8]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	47a0      	blx	r4
 8003006:	4603      	mov	r3, r0
 8003008:	e00d      	b.n	8003026 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	695c      	ldr	r4, [r3, #20]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	7b1b      	ldrb	r3, [r3, #12]
 8003012:	4618      	mov	r0, r3
 8003014:	7afb      	ldrb	r3, [r7, #11]
 8003016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800301a:	b2db      	uxtb	r3, r3
 800301c:	4619      	mov	r1, r3
 800301e:	893b      	ldrh	r3, [r7, #8]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	47a0      	blx	r4
 8003024:	4603      	mov	r3, r0
  }
}
 8003026:	4618      	mov	r0, r3
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	bd90      	pop	{r4, r7, pc}

0800302e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800302e:	b590      	push	{r4, r7, lr}
 8003030:	b087      	sub	sp, #28
 8003032:	af00      	add	r7, sp, #0
 8003034:	60f8      	str	r0, [r7, #12]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	461a      	mov	r2, r3
 800303a:	460b      	mov	r3, r1
 800303c:	72fb      	strb	r3, [r7, #11]
 800303e:	4613      	mov	r3, r2
 8003040:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10e      	bne.n	800306c <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	691c      	ldr	r4, [r3, #16]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	7b1b      	ldrb	r3, [r3, #12]
 8003056:	4618      	mov	r0, r3
 8003058:	7afb      	ldrb	r3, [r7, #11]
 800305a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800305e:	b2db      	uxtb	r3, r3
 8003060:	4619      	mov	r1, r3
 8003062:	893b      	ldrh	r3, [r7, #8]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	47a0      	blx	r4
 8003068:	4603      	mov	r3, r0
 800306a:	e00d      	b.n	8003088 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	691c      	ldr	r4, [r3, #16]
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	7b1b      	ldrb	r3, [r3, #12]
 8003074:	4618      	mov	r0, r3
 8003076:	7afb      	ldrb	r3, [r7, #11]
 8003078:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800307c:	b2db      	uxtb	r3, r3
 800307e:	4619      	mov	r1, r3
 8003080:	893b      	ldrh	r3, [r7, #8]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	47a0      	blx	r4
 8003086:	4603      	mov	r3, r0
  }
}
 8003088:	4618      	mov	r0, r3
 800308a:	371c      	adds	r7, #28
 800308c:	46bd      	mov	sp, r7
 800308e:	bd90      	pop	{r4, r7, pc}

08003090 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8003090:	b590      	push	{r4, r7, lr}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	461a      	mov	r2, r3
 800309c:	460b      	mov	r3, r1
 800309e:	72fb      	strb	r3, [r7, #11]
 80030a0:	4613      	mov	r3, r2
 80030a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	685c      	ldr	r4, [r3, #4]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	68d8      	ldr	r0, [r3, #12]
 80030ac:	893b      	ldrh	r3, [r7, #8]
 80030ae:	7af9      	ldrb	r1, [r7, #11]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	47a0      	blx	r4
 80030b4:	6178      	str	r0, [r7, #20]

  return ret;
 80030b6:	697b      	ldr	r3, [r7, #20]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	371c      	adds	r7, #28
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd90      	pop	{r4, r7, pc}

080030c0 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	607a      	str	r2, [r7, #4]
 80030ca:	461a      	mov	r2, r3
 80030cc:	460b      	mov	r3, r1
 80030ce:	72fb      	strb	r3, [r7, #11]
 80030d0:	4613      	mov	r3, r2
 80030d2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681c      	ldr	r4, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	68d8      	ldr	r0, [r3, #12]
 80030dc:	893b      	ldrh	r3, [r7, #8]
 80030de:	7af9      	ldrb	r1, [r7, #11]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	47a0      	blx	r4
 80030e4:	6178      	str	r0, [r7, #20]

  return ret;
 80030e6:	697b      	ldr	r3, [r7, #20]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd90      	pop	{r4, r7, pc}

080030f0 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80030fc:	f107 0208 	add.w	r2, r7, #8
 8003100:	2301      	movs	r3, #1
 8003102:	2120      	movs	r1, #32
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff ffc3 	bl	8003090 <hts221_read_reg>
 800310a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10f      	bne.n	8003132 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8003112:	78fb      	ldrb	r3, [r7, #3]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	b2da      	uxtb	r2, r3
 800311a:	7a3b      	ldrb	r3, [r7, #8]
 800311c:	f362 0301 	bfi	r3, r2, #0, #2
 8003120:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003122:	f107 0208 	add.w	r2, r7, #8
 8003126:	2301      	movs	r3, #1
 8003128:	2120      	movs	r1, #32
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7ff ffc8 	bl	80030c0 <hts221_write_reg>
 8003130:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003132:	68fb      	ldr	r3, [r7, #12]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003146:	f107 0208 	add.w	r2, r7, #8
 800314a:	2301      	movs	r3, #1
 800314c:	2120      	movs	r1, #32
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff ff9e 	bl	8003090 <hts221_read_reg>
 8003154:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8003156:	7a3b      	ldrb	r3, [r7, #8]
 8003158:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b03      	cmp	r3, #3
 8003160:	d81a      	bhi.n	8003198 <hts221_data_rate_get+0x5c>
 8003162:	a201      	add	r2, pc, #4	@ (adr r2, 8003168 <hts221_data_rate_get+0x2c>)
 8003164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003168:	08003179 	.word	0x08003179
 800316c:	08003181 	.word	0x08003181
 8003170:	08003189 	.word	0x08003189
 8003174:	08003191 	.word	0x08003191
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2200      	movs	r2, #0
 800317c:	701a      	strb	r2, [r3, #0]
      break;
 800317e:	e00f      	b.n	80031a0 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2201      	movs	r2, #1
 8003184:	701a      	strb	r2, [r3, #0]
      break;
 8003186:	e00b      	b.n	80031a0 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2202      	movs	r2, #2
 800318c:	701a      	strb	r2, [r3, #0]
      break;
 800318e:	e007      	b.n	80031a0 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2203      	movs	r2, #3
 8003194:	701a      	strb	r2, [r3, #0]
      break;
 8003196:	e003      	b.n	80031a0 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	2204      	movs	r2, #4
 800319c:	701a      	strb	r2, [r3, #0]
      break;
 800319e:	bf00      	nop
  }

  return ret;
 80031a0:	68fb      	ldr	r3, [r7, #12]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop

080031ac <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80031b8:	f107 0208 	add.w	r2, r7, #8
 80031bc:	2301      	movs	r3, #1
 80031be:	2120      	movs	r1, #32
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff ff65 	bl	8003090 <hts221_read_reg>
 80031c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10f      	bne.n	80031ee <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80031ce:	78fb      	ldrb	r3, [r7, #3]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	7a3b      	ldrb	r3, [r7, #8]
 80031d8:	f362 0382 	bfi	r3, r2, #2, #1
 80031dc:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80031de:	f107 0208 	add.w	r2, r7, #8
 80031e2:	2301      	movs	r3, #1
 80031e4:	2120      	movs	r1, #32
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff ff6a 	bl	80030c0 <hts221_write_reg>
 80031ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80031ee:	68fb      	ldr	r3, [r7, #12]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8003202:	f107 0208 	add.w	r2, r7, #8
 8003206:	2302      	movs	r3, #2
 8003208:	2128      	movs	r1, #40	@ 0x28
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff ff40 	bl	8003090 <hts221_read_reg>
 8003210:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003212:	7a7b      	ldrb	r3, [r7, #9]
 8003214:	b21a      	sxth	r2, r3
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003220:	b29b      	uxth	r3, r3
 8003222:	021b      	lsls	r3, r3, #8
 8003224:	b29b      	uxth	r3, r3
 8003226:	7a3a      	ldrb	r2, [r7, #8]
 8003228:	4413      	add	r3, r2
 800322a:	b29b      	uxth	r3, r3
 800322c:	b21a      	sxth	r2, r3
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	801a      	strh	r2, [r3, #0]

  return ret;
 8003232:	68fb      	ldr	r3, [r7, #12]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8003246:	f107 0208 	add.w	r2, r7, #8
 800324a:	2302      	movs	r3, #2
 800324c:	212a      	movs	r1, #42	@ 0x2a
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff ff1e 	bl	8003090 <hts221_read_reg>
 8003254:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003256:	7a7b      	ldrb	r3, [r7, #9]
 8003258:	b21a      	sxth	r2, r3
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003264:	b29b      	uxth	r3, r3
 8003266:	021b      	lsls	r3, r3, #8
 8003268:	b29b      	uxth	r3, r3
 800326a:	7a3a      	ldrb	r2, [r7, #8]
 800326c:	4413      	add	r3, r2
 800326e:	b29b      	uxth	r3, r3
 8003270:	b21a      	sxth	r2, r3
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	801a      	strh	r2, [r3, #0]

  return ret;
 8003276:	68fb      	ldr	r3, [r7, #12]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800328a:	2301      	movs	r3, #1
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	210f      	movs	r1, #15
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff fefd 	bl	8003090 <hts221_read_reg>
 8003296:	60f8      	str	r0, [r7, #12]

  return ret;
 8003298:	68fb      	ldr	r3, [r7, #12]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	460b      	mov	r3, r1
 80032ac:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80032ae:	f107 0208 	add.w	r2, r7, #8
 80032b2:	2301      	movs	r3, #1
 80032b4:	2120      	movs	r1, #32
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff feea 	bl	8003090 <hts221_read_reg>
 80032bc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10f      	bne.n	80032e4 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	7a3b      	ldrb	r3, [r7, #8]
 80032ce:	f362 13c7 	bfi	r3, r2, #7, #1
 80032d2:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80032d4:	f107 0208 	add.w	r2, r7, #8
 80032d8:	2301      	movs	r3, #1
 80032da:	2120      	movs	r1, #32
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff feef 	bl	80030c0 <hts221_write_reg>
 80032e2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80032e4:	68fb      	ldr	r3, [r7, #12]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b084      	sub	sp, #16
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80032f8:	f107 020b 	add.w	r2, r7, #11
 80032fc:	2301      	movs	r3, #1
 80032fe:	2130      	movs	r1, #48	@ 0x30
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff fec5 	bl	8003090 <hts221_read_reg>
 8003306:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003308:	7afb      	ldrb	r3, [r7, #11]
 800330a:	4618      	mov	r0, r3
 800330c:	f7fd fcde 	bl	8000ccc <__aeabi_i2f>
 8003310:	4603      	mov	r3, r0
 8003312:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd fde0 	bl	8000edc <__aeabi_fdiv>
 800331c:	4603      	mov	r3, r0
 800331e:	461a      	mov	r2, r3
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	601a      	str	r2, [r3, #0]

  return ret;
 8003324:	68fb      	ldr	r3, [r7, #12]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8003338:	f107 020b 	add.w	r2, r7, #11
 800333c:	2301      	movs	r3, #1
 800333e:	2131      	movs	r1, #49	@ 0x31
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff fea5 	bl	8003090 <hts221_read_reg>
 8003346:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003348:	7afb      	ldrb	r3, [r7, #11]
 800334a:	4618      	mov	r0, r3
 800334c:	f7fd fcbe 	bl	8000ccc <__aeabi_i2f>
 8003350:	4603      	mov	r3, r0
 8003352:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003356:	4618      	mov	r0, r3
 8003358:	f7fd fdc0 	bl	8000edc <__aeabi_fdiv>
 800335c:	4603      	mov	r3, r0
 800335e:	461a      	mov	r2, r3
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	601a      	str	r2, [r3, #0]

  return ret;
 8003364:	68fb      	ldr	r3, [r7, #12]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b086      	sub	sp, #24
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8003378:	f107 020f 	add.w	r2, r7, #15
 800337c:	2301      	movs	r3, #1
 800337e:	2132      	movs	r1, #50	@ 0x32
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff fe85 	bl	8003090 <hts221_read_reg>
 8003386:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d11d      	bne.n	80033ca <hts221_temp_deg_point_0_get+0x5c>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 800338e:	f107 0210 	add.w	r2, r7, #16
 8003392:	2301      	movs	r3, #1
 8003394:	2135      	movs	r1, #53	@ 0x35
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff fe7a 	bl	8003090 <hts221_read_reg>
 800339c:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 800339e:	7c3b      	ldrb	r3, [r7, #16]
 80033a0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80033a8:	7cfb      	ldrb	r3, [r7, #19]
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	7bfa      	ldrb	r2, [r7, #15]
 80033ae:	4413      	add	r3, r2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fd fc8b 	bl	8000ccc <__aeabi_i2f>
 80033b6:	4603      	mov	r3, r0
 80033b8:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fd fd8d 	bl	8000edc <__aeabi_fdiv>
 80033c2:	4603      	mov	r3, r0
 80033c4:	461a      	mov	r2, r3
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80033ca:	697b      	ldr	r3, [r7, #20]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 80033de:	f107 020f 	add.w	r2, r7, #15
 80033e2:	2301      	movs	r3, #1
 80033e4:	2133      	movs	r1, #51	@ 0x33
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff fe52 	bl	8003090 <hts221_read_reg>
 80033ec:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d11d      	bne.n	8003430 <hts221_temp_deg_point_1_get+0x5c>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80033f4:	f107 0210 	add.w	r2, r7, #16
 80033f8:	2301      	movs	r3, #1
 80033fa:	2135      	movs	r1, #53	@ 0x35
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff fe47 	bl	8003090 <hts221_read_reg>
 8003402:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8003404:	7c3b      	ldrb	r3, [r7, #16]
 8003406:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800340a:	b2db      	uxtb	r3, r3
 800340c:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	021b      	lsls	r3, r3, #8
 8003412:	7bfa      	ldrb	r2, [r7, #15]
 8003414:	4413      	add	r3, r2
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd fc58 	bl	8000ccc <__aeabi_i2f>
 800341c:	4603      	mov	r3, r0
 800341e:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8003422:	4618      	mov	r0, r3
 8003424:	f7fd fd5a 	bl	8000edc <__aeabi_fdiv>
 8003428:	4603      	mov	r3, r0
 800342a:	461a      	mov	r2, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003430:	697b      	ldr	r3, [r7, #20]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b084      	sub	sp, #16
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
 8003442:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8003444:	f107 0208 	add.w	r2, r7, #8
 8003448:	2302      	movs	r3, #2
 800344a:	2136      	movs	r1, #54	@ 0x36
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff fe1f 	bl	8003090 <hts221_read_reg>
 8003452:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003454:	7a7b      	ldrb	r3, [r7, #9]
 8003456:	021b      	lsls	r3, r3, #8
 8003458:	b29b      	uxth	r3, r3
 800345a:	7a3a      	ldrb	r2, [r7, #8]
 800345c:	4413      	add	r3, r2
 800345e:	b29b      	uxth	r3, r3
 8003460:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003462:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fd fc30 	bl	8000ccc <__aeabi_i2f>
 800346c:	4602      	mov	r2, r0
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	601a      	str	r2, [r3, #0]

  return ret;
 8003472:	68fb      	ldr	r3, [r7, #12]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8003486:	f107 0208 	add.w	r2, r7, #8
 800348a:	2302      	movs	r3, #2
 800348c:	213a      	movs	r1, #58	@ 0x3a
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff fdfe 	bl	8003090 <hts221_read_reg>
 8003494:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003496:	7a7b      	ldrb	r3, [r7, #9]
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	b29b      	uxth	r3, r3
 800349c:	7a3a      	ldrb	r2, [r7, #8]
 800349e:	4413      	add	r3, r2
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80034a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fd fc0f 	bl	8000ccc <__aeabi_i2f>
 80034ae:	4602      	mov	r2, r0
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	601a      	str	r2, [r3, #0]

  return ret;
 80034b4:	68fb      	ldr	r3, [r7, #12]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 80034c8:	f107 0208 	add.w	r2, r7, #8
 80034cc:	2302      	movs	r3, #2
 80034ce:	213c      	movs	r1, #60	@ 0x3c
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff fddd 	bl	8003090 <hts221_read_reg>
 80034d6:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80034d8:	7a7b      	ldrb	r3, [r7, #9]
 80034da:	021b      	lsls	r3, r3, #8
 80034dc:	b29b      	uxth	r3, r3
 80034de:	7a3a      	ldrb	r2, [r7, #8]
 80034e0:	4413      	add	r3, r2
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80034e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fd fbee 	bl	8000ccc <__aeabi_i2f>
 80034f0:	4602      	mov	r2, r0
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	601a      	str	r2, [r3, #0]

  return ret;
 80034f6:	68fb      	ldr	r3, [r7, #12]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 800350a:	f107 0208 	add.w	r2, r7, #8
 800350e:	2302      	movs	r3, #2
 8003510:	213e      	movs	r1, #62	@ 0x3e
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff fdbc 	bl	8003090 <hts221_read_reg>
 8003518:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800351a:	7a7b      	ldrb	r3, [r7, #9]
 800351c:	021b      	lsls	r3, r3, #8
 800351e:	b29b      	uxth	r3, r3
 8003520:	7a3a      	ldrb	r2, [r7, #8]
 8003522:	4413      	add	r3, r2
 8003524:	b29b      	uxth	r3, r3
 8003526:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003528:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd fbcd 	bl	8000ccc <__aeabi_i2f>
 8003532:	4602      	mov	r2, r0
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	601a      	str	r2, [r3, #0]

  return ret;
 8003538:	68fb      	ldr	r3, [r7, #12]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d103      	bne.n	8003560 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8003558:	f04f 33ff 	mov.w	r3, #4294967295
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	e051      	b.n	8003604 <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	7b1a      	ldrb	r2, [r3, #12]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	699a      	ldr	r2, [r3, #24]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a1d      	ldr	r2, [pc, #116]	@ (8003610 <LPS22HH_RegisterBusIO+0xcc>)
 800359c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003614 <LPS22HH_RegisterBusIO+0xd0>)
 80035a2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	69da      	ldr	r2, [r3, #28]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d103      	bne.n	80035c2 <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 80035ba:	f04f 33ff 	mov.w	r3, #4294967295
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	e020      	b.n	8003604 <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4798      	blx	r3
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 80035ce:	f04f 33ff 	mov.w	r3, #4294967295
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	e016      	b.n	8003604 <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d112      	bne.n	8003604 <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10d      	bne.n	8003604 <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80035e8:	2301      	movs	r3, #1
 80035ea:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 80035ec:	7afb      	ldrb	r3, [r7, #11]
 80035ee:	461a      	mov	r2, r3
 80035f0:	2110      	movs	r1, #16
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f9db 	bl	80039ae <LPS22HH_Write_Reg>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 80035fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003602:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003604:	68fb      	ldr	r3, [r7, #12]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	08003cbb 	.word	0x08003cbb
 8003614:	08003cf1 	.word	0x08003cf1

08003618 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003626:	2b00      	cmp	r3, #0
 8003628:	d108      	bne.n	800363c <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 faf8 	bl	8003c20 <LPS22HH_Initialize>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8003636:	f04f 33ff 	mov.w	r3, #4294967295
 800363a:	e004      	b.n	8003646 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HH_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800365c:	2b01      	cmp	r3, #1
 800365e:	d111      	bne.n	8003684 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f87d 	bl	8003760 <LPS22HH_PRESS_Disable>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 800366c:	f04f 33ff 	mov.w	r3, #4294967295
 8003670:	e00d      	b.n	800368e <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f919 	bl	80038aa <LPS22HH_TEMP_Disable>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 800367e:	f04f 33ff 	mov.w	r3, #4294967295
 8003682:	e004      	b.n	800368e <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HH_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3320      	adds	r3, #32
 80036a4:	6839      	ldr	r1, [r7, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 fcfd 	bl	80040a6 <lps22hh_device_id_get>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 80036b2:	f04f 33ff 	mov.w	r3, #4294967295
 80036b6:	e000      	b.n	80036ba <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
	...

080036c4 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2200      	movs	r2, #0
 80036d2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2201      	movs	r2, #1
 80036d8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2201      	movs	r2, #1
 80036de:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2200      	movs	r2, #0
 80036e4:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2200      	movs	r2, #0
 80036ea:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	4a07      	ldr	r2, [pc, #28]	@ (8003714 <LPS22HH_GetCapabilities+0x50>)
 80036f8:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	4a05      	ldr	r2, [pc, #20]	@ (8003714 <LPS22HH_GetCapabilities+0x50>)
 80036fe:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	615a      	str	r2, [r3, #20]
  return LPS22HH_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr
 8003714:	43480000 	.word	0x43480000

08003718 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	e014      	b.n	8003758 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f103 0220 	add.w	r2, r3, #32
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800373a:	4619      	mov	r1, r3
 800373c:	4610      	mov	r0, r2
 800373e:	f000 fb71 	bl	8003e24 <lps22hh_data_rate_set>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8003748:	f04f 33ff 	mov.w	r3, #4294967295
 800374c:	e004      	b.n	8003758 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HH_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	e024      	b.n	80037c0 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800377c:	2b00      	cmp	r3, #0
 800377e:	d11a      	bne.n	80037b6 <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f103 0220 	add.w	r2, r3, #32
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3333      	adds	r3, #51	@ 0x33
 800378a:	4619      	mov	r1, r3
 800378c:	4610      	mov	r0, r2
 800378e:	f000 fb97 	bl	8003ec0 <lps22hh_data_rate_get>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8003798:	f04f 33ff 	mov.w	r3, #4294967295
 800379c:	e010      	b.n	80037c0 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3320      	adds	r3, #32
 80037a2:	2100      	movs	r1, #0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fb3d 	bl	8003e24 <lps22hh_data_rate_set>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 80037b0:	f04f 33ff 	mov.w	r3, #4294967295
 80037b4:	e004      	b.n	80037c0 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HH_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 80037d2:	6839      	ldr	r1, [r7, #0]
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f905 	bl	80039e4 <LPS22HH_GetOutputDataRate>
 80037da:	4603      	mov	r3, r0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d105      	bne.n	8003804 <LPS22HH_PRESS_SetOutputDataRate+0x20>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 80037f8:	6839      	ldr	r1, [r7, #0]
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f956 	bl	8003aac <LPS22HH_SetOutputDataRate_When_Enabled>
 8003800:	4603      	mov	r3, r0
 8003802:	e004      	b.n	800380e <LPS22HH_PRESS_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003804:	6839      	ldr	r1, [r7, #0]
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f9ba 	bl	8003b80 <LPS22HH_SetOutputDataRate_When_Disabled>
 800380c:	4603      	mov	r3, r0
  }
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b084      	sub	sp, #16
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8003820:	f107 030c 	add.w	r3, r7, #12
 8003824:	2204      	movs	r2, #4
 8003826:	2100      	movs	r1, #0
 8003828:	4618      	mov	r0, r3
 800382a:	f007 fa0f 	bl	800ac4c <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3320      	adds	r3, #32
 8003832:	f107 020c 	add.w	r2, r7, #12
 8003836:	4611      	mov	r1, r2
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fbe9 	bl	8004010 <lps22hh_pressure_raw_get>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 8003844:	f04f 33ff 	mov.w	r3, #4294967295
 8003848:	e007      	b.n	800385a <LPS22HH_PRESS_GetPressure+0x44>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4618      	mov	r0, r3
 800384e:	f000 fa9a 	bl	8003d86 <lps22hh_from_lsb_to_hpa>
 8003852:	4602      	mov	r2, r0
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	e014      	b.n	80038a2 <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f103 0220 	add.w	r2, r3, #32
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f000 facc 	bl	8003e24 <lps22hh_data_rate_set>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8003892:	f04f 33ff 	mov.w	r3, #4294967295
 8003896:	e004      	b.n	80038a2 <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22HH_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	e024      	b.n	800390a <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d11a      	bne.n	8003900 <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f103 0220 	add.w	r2, r3, #32
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3333      	adds	r3, #51	@ 0x33
 80038d4:	4619      	mov	r1, r3
 80038d6:	4610      	mov	r0, r2
 80038d8:	f000 faf2 	bl	8003ec0 <lps22hh_data_rate_get>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 80038e2:	f04f 33ff 	mov.w	r3, #4294967295
 80038e6:	e010      	b.n	800390a <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3320      	adds	r3, #32
 80038ec:	2100      	movs	r1, #0
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fa98 	bl	8003e24 <lps22hh_data_rate_set>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 80038fa:	f04f 33ff 	mov.w	r3, #4294967295
 80038fe:	e004      	b.n	800390a <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22HH_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 800391c:	6839      	ldr	r1, [r7, #0]
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f860 	bl	80039e4 <LPS22HH_GetOutputDataRate>
 8003924:	4603      	mov	r3, r0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800393e:	2b01      	cmp	r3, #1
 8003940:	d105      	bne.n	800394e <LPS22HH_TEMP_SetOutputDataRate+0x20>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003942:	6839      	ldr	r1, [r7, #0]
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f8b1 	bl	8003aac <LPS22HH_SetOutputDataRate_When_Enabled>
 800394a:	4603      	mov	r3, r0
 800394c:	e004      	b.n	8003958 <LPS22HH_TEMP_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 800394e:	6839      	ldr	r1, [r7, #0]
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f915 	bl	8003b80 <LPS22HH_SetOutputDataRate_When_Disabled>
 8003956:	4603      	mov	r3, r0
  }
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800396a:	f107 030c 	add.w	r3, r7, #12
 800396e:	2202      	movs	r2, #2
 8003970:	2100      	movs	r1, #0
 8003972:	4618      	mov	r0, r3
 8003974:	f007 f96a 	bl	800ac4c <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3320      	adds	r3, #32
 800397c:	f107 020c 	add.w	r2, r7, #12
 8003980:	4611      	mov	r1, r2
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fb6d 	bl	8004062 <lps22hh_temperature_raw_get>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 800398e:	f04f 33ff 	mov.w	r3, #4294967295
 8003992:	e008      	b.n	80039a6 <LPS22HH_TEMP_GetTemperature+0x46>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8003994:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fa07 	bl	8003dac <lps22hh_from_lsb_to_celsius>
 800399e:	4602      	mov	r2, r0
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	460b      	mov	r3, r1
 80039b8:	70fb      	strb	r3, [r7, #3]
 80039ba:	4613      	mov	r3, r2
 80039bc:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f103 0020 	add.w	r0, r3, #32
 80039c4:	1cba      	adds	r2, r7, #2
 80039c6:	78f9      	ldrb	r1, [r7, #3]
 80039c8:	2301      	movs	r3, #1
 80039ca:	f000 f9c4 	bl	8003d56 <lps22hh_write_reg>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 80039d4:	f04f 33ff 	mov.w	r3, #4294967295
 80039d8:	e000      	b.n	80039dc <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3320      	adds	r3, #32
 80039f6:	f107 020b 	add.w	r2, r7, #11
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fa5f 	bl	8003ec0 <lps22hh_data_rate_get>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8003a08:	f04f 33ff 	mov.w	r3, #4294967295
 8003a0c:	e03d      	b.n	8003a8a <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8003a0e:	7afb      	ldrb	r3, [r7, #11]
 8003a10:	2b07      	cmp	r3, #7
 8003a12:	d835      	bhi.n	8003a80 <LPS22HH_GetOutputDataRate+0x9c>
 8003a14:	a201      	add	r2, pc, #4	@ (adr r2, 8003a1c <LPS22HH_GetOutputDataRate+0x38>)
 8003a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1a:	bf00      	nop
 8003a1c:	08003a3d 	.word	0x08003a3d
 8003a20:	08003a47 	.word	0x08003a47
 8003a24:	08003a51 	.word	0x08003a51
 8003a28:	08003a59 	.word	0x08003a59
 8003a2c:	08003a61 	.word	0x08003a61
 8003a30:	08003a69 	.word	0x08003a69
 8003a34:	08003a71 	.word	0x08003a71
 8003a38:	08003a79 	.word	0x08003a79
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]
      break;
 8003a44:	e020      	b.n	8003a88 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003a4c:	601a      	str	r2, [r3, #0]
      break;
 8003a4e:	e01b      	b.n	8003a88 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	4a10      	ldr	r2, [pc, #64]	@ (8003a94 <LPS22HH_GetOutputDataRate+0xb0>)
 8003a54:	601a      	str	r2, [r3, #0]
      break;
 8003a56:	e017      	b.n	8003a88 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	4a0f      	ldr	r2, [pc, #60]	@ (8003a98 <LPS22HH_GetOutputDataRate+0xb4>)
 8003a5c:	601a      	str	r2, [r3, #0]
      break;
 8003a5e:	e013      	b.n	8003a88 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	4a0e      	ldr	r2, [pc, #56]	@ (8003a9c <LPS22HH_GetOutputDataRate+0xb8>)
 8003a64:	601a      	str	r2, [r3, #0]
      break;
 8003a66:	e00f      	b.n	8003a88 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	4a0d      	ldr	r2, [pc, #52]	@ (8003aa0 <LPS22HH_GetOutputDataRate+0xbc>)
 8003a6c:	601a      	str	r2, [r3, #0]
      break;
 8003a6e:	e00b      	b.n	8003a88 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	4a0c      	ldr	r2, [pc, #48]	@ (8003aa4 <LPS22HH_GetOutputDataRate+0xc0>)
 8003a74:	601a      	str	r2, [r3, #0]
      break;
 8003a76:	e007      	b.n	8003a88 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	4a0b      	ldr	r2, [pc, #44]	@ (8003aa8 <LPS22HH_GetOutputDataRate+0xc4>)
 8003a7c:	601a      	str	r2, [r3, #0]
      break;
 8003a7e:	e003      	b.n	8003a88 <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8003a80:	f04f 33ff 	mov.w	r3, #4294967295
 8003a84:	60fb      	str	r3, [r7, #12]
      break;
 8003a86:	bf00      	nop
  }

  return ret;
 8003a88:	68fb      	ldr	r3, [r7, #12]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	41200000 	.word	0x41200000
 8003a98:	41c80000 	.word	0x41c80000
 8003a9c:	42480000 	.word	0x42480000
 8003aa0:	42960000 	.word	0x42960000
 8003aa4:	42c80000 	.word	0x42c80000
 8003aa8:	43480000 	.word	0x43480000

08003aac <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8003ab6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003aba:	6838      	ldr	r0, [r7, #0]
 8003abc:	f7fd fb02 	bl	80010c4 <__aeabi_fcmple>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <LPS22HH_SetOutputDataRate_When_Enabled+0x1e>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e02d      	b.n	8003b26 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8003aca:	4928      	ldr	r1, [pc, #160]	@ (8003b6c <LPS22HH_SetOutputDataRate_When_Enabled+0xc0>)
 8003acc:	6838      	ldr	r0, [r7, #0]
 8003ace:	f7fd faf9 	bl	80010c4 <__aeabi_fcmple>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <LPS22HH_SetOutputDataRate_When_Enabled+0x30>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e024      	b.n	8003b26 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8003adc:	4924      	ldr	r1, [pc, #144]	@ (8003b70 <LPS22HH_SetOutputDataRate_When_Enabled+0xc4>)
 8003ade:	6838      	ldr	r0, [r7, #0]
 8003ae0:	f7fd faf0 	bl	80010c4 <__aeabi_fcmple>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <LPS22HH_SetOutputDataRate_When_Enabled+0x42>
 8003aea:	2303      	movs	r3, #3
 8003aec:	e01b      	b.n	8003b26 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8003aee:	4921      	ldr	r1, [pc, #132]	@ (8003b74 <LPS22HH_SetOutputDataRate_When_Enabled+0xc8>)
 8003af0:	6838      	ldr	r0, [r7, #0]
 8003af2:	f7fd fae7 	bl	80010c4 <__aeabi_fcmple>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <LPS22HH_SetOutputDataRate_When_Enabled+0x54>
 8003afc:	2304      	movs	r3, #4
 8003afe:	e012      	b.n	8003b26 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8003b00:	491d      	ldr	r1, [pc, #116]	@ (8003b78 <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>)
 8003b02:	6838      	ldr	r0, [r7, #0]
 8003b04:	f7fd fade 	bl	80010c4 <__aeabi_fcmple>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <LPS22HH_SetOutputDataRate_When_Enabled+0x66>
 8003b0e:	2305      	movs	r3, #5
 8003b10:	e009      	b.n	8003b26 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8003b12:	491a      	ldr	r1, [pc, #104]	@ (8003b7c <LPS22HH_SetOutputDataRate_When_Enabled+0xd0>)
 8003b14:	6838      	ldr	r0, [r7, #0]
 8003b16:	f7fd fad5 	bl	80010c4 <__aeabi_fcmple>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <LPS22HH_SetOutputDataRate_When_Enabled+0x78>
 8003b20:	2306      	movs	r3, #6
 8003b22:	e000      	b.n	8003b26 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8003b24:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8003b26:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3320      	adds	r3, #32
 8003b2c:	7bfa      	ldrb	r2, [r7, #15]
 8003b2e:	4611      	mov	r1, r2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 f977 	bl	8003e24 <lps22hh_data_rate_set>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <LPS22HH_SetOutputDataRate_When_Enabled+0x96>
  {
    return LPS22HH_ERROR;
 8003b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b40:	e00f      	b.n	8003b62 <LPS22HH_SetOutputDataRate_When_Enabled+0xb6>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f103 0220 	add.w	r2, r3, #32
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3333      	adds	r3, #51	@ 0x33
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	f000 f9b6 	bl	8003ec0 <lps22hh_data_rate_get>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <LPS22HH_SetOutputDataRate_When_Enabled+0xb4>
  {
    return LPS22HH_ERROR;
 8003b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b5e:	e000      	b.n	8003b62 <LPS22HH_SetOutputDataRate_When_Enabled+0xb6>
  }

  return LPS22HH_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	41200000 	.word	0x41200000
 8003b70:	41c80000 	.word	0x41c80000
 8003b74:	42480000 	.word	0x42480000
 8003b78:	42960000 	.word	0x42960000
 8003b7c:	42c80000 	.word	0x42c80000

08003b80 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8003b8a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003b8e:	6838      	ldr	r0, [r7, #0]
 8003b90:	f7fd fa98 	bl	80010c4 <__aeabi_fcmple>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <LPS22HH_SetOutputDataRate_When_Disabled+0x1e>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e02d      	b.n	8003bfa <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8003b9e:	491b      	ldr	r1, [pc, #108]	@ (8003c0c <LPS22HH_SetOutputDataRate_When_Disabled+0x8c>)
 8003ba0:	6838      	ldr	r0, [r7, #0]
 8003ba2:	f7fd fa8f 	bl	80010c4 <__aeabi_fcmple>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <LPS22HH_SetOutputDataRate_When_Disabled+0x30>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e024      	b.n	8003bfa <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8003bb0:	4917      	ldr	r1, [pc, #92]	@ (8003c10 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>)
 8003bb2:	6838      	ldr	r0, [r7, #0]
 8003bb4:	f7fd fa86 	bl	80010c4 <__aeabi_fcmple>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <LPS22HH_SetOutputDataRate_When_Disabled+0x42>
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e01b      	b.n	8003bfa <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8003bc2:	4914      	ldr	r1, [pc, #80]	@ (8003c14 <LPS22HH_SetOutputDataRate_When_Disabled+0x94>)
 8003bc4:	6838      	ldr	r0, [r7, #0]
 8003bc6:	f7fd fa7d 	bl	80010c4 <__aeabi_fcmple>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <LPS22HH_SetOutputDataRate_When_Disabled+0x54>
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	e012      	b.n	8003bfa <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8003bd4:	4910      	ldr	r1, [pc, #64]	@ (8003c18 <LPS22HH_SetOutputDataRate_When_Disabled+0x98>)
 8003bd6:	6838      	ldr	r0, [r7, #0]
 8003bd8:	f7fd fa74 	bl	80010c4 <__aeabi_fcmple>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <LPS22HH_SetOutputDataRate_When_Disabled+0x66>
 8003be2:	2305      	movs	r3, #5
 8003be4:	e009      	b.n	8003bfa <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8003be6:	490d      	ldr	r1, [pc, #52]	@ (8003c1c <LPS22HH_SetOutputDataRate_When_Disabled+0x9c>)
 8003be8:	6838      	ldr	r0, [r7, #0]
 8003bea:	f7fd fa6b 	bl	80010c4 <__aeabi_fcmple>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <LPS22HH_SetOutputDataRate_When_Disabled+0x78>
 8003bf4:	2306      	movs	r3, #6
 8003bf6:	e000      	b.n	8003bfa <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8003bf8:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	41200000 	.word	0x41200000
 8003c10:	41c80000 	.word	0x41c80000
 8003c14:	42480000 	.word	0x42480000
 8003c18:	42960000 	.word	0x42960000
 8003c1c:	42c80000 	.word	0x42c80000

08003c20 <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LPS22HH_I3C_BUS)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b03      	cmp	r3, #3
 8003c2e:	d00b      	beq.n	8003c48 <LPS22HH_Initialize+0x28>
  {
    /* Disable MIPI I3C(SM) interface */
    if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3320      	adds	r3, #32
 8003c34:	2111      	movs	r1, #17
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fa92 	bl	8004160 <lps22hh_i3c_interface_set>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <LPS22HH_Initialize+0x28>
    {
      return LPS22HH_ERROR;
 8003c42:	f04f 33ff 	mov.w	r3, #4294967295
 8003c46:	e034      	b.n	8003cb2 <LPS22HH_Initialize+0x92>
    }
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3320      	adds	r3, #32
 8003c4c:	2110      	movs	r1, #16
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 f8e8 	bl	8003e24 <lps22hh_data_rate_set>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <LPS22HH_Initialize+0x40>
  {
    return LPS22HH_ERROR;
 8003c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5e:	e028      	b.n	8003cb2 <LPS22HH_Initialize+0x92>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3320      	adds	r3, #32
 8003c64:	2100      	movs	r1, #0
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fa54 	bl	8004114 <lps22hh_lp_bandwidth_set>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <LPS22HH_Initialize+0x58>
  {
    return LPS22HH_ERROR;
 8003c72:	f04f 33ff 	mov.w	r3, #4294967295
 8003c76:	e01c      	b.n	8003cb2 <LPS22HH_Initialize+0x92>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3320      	adds	r3, #32
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 f8aa 	bl	8003dd8 <lps22hh_block_data_update_set>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <LPS22HH_Initialize+0x70>
  {
    return LPS22HH_ERROR;
 8003c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8e:	e010      	b.n	8003cb2 <LPS22HH_Initialize+0x92>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3320      	adds	r3, #32
 8003c94:	2101      	movs	r1, #1
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fa16 	bl	80040c8 <lps22hh_auto_increment_set>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <LPS22HH_Initialize+0x88>
  {
    return LPS22HH_ERROR;
 8003ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca6:	e004      	b.n	8003cb2 <LPS22HH_Initialize+0x92>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2203      	movs	r2, #3
 8003cac:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22HH_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003cba:	b590      	push	{r4, r7, lr}
 8003cbc:	b087      	sub	sp, #28
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	72fb      	strb	r3, [r7, #11]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	695c      	ldr	r4, [r3, #20]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	7b1b      	ldrb	r3, [r3, #12]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	7afb      	ldrb	r3, [r7, #11]
 8003cde:	b299      	uxth	r1, r3
 8003ce0:	893b      	ldrh	r3, [r7, #8]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	47a0      	blx	r4
 8003ce6:	4603      	mov	r3, r0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	371c      	adds	r7, #28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd90      	pop	{r4, r7, pc}

08003cf0 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003cf0:	b590      	push	{r4, r7, lr}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	607a      	str	r2, [r7, #4]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	72fb      	strb	r3, [r7, #11]
 8003d00:	4613      	mov	r3, r2
 8003d02:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	691c      	ldr	r4, [r3, #16]
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	7b1b      	ldrb	r3, [r3, #12]
 8003d10:	4618      	mov	r0, r3
 8003d12:	7afb      	ldrb	r3, [r7, #11]
 8003d14:	b299      	uxth	r1, r3
 8003d16:	893b      	ldrh	r3, [r7, #8]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	47a0      	blx	r4
 8003d1c:	4603      	mov	r3, r0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	371c      	adds	r7, #28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd90      	pop	{r4, r7, pc}

08003d26 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8003d26:	b590      	push	{r4, r7, lr}
 8003d28:	b087      	sub	sp, #28
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	461a      	mov	r2, r3
 8003d32:	460b      	mov	r3, r1
 8003d34:	72fb      	strb	r3, [r7, #11]
 8003d36:	4613      	mov	r3, r2
 8003d38:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	685c      	ldr	r4, [r3, #4]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	68d8      	ldr	r0, [r3, #12]
 8003d42:	893b      	ldrh	r3, [r7, #8]
 8003d44:	7af9      	ldrb	r1, [r7, #11]
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	47a0      	blx	r4
 8003d4a:	6178      	str	r0, [r7, #20]

  return ret;
 8003d4c:	697b      	ldr	r3, [r7, #20]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	371c      	adds	r7, #28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd90      	pop	{r4, r7, pc}

08003d56 <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8003d56:	b590      	push	{r4, r7, lr}
 8003d58:	b087      	sub	sp, #28
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	461a      	mov	r2, r3
 8003d62:	460b      	mov	r3, r1
 8003d64:	72fb      	strb	r3, [r7, #11]
 8003d66:	4613      	mov	r3, r2
 8003d68:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681c      	ldr	r4, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	68d8      	ldr	r0, [r3, #12]
 8003d72:	893b      	ldrh	r3, [r7, #8]
 8003d74:	7af9      	ldrb	r1, [r7, #11]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	47a0      	blx	r4
 8003d7a:	6178      	str	r0, [r7, #20]

  return ret;
 8003d7c:	697b      	ldr	r3, [r7, #20]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd90      	pop	{r4, r7, pc}

08003d86 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b082      	sub	sp, #8
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7fc ff98 	bl	8000cc4 <__aeabi_ui2f>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fd f89e 	bl	8000edc <__aeabi_fdiv>
 8003da0:	4603      	mov	r3, r0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8003db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fc ff86 	bl	8000ccc <__aeabi_i2f>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	4904      	ldr	r1, [pc, #16]	@ (8003dd4 <lps22hh_from_lsb_to_celsius+0x28>)
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fd f889 	bl	8000edc <__aeabi_fdiv>
 8003dca:	4603      	mov	r3, r0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	42c80000 	.word	0x42c80000

08003dd8 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8003de4:	f107 0208 	add.w	r2, r7, #8
 8003de8:	2301      	movs	r3, #1
 8003dea:	2110      	movs	r1, #16
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff ff9a 	bl	8003d26 <lps22hh_read_reg>
 8003df2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10f      	bne.n	8003e1a <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003dfa:	78fb      	ldrb	r3, [r7, #3]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	7a3b      	ldrb	r3, [r7, #8]
 8003e04:	f362 0341 	bfi	r3, r2, #1, #1
 8003e08:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8003e0a:	f107 0208 	add.w	r2, r7, #8
 8003e0e:	2301      	movs	r3, #1
 8003e10:	2110      	movs	r1, #16
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff ff9f 	bl	8003d56 <lps22hh_write_reg>
 8003e18:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003e30:	f107 0210 	add.w	r2, r7, #16
 8003e34:	2301      	movs	r3, #1
 8003e36:	2110      	movs	r1, #16
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff ff74 	bl	8003d26 <lps22hh_read_reg>
 8003e3e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d107      	bne.n	8003e56 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003e46:	f107 020c 	add.w	r2, r7, #12
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	2111      	movs	r1, #17
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff ff69 	bl	8003d26 <lps22hh_read_reg>
 8003e54:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10f      	bne.n	8003e7c <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8003e5c:	78fb      	ldrb	r3, [r7, #3]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	7c3b      	ldrb	r3, [r7, #16]
 8003e66:	f362 1306 	bfi	r3, r2, #4, #3
 8003e6a:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003e6c:	f107 0210 	add.w	r2, r7, #16
 8003e70:	2301      	movs	r3, #1
 8003e72:	2110      	movs	r1, #16
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7ff ff6e 	bl	8003d56 <lps22hh_write_reg>
 8003e7a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d119      	bne.n	8003eb6 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	7b3b      	ldrb	r3, [r7, #12]
 8003e8e:	f362 0341 	bfi	r3, r2, #1, #1
 8003e92:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	08db      	lsrs	r3, r3, #3
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	7b3b      	ldrb	r3, [r7, #12]
 8003ea0:	f362 0300 	bfi	r3, r2, #0, #1
 8003ea4:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003ea6:	f107 020c 	add.w	r2, r7, #12
 8003eaa:	2301      	movs	r3, #1
 8003eac:	2111      	movs	r1, #17
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff ff51 	bl	8003d56 <lps22hh_write_reg>
 8003eb4:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003eb6:	697b      	ldr	r3, [r7, #20]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003eca:	f107 0210 	add.w	r2, r7, #16
 8003ece:	2301      	movs	r3, #1
 8003ed0:	2110      	movs	r1, #16
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff ff27 	bl	8003d26 <lps22hh_read_reg>
 8003ed8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d107      	bne.n	8003ef0 <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003ee0:	f107 020c 	add.w	r2, r7, #12
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	2111      	movs	r1, #17
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff ff1c 	bl	8003d26 <lps22hh_read_reg>
 8003eee:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f040 8086 	bne.w	8004004 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003ef8:	f107 020c 	add.w	r2, r7, #12
 8003efc:	2301      	movs	r3, #1
 8003efe:	2111      	movs	r1, #17
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff ff10 	bl	8003d26 <lps22hh_read_reg>
 8003f06:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8003f08:	7b3b      	ldrb	r3, [r7, #12]
 8003f0a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	011a      	lsls	r2, r3, #4
 8003f12:	7b3b      	ldrb	r3, [r7, #12]
 8003f14:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	4413      	add	r3, r2
             ctrl_reg1.odr))
 8003f1e:	7c3a      	ldrb	r2, [r7, #16]
 8003f20:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8003f24:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8003f26:	4413      	add	r3, r2
 8003f28:	2b15      	cmp	r3, #21
 8003f2a:	d867      	bhi.n	8003ffc <lps22hh_data_rate_get+0x13c>
 8003f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f34 <lps22hh_data_rate_get+0x74>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08003f8d 	.word	0x08003f8d
 8003f38:	08003f9d 	.word	0x08003f9d
 8003f3c:	08003fa5 	.word	0x08003fa5
 8003f40:	08003fad 	.word	0x08003fad
 8003f44:	08003fb5 	.word	0x08003fb5
 8003f48:	08003fbd 	.word	0x08003fbd
 8003f4c:	08003fed 	.word	0x08003fed
 8003f50:	08003ff5 	.word	0x08003ff5
 8003f54:	08003f95 	.word	0x08003f95
 8003f58:	08003ffd 	.word	0x08003ffd
 8003f5c:	08003ffd 	.word	0x08003ffd
 8003f60:	08003ffd 	.word	0x08003ffd
 8003f64:	08003ffd 	.word	0x08003ffd
 8003f68:	08003ffd 	.word	0x08003ffd
 8003f6c:	08003ffd 	.word	0x08003ffd
 8003f70:	08003ffd 	.word	0x08003ffd
 8003f74:	08003ffd 	.word	0x08003ffd
 8003f78:	08003fc5 	.word	0x08003fc5
 8003f7c:	08003fcd 	.word	0x08003fcd
 8003f80:	08003fd5 	.word	0x08003fd5
 8003f84:	08003fdd 	.word	0x08003fdd
 8003f88:	08003fe5 	.word	0x08003fe5
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	701a      	strb	r2, [r3, #0]
        break;
 8003f92:	e037      	b.n	8004004 <lps22hh_data_rate_get+0x144>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2208      	movs	r2, #8
 8003f98:	701a      	strb	r2, [r3, #0]
        break;
 8003f9a:	e033      	b.n	8004004 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	701a      	strb	r2, [r3, #0]
        break;
 8003fa2:	e02f      	b.n	8004004 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	701a      	strb	r2, [r3, #0]
        break;
 8003faa:	e02b      	b.n	8004004 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	2203      	movs	r2, #3
 8003fb0:	701a      	strb	r2, [r3, #0]
        break;
 8003fb2:	e027      	b.n	8004004 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2204      	movs	r2, #4
 8003fb8:	701a      	strb	r2, [r3, #0]
        break;
 8003fba:	e023      	b.n	8004004 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2205      	movs	r2, #5
 8003fc0:	701a      	strb	r2, [r3, #0]
        break;
 8003fc2:	e01f      	b.n	8004004 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	2211      	movs	r2, #17
 8003fc8:	701a      	strb	r2, [r3, #0]
        break;
 8003fca:	e01b      	b.n	8004004 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2212      	movs	r2, #18
 8003fd0:	701a      	strb	r2, [r3, #0]
        break;
 8003fd2:	e017      	b.n	8004004 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2213      	movs	r2, #19
 8003fd8:	701a      	strb	r2, [r3, #0]
        break;
 8003fda:	e013      	b.n	8004004 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2214      	movs	r2, #20
 8003fe0:	701a      	strb	r2, [r3, #0]
        break;
 8003fe2:	e00f      	b.n	8004004 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2215      	movs	r2, #21
 8003fe8:	701a      	strb	r2, [r3, #0]
        break;
 8003fea:	e00b      	b.n	8004004 <lps22hh_data_rate_get+0x144>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2206      	movs	r2, #6
 8003ff0:	701a      	strb	r2, [r3, #0]
        break;
 8003ff2:	e007      	b.n	8004004 <lps22hh_data_rate_get+0x144>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2207      	movs	r2, #7
 8003ff8:	701a      	strb	r2, [r3, #0]
        break;
 8003ffa:	e003      	b.n	8004004 <lps22hh_data_rate_get+0x144>

      default:
        *val = LPS22HH_POWER_DOWN;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2200      	movs	r2, #0
 8004000:	701a      	strb	r2, [r3, #0]
        break;
 8004002:	bf00      	nop
    }
  }

  return ret;
 8004004:	697b      	ldr	r3, [r7, #20]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop

08004010 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800401a:	f107 0208 	add.w	r2, r7, #8
 800401e:	2303      	movs	r3, #3
 8004020:	2128      	movs	r1, #40	@ 0x28
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff fe7f 	bl	8003d26 <lps22hh_read_reg>
 8004028:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800402a:	7abb      	ldrb	r3, [r7, #10]
 800402c:	461a      	mov	r2, r3
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	021b      	lsls	r3, r3, #8
 8004038:	7a7a      	ldrb	r2, [r7, #9]
 800403a:	441a      	add	r2, r3
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	7a3a      	ldrb	r2, [r7, #8]
 8004048:	441a      	add	r2, r3
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	021a      	lsls	r2, r3, #8
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	601a      	str	r2, [r3, #0]

  return ret;
 8004058:	68fb      	ldr	r3, [r7, #12]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 800406c:	f107 0208 	add.w	r2, r7, #8
 8004070:	2302      	movs	r3, #2
 8004072:	212b      	movs	r1, #43	@ 0x2b
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff fe56 	bl	8003d26 <lps22hh_read_reg>
 800407a:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 800407c:	7a7b      	ldrb	r3, [r7, #9]
 800407e:	b21a      	sxth	r2, r3
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	f9b3 3000 	ldrsh.w	r3, [r3]
 800408a:	b29b      	uxth	r3, r3
 800408c:	021b      	lsls	r3, r3, #8
 800408e:	b29b      	uxth	r3, r3
 8004090:	7a3a      	ldrb	r2, [r7, #8]
 8004092:	4413      	add	r3, r2
 8004094:	b29b      	uxth	r3, r3
 8004096:	b21a      	sxth	r2, r3
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	801a      	strh	r2, [r3, #0]

  return ret;
 800409c:	68fb      	ldr	r3, [r7, #12]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b084      	sub	sp, #16
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80040b0:	2301      	movs	r3, #1
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	210f      	movs	r1, #15
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff fe35 	bl	8003d26 <lps22hh_read_reg>
 80040bc:	60f8      	str	r0, [r7, #12]

  return ret;
 80040be:	68fb      	ldr	r3, [r7, #12]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	460b      	mov	r3, r1
 80040d2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80040d4:	f107 0208 	add.w	r2, r7, #8
 80040d8:	2301      	movs	r3, #1
 80040da:	2111      	movs	r1, #17
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff fe22 	bl	8003d26 <lps22hh_read_reg>
 80040e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10f      	bne.n	800410a <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	7a3b      	ldrb	r3, [r7, #8]
 80040f4:	f362 1304 	bfi	r3, r2, #4, #1
 80040f8:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80040fa:	f107 0208 	add.w	r2, r7, #8
 80040fe:	2301      	movs	r3, #1
 8004100:	2111      	movs	r1, #17
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff fe27 	bl	8003d56 <lps22hh_write_reg>
 8004108:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800410a:	68fb      	ldr	r3, [r7, #12]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004120:	f107 0208 	add.w	r2, r7, #8
 8004124:	2301      	movs	r3, #1
 8004126:	2110      	movs	r1, #16
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7ff fdfc 	bl	8003d26 <lps22hh_read_reg>
 800412e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10f      	bne.n	8004156 <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8004136:	78fb      	ldrb	r3, [r7, #3]
 8004138:	f003 0303 	and.w	r3, r3, #3
 800413c:	b2da      	uxtb	r2, r3
 800413e:	7a3b      	ldrb	r3, [r7, #8]
 8004140:	f362 0383 	bfi	r3, r2, #2, #2
 8004144:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004146:	f107 0208 	add.w	r2, r7, #8
 800414a:	2301      	movs	r3, #1
 800414c:	2110      	movs	r1, #16
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7ff fe01 	bl	8003d56 <lps22hh_write_reg>
 8004154:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004156:	68fb      	ldr	r3, [r7, #12]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 800416c:	f107 0208 	add.w	r2, r7, #8
 8004170:	2301      	movs	r3, #1
 8004172:	210e      	movs	r1, #14
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff fdd6 	bl	8003d26 <lps22hh_read_reg>
 800417a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d118      	bne.n	80041b4 <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	b2da      	uxtb	r2, r3
 800418a:	7a3b      	ldrb	r3, [r7, #8]
 800418c:	f362 0341 	bfi	r3, r2, #1, #1
 8004190:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8004192:	78fb      	ldrb	r3, [r7, #3]
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	b2da      	uxtb	r2, r3
 800419c:	7a3b      	ldrb	r3, [r7, #8]
 800419e:	f362 13c7 	bfi	r3, r2, #7, #1
 80041a2:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80041a4:	f107 0208 	add.w	r2, r7, #8
 80041a8:	2301      	movs	r3, #1
 80041aa:	210e      	movs	r1, #14
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff fdd2 	bl	8003d56 <lps22hh_write_reg>
 80041b2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80041b4:	68fb      	ldr	r3, [r7, #12]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d103      	bne.n	80041d8 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 80041d0:	f04f 33ff 	mov.w	r3, #4294967295
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	e034      	b.n	8004242 <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	7b1a      	ldrb	r2, [r3, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	695a      	ldr	r2, [r3, #20]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	699a      	ldr	r2, [r3, #24]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a0e      	ldr	r2, [pc, #56]	@ (800424c <STTS751_RegisterBusIO+0x8c>)
 8004214:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a0d      	ldr	r2, [pc, #52]	@ (8004250 <STTS751_RegisterBusIO+0x90>)
 800421a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	69da      	ldr	r2, [r3, #28]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d004      	beq.n	800423c <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4798      	blx	r3
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	e002      	b.n	8004242 <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 800423c:	f04f 33ff 	mov.w	r3, #4294967295
 8004240:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004242:	68fb      	ldr	r3, [r7, #12]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	080046b9 	.word	0x080046b9
 8004250:	08004727 	.word	0x08004727

08004254 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004262:	2b00      	cmp	r3, #0
 8004264:	d127      	bne.n	80042b6 <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	3320      	adds	r3, #32
 800426a:	2101      	movs	r1, #1
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fc39 	bl	8004ae4 <stts751_pin_event_route_set>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 8004278:	f04f 33ff 	mov.w	r3, #4294967295
 800427c:	e020      	b.n	80042c0 <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004284:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3320      	adds	r3, #32
 800428a:	2103      	movs	r1, #3
 800428c:	4618      	mov	r0, r3
 800428e:	f000 fb9d 	bl	80049cc <stts751_resolution_set>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 8004298:	f04f 33ff 	mov.w	r3, #4294967295
 800429c:	e010      	b.n	80042c0 <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3320      	adds	r3, #32
 80042a2:	2180      	movs	r1, #128	@ 0x80
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 faba 	bl	800481e <stts751_temp_data_rate_set>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 80042b0:	f04f 33ff 	mov.w	r3, #4294967295
 80042b4:	e004      	b.n	80042c0 <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS751_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d108      	bne.n	80042ec <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f874 	bl	80043c8 <STTS751_TEMP_Disable>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 80042e6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ea:	e004      	b.n	80042f6 <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS751_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3320      	adds	r3, #32
 800430c:	f107 020c 	add.w	r2, r7, #12
 8004310:	4611      	mov	r1, r2
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fc0c 	bl	8004b30 <stts751_device_id_get>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 800431e:	f04f 33ff 	mov.w	r3, #4294967295
 8004322:	e003      	b.n	800432c <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 8004324:	7b7a      	ldrb	r2, [r7, #13]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2200      	movs	r2, #0
 8004342:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2200      	movs	r2, #0
 8004348:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2201      	movs	r2, #1
 800434e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2200      	movs	r2, #0
 8004354:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2200      	movs	r2, #0
 800435a:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 32.0f;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 800436a:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	615a      	str	r2, [r3, #20]
  return STTS751_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr

08004388 <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004396:	2b01      	cmp	r3, #1
 8004398:	d101      	bne.n	800439e <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	e010      	b.n	80043c0 <STTS751_TEMP_Enable+0x38>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a2:	4619      	mov	r1, r3
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f8b5 	bl	8004514 <STTS751_TEMP_SetOutputDataRate>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <STTS751_TEMP_Enable+0x2e>
  {
    return STTS751_ERROR;
 80043b0:	f04f 33ff 	mov.w	r3, #4294967295
 80043b4:	e004      	b.n	80043c0 <STTS751_TEMP_Enable+0x38>
  }

  pObj->temp_is_enabled = 1;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS751_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	e01c      	b.n	8004418 <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3334      	adds	r3, #52	@ 0x34
 80043e2:	4619      	mov	r1, r3
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f81b 	bl	8004420 <STTS751_TEMP_GetOutputDataRate>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 80043f0:	f04f 33ff 	mov.w	r3, #4294967295
 80043f4:	e010      	b.n	8004418 <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3320      	adds	r3, #32
 80043fa:	2180      	movs	r1, #128	@ 0x80
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fa0e 	bl	800481e <stts751_temp_data_rate_set>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 8004408:	f04f 33ff 	mov.w	r3, #4294967295
 800440c:	e004      	b.n	8004418 <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS751_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3320      	adds	r3, #32
 8004432:	f107 020b 	add.w	r2, r7, #11
 8004436:	4611      	mov	r1, r2
 8004438:	4618      	mov	r0, r3
 800443a:	f000 fa47 	bl	80048cc <stts751_temp_data_rate_get>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 8004444:	f04f 33ff 	mov.w	r3, #4294967295
 8004448:	e060      	b.n	800450c <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 800444a:	7afb      	ldrb	r3, [r7, #11]
 800444c:	2b90      	cmp	r3, #144	@ 0x90
 800444e:	d021      	beq.n	8004494 <STTS751_TEMP_GetOutputDataRate+0x74>
 8004450:	2b90      	cmp	r3, #144	@ 0x90
 8004452:	dc56      	bgt.n	8004502 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8004454:	2b09      	cmp	r3, #9
 8004456:	dc1b      	bgt.n	8004490 <STTS751_TEMP_GetOutputDataRate+0x70>
 8004458:	2b00      	cmp	r3, #0
 800445a:	db52      	blt.n	8004502 <STTS751_TEMP_GetOutputDataRate+0xe2>
 800445c:	2b09      	cmp	r3, #9
 800445e:	d850      	bhi.n	8004502 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8004460:	a201      	add	r2, pc, #4	@ (adr r2, 8004468 <STTS751_TEMP_GetOutputDataRate+0x48>)
 8004462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004466:	bf00      	nop
 8004468:	0800449f 	.word	0x0800449f
 800446c:	080044a9 	.word	0x080044a9
 8004470:	080044b3 	.word	0x080044b3
 8004474:	080044bd 	.word	0x080044bd
 8004478:	080044c7 	.word	0x080044c7
 800447c:	080044d1 	.word	0x080044d1
 8004480:	080044db 	.word	0x080044db
 8004484:	080044e5 	.word	0x080044e5
 8004488:	080044ef 	.word	0x080044ef
 800448c:	080044f9 	.word	0x080044f9
 8004490:	2b80      	cmp	r3, #128	@ 0x80
 8004492:	d136      	bne.n	8004502 <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
      break;
 800449c:	e035      	b.n	800450a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	f04f 5276 	mov.w	r2, #1031798784	@ 0x3d800000
 80044a4:	601a      	str	r2, [r3, #0]
      break;
 80044a6:	e030      	b.n	800450a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	f04f 5278 	mov.w	r2, #1040187392	@ 0x3e000000
 80044ae:	601a      	str	r2, [r3, #0]
      break;
 80044b0:	e02b      	b.n	800450a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 80044b8:	601a      	str	r2, [r3, #0]
      break;
 80044ba:	e026      	b.n	800450a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80044c2:	601a      	str	r2, [r3, #0]
      break;
 80044c4:	e021      	b.n	800450a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80044cc:	601a      	str	r2, [r3, #0]
      break;
 80044ce:	e01c      	b.n	800450a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80044d6:	601a      	str	r2, [r3, #0]
      break;
 80044d8:	e017      	b.n	800450a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80044e0:	601a      	str	r2, [r3, #0]
      break;
 80044e2:	e012      	b.n	800450a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 80044ea:	601a      	str	r2, [r3, #0]
      break;
 80044ec:	e00d      	b.n	800450a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 80044f4:	601a      	str	r2, [r3, #0]
      break;
 80044f6:	e008      	b.n	800450a <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 80044fe:	601a      	str	r2, [r3, #0]
      break;
 8004500:	e003      	b.n	800450a <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 8004502:	f04f 33ff 	mov.w	r3, #4294967295
 8004506:	60fb      	str	r3, [r7, #12]
      break;
 8004508:	bf00      	nop
  }

  return ret;
 800450a:	68fb      	ldr	r3, [r7, #12]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3320      	adds	r3, #32
 8004522:	f107 020e 	add.w	r2, r7, #14
 8004526:	4611      	mov	r1, r2
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fa75 	bl	8004a18 <stts751_resolution_get>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <STTS751_TEMP_SetOutputDataRate+0x26>
  {
    return STTS751_ERROR;
 8004534:	f04f 33ff 	mov.w	r3, #4294967295
 8004538:	e09a      	b.n	8004670 <STTS751_TEMP_SetOutputDataRate+0x15c>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 800453a:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 800453e:	6838      	ldr	r0, [r7, #0]
 8004540:	f7fc fdac 	bl	800109c <__aeabi_fcmpeq>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00e      	beq.n	8004568 <STTS751_TEMP_SetOutputDataRate+0x54>
 800454a:	7bbb      	ldrb	r3, [r7, #14]
 800454c:	2b03      	cmp	r3, #3
 800454e:	d10b      	bne.n	8004568 <STTS751_TEMP_SetOutputDataRate+0x54>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3320      	adds	r3, #32
 8004554:	2101      	movs	r1, #1
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fa38 	bl	80049cc <stts751_resolution_set>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <STTS751_TEMP_SetOutputDataRate+0x54>
    {
      return STTS751_ERROR;
 8004562:	f04f 33ff 	mov.w	r3, #4294967295
 8004566:	e083      	b.n	8004670 <STTS751_TEMP_SetOutputDataRate+0x15c>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8004568:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 800456c:	6838      	ldr	r0, [r7, #0]
 800456e:	f7fc fd95 	bl	800109c <__aeabi_fcmpeq>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d011      	beq.n	800459c <STTS751_TEMP_SetOutputDataRate+0x88>
 8004578:	7bbb      	ldrb	r3, [r7, #14]
 800457a:	2b03      	cmp	r3, #3
 800457c:	d002      	beq.n	8004584 <STTS751_TEMP_SetOutputDataRate+0x70>
 800457e:	7bbb      	ldrb	r3, [r7, #14]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d10b      	bne.n	800459c <STTS751_TEMP_SetOutputDataRate+0x88>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3320      	adds	r3, #32
 8004588:	2100      	movs	r1, #0
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fa1e 	bl	80049cc <stts751_resolution_set>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <STTS751_TEMP_SetOutputDataRate+0x88>
    {
      return STTS751_ERROR;
 8004596:	f04f 33ff 	mov.w	r3, #4294967295
 800459a:	e069      	b.n	8004670 <STTS751_TEMP_SetOutputDataRate+0x15c>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 800459c:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 80045a0:	6838      	ldr	r0, [r7, #0]
 80045a2:	f7fc fd8f 	bl	80010c4 <__aeabi_fcmple>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <STTS751_TEMP_SetOutputDataRate+0x9c>
 80045ac:	2300      	movs	r3, #0
 80045ae:	e050      	b.n	8004652 <STTS751_TEMP_SetOutputDataRate+0x13e>
 80045b0:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 80045b4:	6838      	ldr	r0, [r7, #0]
 80045b6:	f7fc fd85 	bl	80010c4 <__aeabi_fcmple>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <STTS751_TEMP_SetOutputDataRate+0xb0>
 80045c0:	2301      	movs	r3, #1
 80045c2:	e046      	b.n	8004652 <STTS751_TEMP_SetOutputDataRate+0x13e>
 80045c4:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 80045c8:	6838      	ldr	r0, [r7, #0]
 80045ca:	f7fc fd7b 	bl	80010c4 <__aeabi_fcmple>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <STTS751_TEMP_SetOutputDataRate+0xc4>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e03c      	b.n	8004652 <STTS751_TEMP_SetOutputDataRate+0x13e>
 80045d8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80045dc:	6838      	ldr	r0, [r7, #0]
 80045de:	f7fc fd71 	bl	80010c4 <__aeabi_fcmple>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <STTS751_TEMP_SetOutputDataRate+0xd8>
 80045e8:	2303      	movs	r3, #3
 80045ea:	e032      	b.n	8004652 <STTS751_TEMP_SetOutputDataRate+0x13e>
 80045ec:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80045f0:	6838      	ldr	r0, [r7, #0]
 80045f2:	f7fc fd67 	bl	80010c4 <__aeabi_fcmple>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <STTS751_TEMP_SetOutputDataRate+0xec>
 80045fc:	2304      	movs	r3, #4
 80045fe:	e028      	b.n	8004652 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8004600:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004604:	6838      	ldr	r0, [r7, #0]
 8004606:	f7fc fd5d 	bl	80010c4 <__aeabi_fcmple>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <STTS751_TEMP_SetOutputDataRate+0x100>
 8004610:	2305      	movs	r3, #5
 8004612:	e01e      	b.n	8004652 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8004614:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8004618:	6838      	ldr	r0, [r7, #0]
 800461a:	f7fc fd53 	bl	80010c4 <__aeabi_fcmple>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <STTS751_TEMP_SetOutputDataRate+0x114>
 8004624:	2306      	movs	r3, #6
 8004626:	e014      	b.n	8004652 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8004628:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800462c:	6838      	ldr	r0, [r7, #0]
 800462e:	f7fc fd49 	bl	80010c4 <__aeabi_fcmple>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <STTS751_TEMP_SetOutputDataRate+0x128>
 8004638:	2307      	movs	r3, #7
 800463a:	e00a      	b.n	8004652 <STTS751_TEMP_SetOutputDataRate+0x13e>
 800463c:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8004640:	6838      	ldr	r0, [r7, #0]
 8004642:	f7fc fd3f 	bl	80010c4 <__aeabi_fcmple>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <STTS751_TEMP_SetOutputDataRate+0x13c>
 800464c:	2308      	movs	r3, #8
 800464e:	e000      	b.n	8004652 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8004650:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 8004652:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3320      	adds	r3, #32
 8004658:	7bfa      	ldrb	r2, [r7, #15]
 800465a:	4611      	mov	r1, r2
 800465c:	4618      	mov	r0, r3
 800465e:	f000 f8de 	bl	800481e <stts751_temp_data_rate_set>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <STTS751_TEMP_SetOutputDataRate+0x15a>
  {
    return STTS751_ERROR;
 8004668:	f04f 33ff 	mov.w	r3, #4294967295
 800466c:	e000      	b.n	8004670 <STTS751_TEMP_SetOutputDataRate+0x15c>
  }

  return STTS751_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3320      	adds	r3, #32
 8004686:	f107 020e 	add.w	r2, r7, #14
 800468a:	4611      	mov	r1, r2
 800468c:	4618      	mov	r0, r3
 800468e:	f000 f9fb 	bl	8004a88 <stts751_temperature_raw_get>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 8004698:	f04f 33ff 	mov.w	r3, #4294967295
 800469c:	e008      	b.n	80046b0 <STTS751_TEMP_GetTemperature+0x38>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 800469e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 f8a6 	bl	80047f4 <stts751_from_lsb_to_celsius>
 80046a8:	4602      	mov	r2, r0
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	601a      	str	r2, [r3, #0]

  return STTS751_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80046b8:	b590      	push	{r4, r7, lr}
 80046ba:	b089      	sub	sp, #36	@ 0x24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	607a      	str	r2, [r7, #4]
 80046c2:	461a      	mov	r2, r3
 80046c4:	460b      	mov	r3, r1
 80046c6:	72fb      	strb	r3, [r7, #11]
 80046c8:	4613      	mov	r3, r2
 80046ca:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d11f      	bne.n	800471c <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 80046dc:	2300      	movs	r3, #0
 80046de:	83fb      	strh	r3, [r7, #30]
 80046e0:	e018      	b.n	8004714 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	695c      	ldr	r4, [r3, #20]
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	7b1b      	ldrb	r3, [r3, #12]
 80046ea:	4618      	mov	r0, r3
 80046ec:	7afb      	ldrb	r3, [r7, #11]
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	8bfb      	ldrh	r3, [r7, #30]
 80046f2:	4413      	add	r3, r2
 80046f4:	b299      	uxth	r1, r3
 80046f6:	8bfb      	ldrh	r3, [r7, #30]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	441a      	add	r2, r3
 80046fc:	2301      	movs	r3, #1
 80046fe:	47a0      	blx	r4
 8004700:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 8004708:	f04f 33ff 	mov.w	r3, #4294967295
 800470c:	e007      	b.n	800471e <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800470e:	8bfb      	ldrh	r3, [r7, #30]
 8004710:	3301      	adds	r3, #1
 8004712:	83fb      	strh	r3, [r7, #30]
 8004714:	8bfa      	ldrh	r2, [r7, #30]
 8004716:	893b      	ldrh	r3, [r7, #8]
 8004718:	429a      	cmp	r2, r3
 800471a:	d3e2      	bcc.n	80046e2 <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 800471c:	69bb      	ldr	r3, [r7, #24]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3724      	adds	r7, #36	@ 0x24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd90      	pop	{r4, r7, pc}

08004726 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004726:	b590      	push	{r4, r7, lr}
 8004728:	b089      	sub	sp, #36	@ 0x24
 800472a:	af00      	add	r7, sp, #0
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	461a      	mov	r2, r3
 8004732:	460b      	mov	r3, r1
 8004734:	72fb      	strb	r3, [r7, #11]
 8004736:	4613      	mov	r3, r2
 8004738:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d11f      	bne.n	800478a <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800474a:	2300      	movs	r3, #0
 800474c:	83fb      	strh	r3, [r7, #30]
 800474e:	e018      	b.n	8004782 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	691c      	ldr	r4, [r3, #16]
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	7b1b      	ldrb	r3, [r3, #12]
 8004758:	4618      	mov	r0, r3
 800475a:	7afb      	ldrb	r3, [r7, #11]
 800475c:	b29a      	uxth	r2, r3
 800475e:	8bfb      	ldrh	r3, [r7, #30]
 8004760:	4413      	add	r3, r2
 8004762:	b299      	uxth	r1, r3
 8004764:	8bfb      	ldrh	r3, [r7, #30]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	441a      	add	r2, r3
 800476a:	2301      	movs	r3, #1
 800476c:	47a0      	blx	r4
 800476e:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 8004776:	f04f 33ff 	mov.w	r3, #4294967295
 800477a:	e007      	b.n	800478c <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800477c:	8bfb      	ldrh	r3, [r7, #30]
 800477e:	3301      	adds	r3, #1
 8004780:	83fb      	strh	r3, [r7, #30]
 8004782:	8bfa      	ldrh	r2, [r7, #30]
 8004784:	893b      	ldrh	r3, [r7, #8]
 8004786:	429a      	cmp	r2, r3
 8004788:	d3e2      	bcc.n	8004750 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 800478a:	69bb      	ldr	r3, [r7, #24]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3724      	adds	r7, #36	@ 0x24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd90      	pop	{r4, r7, pc}

08004794 <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004794:	b590      	push	{r4, r7, lr}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	607a      	str	r2, [r7, #4]
 800479e:	461a      	mov	r2, r3
 80047a0:	460b      	mov	r3, r1
 80047a2:	72fb      	strb	r3, [r7, #11]
 80047a4:	4613      	mov	r3, r2
 80047a6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	685c      	ldr	r4, [r3, #4]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	68d8      	ldr	r0, [r3, #12]
 80047b0:	893b      	ldrh	r3, [r7, #8]
 80047b2:	7af9      	ldrb	r1, [r7, #11]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	47a0      	blx	r4
 80047b8:	6178      	str	r0, [r7, #20]

  return ret;
 80047ba:	697b      	ldr	r3, [r7, #20]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd90      	pop	{r4, r7, pc}

080047c4 <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80047c4:	b590      	push	{r4, r7, lr}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	607a      	str	r2, [r7, #4]
 80047ce:	461a      	mov	r2, r3
 80047d0:	460b      	mov	r3, r1
 80047d2:	72fb      	strb	r3, [r7, #11]
 80047d4:	4613      	mov	r3, r2
 80047d6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681c      	ldr	r4, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	68d8      	ldr	r0, [r3, #12]
 80047e0:	893b      	ldrh	r3, [r7, #8]
 80047e2:	7af9      	ldrb	r1, [r7, #11]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	47a0      	blx	r4
 80047e8:	6178      	str	r0, [r7, #20]

  return ret;
 80047ea:	697b      	ldr	r3, [r7, #20]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	371c      	adds	r7, #28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd90      	pop	{r4, r7, pc}

080047f4 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	4603      	mov	r3, r0
 80047fc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 80047fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004802:	4618      	mov	r0, r3
 8004804:	f7fc fa62 	bl	8000ccc <__aeabi_i2f>
 8004808:	4603      	mov	r3, r0
 800480a:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800480e:	4618      	mov	r0, r3
 8004810:	f7fc fb64 	bl	8000edc <__aeabi_fdiv>
 8004814:	4603      	mov	r3, r0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b086      	sub	sp, #24
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	460b      	mov	r3, r1
 8004828:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 800482a:	23aa      	movs	r3, #170	@ 0xaa
 800482c:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 800482e:	f107 020c 	add.w	r2, r7, #12
 8004832:	2301      	movs	r3, #1
 8004834:	2104      	movs	r1, #4
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff ffac 	bl	8004794 <stts751_read_reg>
 800483c:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10f      	bne.n	8004864 <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	b2da      	uxtb	r2, r3
 800484c:	7b3b      	ldrb	r3, [r7, #12]
 800484e:	f362 0303 	bfi	r3, r2, #0, #4
 8004852:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 8004854:	f107 020c 	add.w	r2, r7, #12
 8004858:	2301      	movs	r3, #1
 800485a:	2104      	movs	r1, #4
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7ff ffb1 	bl	80047c4 <stts751_write_reg>
 8004862:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d107      	bne.n	800487a <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 800486a:	f107 0210 	add.w	r2, r7, #16
 800486e:	2301      	movs	r3, #1
 8004870:	2103      	movs	r1, #3
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff ff8e 	bl	8004794 <stts751_read_reg>
 8004878:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d111      	bne.n	80048a4 <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	09db      	lsrs	r3, r3, #7
 8004884:	b2db      	uxtb	r3, r3
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	b2da      	uxtb	r2, r3
 800488c:	7c3b      	ldrb	r3, [r7, #16]
 800488e:	f362 1386 	bfi	r3, r2, #6, #1
 8004892:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 8004894:	f107 0210 	add.w	r2, r7, #16
 8004898:	2301      	movs	r3, #1
 800489a:	2103      	movs	r1, #3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff ff91 	bl	80047c4 <stts751_write_reg>
 80048a2:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10a      	bne.n	80048c0 <stts751_temp_data_rate_set+0xa2>
 80048aa:	78fb      	ldrb	r3, [r7, #3]
 80048ac:	2b90      	cmp	r3, #144	@ 0x90
 80048ae:	d107      	bne.n	80048c0 <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 80048b0:	f107 020b 	add.w	r2, r7, #11
 80048b4:	2301      	movs	r3, #1
 80048b6:	210f      	movs	r1, #15
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff ff83 	bl	80047c4 <stts751_write_reg>
 80048be:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80048c0:	697b      	ldr	r3, [r7, #20]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 80048d6:	f107 0210 	add.w	r2, r7, #16
 80048da:	2301      	movs	r3, #1
 80048dc:	2104      	movs	r1, #4
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff ff58 	bl	8004794 <stts751_read_reg>
 80048e4:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d107      	bne.n	80048fc <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 80048ec:	f107 020c 	add.w	r2, r7, #12
 80048f0:	2301      	movs	r3, #1
 80048f2:	2103      	movs	r1, #3
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff ff4d 	bl	8004794 <stts751_read_reg>
 80048fa:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 80048fc:	7b3b      	ldrb	r3, [r7, #12]
 80048fe:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004902:	b2db      	uxtb	r3, r3
 8004904:	01db      	lsls	r3, r3, #7
 8004906:	7c3a      	ldrb	r2, [r7, #16]
 8004908:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	4413      	add	r3, r2
 8004910:	2b90      	cmp	r3, #144	@ 0x90
 8004912:	d025      	beq.n	8004960 <stts751_temp_data_rate_get+0x94>
 8004914:	2b90      	cmp	r3, #144	@ 0x90
 8004916:	dc4f      	bgt.n	80049b8 <stts751_temp_data_rate_get+0xec>
 8004918:	2b09      	cmp	r3, #9
 800491a:	dc1b      	bgt.n	8004954 <stts751_temp_data_rate_get+0x88>
 800491c:	2b00      	cmp	r3, #0
 800491e:	db4b      	blt.n	80049b8 <stts751_temp_data_rate_get+0xec>
 8004920:	2b09      	cmp	r3, #9
 8004922:	d849      	bhi.n	80049b8 <stts751_temp_data_rate_get+0xec>
 8004924:	a201      	add	r2, pc, #4	@ (adr r2, 800492c <stts751_temp_data_rate_get+0x60>)
 8004926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492a:	bf00      	nop
 800492c:	08004969 	.word	0x08004969
 8004930:	08004971 	.word	0x08004971
 8004934:	08004979 	.word	0x08004979
 8004938:	08004981 	.word	0x08004981
 800493c:	08004989 	.word	0x08004989
 8004940:	08004991 	.word	0x08004991
 8004944:	08004999 	.word	0x08004999
 8004948:	080049a1 	.word	0x080049a1
 800494c:	080049a9 	.word	0x080049a9
 8004950:	080049b1 	.word	0x080049b1
 8004954:	2b80      	cmp	r3, #128	@ 0x80
 8004956:	d12f      	bne.n	80049b8 <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2280      	movs	r2, #128	@ 0x80
 800495c:	701a      	strb	r2, [r3, #0]
      break;
 800495e:	e02f      	b.n	80049c0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2290      	movs	r2, #144	@ 0x90
 8004964:	701a      	strb	r2, [r3, #0]
      break;
 8004966:	e02b      	b.n	80049c0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2200      	movs	r2, #0
 800496c:	701a      	strb	r2, [r3, #0]
      break;
 800496e:	e027      	b.n	80049c0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2201      	movs	r2, #1
 8004974:	701a      	strb	r2, [r3, #0]
      break;
 8004976:	e023      	b.n	80049c0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2202      	movs	r2, #2
 800497c:	701a      	strb	r2, [r3, #0]
      break;
 800497e:	e01f      	b.n	80049c0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2203      	movs	r2, #3
 8004984:	701a      	strb	r2, [r3, #0]
      break;
 8004986:	e01b      	b.n	80049c0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2204      	movs	r2, #4
 800498c:	701a      	strb	r2, [r3, #0]
      break;
 800498e:	e017      	b.n	80049c0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2205      	movs	r2, #5
 8004994:	701a      	strb	r2, [r3, #0]
      break;
 8004996:	e013      	b.n	80049c0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2206      	movs	r2, #6
 800499c:	701a      	strb	r2, [r3, #0]
      break;
 800499e:	e00f      	b.n	80049c0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2207      	movs	r2, #7
 80049a4:	701a      	strb	r2, [r3, #0]
      break;
 80049a6:	e00b      	b.n	80049c0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2208      	movs	r2, #8
 80049ac:	701a      	strb	r2, [r3, #0]
      break;
 80049ae:	e007      	b.n	80049c0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2209      	movs	r2, #9
 80049b4:	701a      	strb	r2, [r3, #0]
      break;
 80049b6:	e003      	b.n	80049c0 <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2280      	movs	r2, #128	@ 0x80
 80049bc:	701a      	strb	r2, [r3, #0]
      break;
 80049be:	bf00      	nop
  }

  return ret;
 80049c0:	697b      	ldr	r3, [r7, #20]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop

080049cc <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 80049d8:	f107 0208 	add.w	r2, r7, #8
 80049dc:	2301      	movs	r3, #1
 80049de:	2103      	movs	r1, #3
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff fed7 	bl	8004794 <stts751_read_reg>
 80049e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10f      	bne.n	8004a0e <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 80049ee:	78fb      	ldrb	r3, [r7, #3]
 80049f0:	f003 0303 	and.w	r3, r3, #3
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	7a3b      	ldrb	r3, [r7, #8]
 80049f8:	f362 0383 	bfi	r3, r2, #2, #2
 80049fc:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 80049fe:	f107 0208 	add.w	r2, r7, #8
 8004a02:	2301      	movs	r3, #1
 8004a04:	2103      	movs	r1, #3
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff fedc 	bl	80047c4 <stts751_write_reg>
 8004a0c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8004a22:	f107 0208 	add.w	r2, r7, #8
 8004a26:	2301      	movs	r3, #1
 8004a28:	2103      	movs	r1, #3
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff feb2 	bl	8004794 <stts751_read_reg>
 8004a30:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 8004a32:	7a3b      	ldrb	r3, [r7, #8]
 8004a34:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	d81a      	bhi.n	8004a74 <stts751_resolution_get+0x5c>
 8004a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a44 <stts751_resolution_get+0x2c>)
 8004a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a44:	08004a5d 	.word	0x08004a5d
 8004a48:	08004a65 	.word	0x08004a65
 8004a4c:	08004a55 	.word	0x08004a55
 8004a50:	08004a6d 	.word	0x08004a6d
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2202      	movs	r2, #2
 8004a58:	701a      	strb	r2, [r3, #0]
      break;
 8004a5a:	e00f      	b.n	8004a7c <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	701a      	strb	r2, [r3, #0]
      break;
 8004a62:	e00b      	b.n	8004a7c <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2201      	movs	r2, #1
 8004a68:	701a      	strb	r2, [r3, #0]
      break;
 8004a6a:	e007      	b.n	8004a7c <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	2203      	movs	r2, #3
 8004a70:	701a      	strb	r2, [r3, #0]
      break;
 8004a72:	e003      	b.n	8004a7c <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2202      	movs	r2, #2
 8004a78:	701a      	strb	r2, [r3, #0]
      break;
 8004a7a:	bf00      	nop
  }

  return ret;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop

08004a88 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8004a92:	f107 0308 	add.w	r3, r7, #8
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	2301      	movs	r3, #1
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff fe79 	bl	8004794 <stts751_read_reg>
 8004aa2:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d117      	bne.n	8004ada <stts751_temperature_raw_get+0x52>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 8004aaa:	f107 0208 	add.w	r2, r7, #8
 8004aae:	2301      	movs	r3, #1
 8004ab0:	2102      	movs	r1, #2
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7ff fe6e 	bl	8004794 <stts751_read_reg>
 8004ab8:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 8004aba:	7a7b      	ldrb	r3, [r7, #9]
 8004abc:	b21a      	sxth	r2, r3
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	021b      	lsls	r3, r3, #8
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	7a3a      	ldrb	r2, [r7, #8]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	b21a      	sxth	r2, r3
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8004ada:	68fb      	ldr	r3, [r7, #12]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8004af0:	f107 0208 	add.w	r2, r7, #8
 8004af4:	2301      	movs	r3, #1
 8004af6:	2103      	movs	r1, #3
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff fe4b 	bl	8004794 <stts751_read_reg>
 8004afe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10f      	bne.n	8004b26 <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 8004b06:	78fb      	ldrb	r3, [r7, #3]
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	7a3b      	ldrb	r3, [r7, #8]
 8004b10:	f362 13c7 	bfi	r3, r2, #7, #1
 8004b14:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8004b16:	f107 0208 	add.w	r2, r7, #8
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	2103      	movs	r1, #3
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff fe50 	bl	80047c4 <stts751_write_reg>
 8004b24:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004b26:	68fb      	ldr	r3, [r7, #12]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	21fd      	movs	r1, #253	@ 0xfd
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff fe27 	bl	8004794 <stts751_read_reg>
 8004b46:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d107      	bne.n	8004b5e <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	2301      	movs	r3, #1
 8004b54:	21fe      	movs	r1, #254	@ 0xfe
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7ff fe1c 	bl	8004794 <stts751_read_reg>
 8004b5c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d107      	bne.n	8004b74 <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	1c9a      	adds	r2, r3, #2
 8004b68:	2301      	movs	r3, #1
 8004b6a:	21ff      	movs	r1, #255	@ 0xff
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff fe11 	bl	8004794 <stts751_read_reg>
 8004b72:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 8004b74:	68fb      	ldr	r3, [r7, #12]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08c      	sub	sp, #48	@ 0x30
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t function = ENV_TEMPERATURE;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 8004b92:	2300      	movs	r3, #0
 8004b94:	623b      	str	r3, [r7, #32]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d07c      	beq.n	8004c96 <IKS01A3_ENV_SENSOR_Init+0x116>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	f200 80b2 	bhi.w	8004d08 <IKS01A3_ENV_SENSOR_Init+0x188>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <IKS01A3_ENV_SENSOR_Init+0x32>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d039      	beq.n	8004c24 <IKS01A3_ENV_SENSOR_Init+0xa4>
 8004bb0:	e0aa      	b.n	8004d08 <IKS01A3_ENV_SENSOR_Init+0x188>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8004bb2:	6838      	ldr	r0, [r7, #0]
 8004bb4:	f000 f934 	bl	8004e20 <HTS221_0_Probe>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8004bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc2:	e0df      	b.n	8004d84 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004bc4:	4a71      	ldr	r2, [pc, #452]	@ (8004d8c <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	4970      	ldr	r1, [pc, #448]	@ (8004d90 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004bd6:	f107 0108 	add.w	r1, r7, #8
 8004bda:	4610      	mov	r0, r2
 8004bdc:	4798      	blx	r3
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004be4:	f06f 0306 	mvn.w	r3, #6
 8004be8:	e0cc      	b.n	8004d84 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 8004bea:	7a3b      	ldrb	r3, [r7, #8]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d103      	bne.n	8004bf8 <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	f043 0301 	orr.w	r3, r3, #1
 8004bf6:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8004bf8:	7abb      	ldrb	r3, [r7, #10]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d103      	bne.n	8004c06 <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	f043 0304 	orr.w	r3, r3, #4
 8004c04:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8004c06:	7a7b      	ldrb	r3, [r7, #9]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d103      	bne.n	8004c14 <IKS01A3_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	f043 0302 	orr.w	r3, r3, #2
 8004c12:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8004c14:	7afb      	ldrb	r3, [r7, #11]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d17a      	bne.n	8004d10 <IKS01A3_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	f043 0308 	orr.w	r3, r3, #8
 8004c20:	623b      	str	r3, [r7, #32]
      }
      break;
 8004c22:	e075      	b.n	8004d10 <IKS01A3_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8004c24:	6838      	ldr	r0, [r7, #0]
 8004c26:	f000 f9c5 	bl	8004fb4 <LPS22HH_0_Probe>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <IKS01A3_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 8004c30:	f04f 33ff 	mov.w	r3, #4294967295
 8004c34:	e0a6      	b.n	8004d84 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004c36:	4a55      	ldr	r2, [pc, #340]	@ (8004d8c <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	4953      	ldr	r1, [pc, #332]	@ (8004d90 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004c48:	f107 0108 	add.w	r1, r7, #8
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	4798      	blx	r3
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004c56:	f06f 0306 	mvn.w	r3, #6
 8004c5a:	e093      	b.n	8004d84 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 8004c5c:	7a3b      	ldrb	r3, [r7, #8]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d103      	bne.n	8004c6a <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	f043 0301 	orr.w	r3, r3, #1
 8004c68:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8004c6a:	7abb      	ldrb	r3, [r7, #10]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d103      	bne.n	8004c78 <IKS01A3_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	f043 0304 	orr.w	r3, r3, #4
 8004c76:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8004c78:	7a7b      	ldrb	r3, [r7, #9]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d103      	bne.n	8004c86 <IKS01A3_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	f043 0302 	orr.w	r3, r3, #2
 8004c84:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8004c86:	7afb      	ldrb	r3, [r7, #11]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d143      	bne.n	8004d14 <IKS01A3_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	f043 0308 	orr.w	r3, r3, #8
 8004c92:	623b      	str	r3, [r7, #32]
      }
      break;
 8004c94:	e03e      	b.n	8004d14 <IKS01A3_ENV_SENSOR_Init+0x194>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 8004c96:	6838      	ldr	r0, [r7, #0]
 8004c98:	f000 fa58 	bl	800514c <STTS751_0_Probe>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <IKS01A3_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 8004ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca6:	e06d      	b.n	8004d84 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004ca8:	4a38      	ldr	r2, [pc, #224]	@ (8004d8c <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	4937      	ldr	r1, [pc, #220]	@ (8004d90 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004cba:	f107 0108 	add.w	r1, r7, #8
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	4798      	blx	r3
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d002      	beq.n	8004cce <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004cc8:	f06f 0306 	mvn.w	r3, #6
 8004ccc:	e05a      	b.n	8004d84 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 8004cce:	7a3b      	ldrb	r3, [r7, #8]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d103      	bne.n	8004cdc <IKS01A3_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	f043 0301 	orr.w	r3, r3, #1
 8004cda:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8004cdc:	7abb      	ldrb	r3, [r7, #10]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d103      	bne.n	8004cea <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	f043 0304 	orr.w	r3, r3, #4
 8004ce8:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8004cea:	7a7b      	ldrb	r3, [r7, #9]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d103      	bne.n	8004cf8 <IKS01A3_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	f043 0302 	orr.w	r3, r3, #2
 8004cf6:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8004cf8:	7afb      	ldrb	r3, [r7, #11]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d10c      	bne.n	8004d18 <IKS01A3_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	f043 0308 	orr.w	r3, r3, #8
 8004d04:	623b      	str	r3, [r7, #32]
      }
      break;
 8004d06:	e007      	b.n	8004d18 <IKS01A3_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8004d08:	f06f 0301 	mvn.w	r3, #1
 8004d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8004d0e:	e004      	b.n	8004d1a <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8004d10:	bf00      	nop
 8004d12:	e002      	b.n	8004d1a <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8004d14:	bf00      	nop
 8004d16:	e000      	b.n	8004d1a <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8004d18:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8004d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <IKS01A3_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 8004d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d22:	e02f      	b.n	8004d84 <IKS01A3_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8004d24:	2300      	movs	r3, #0
 8004d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d28:	e028      	b.n	8004d7c <IKS01A3_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2e:	4013      	ands	r3, r2
 8004d30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d11c      	bne.n	8004d70 <IKS01A3_ENV_SENSOR_Init+0x1f0>
 8004d36:	6a3a      	ldr	r2, [r7, #32]
 8004d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d116      	bne.n	8004d70 <IKS01A3_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8004d42:	4a14      	ldr	r2, [pc, #80]	@ (8004d94 <IKS01A3_ENV_SENSOR_Init+0x214>)
 8004d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d4a:	4913      	ldr	r1, [pc, #76]	@ (8004d98 <IKS01A3_ENV_SENSOR_Init+0x218>)
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	0092      	lsls	r2, r2, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	490d      	ldr	r1, [pc, #52]	@ (8004d90 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004d60:	4610      	mov	r0, r2
 8004d62:	4798      	blx	r3
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <IKS01A3_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8004d6a:	f06f 0304 	mvn.w	r3, #4
 8004d6e:	e009      	b.n	8004d84 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
    }

    function = function << 1;
 8004d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8004d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d78:	3301      	adds	r3, #1
 8004d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7e:	2b03      	cmp	r3, #3
 8004d80:	d9d3      	bls.n	8004d2a <IKS01A3_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 8004d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3730      	adds	r7, #48	@ 0x30
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	20000504 	.word	0x20000504
 8004d90:	200004c8 	.word	0x200004c8
 8004d94:	200000dc 	.word	0x200000dc
 8004d98:	200004d4 	.word	0x200004d4

08004d9c <IKS01A3_ENV_SENSOR_GetValue>:
  * @param  Function Environmental sensor function
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d903      	bls.n	8004db6 <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004dae:	f06f 0301 	mvn.w	r3, #1
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	e027      	b.n	8004e06 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8004db6:	4a16      	ldr	r2, [pc, #88]	@ (8004e10 <IKS01A3_ENV_SENSOR_GetValue+0x74>)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d11b      	bne.n	8004e00 <IKS01A3_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8004dc8:	4a12      	ldr	r2, [pc, #72]	@ (8004e14 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd0:	4911      	ldr	r1, [pc, #68]	@ (8004e18 <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	0092      	lsls	r2, r2, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	490f      	ldr	r1, [pc, #60]	@ (8004e1c <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	4610      	mov	r0, r2
 8004dea:	4798      	blx	r3
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <IKS01A3_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004df2:	f06f 0304 	mvn.w	r3, #4
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	e005      	b.n	8004e06 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	617b      	str	r3, [r7, #20]
 8004dfe:	e002      	b.n	8004e06 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8004e00:	f06f 0301 	mvn.w	r3, #1
 8004e04:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004e06:	697b      	ldr	r3, [r7, #20]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	20000510 	.word	0x20000510
 8004e14:	200000dc 	.word	0x200000dc
 8004e18:	200004d4 	.word	0x200004d4
 8004e1c:	200004c8 	.word	0x200004c8

08004e20 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b092      	sub	sp, #72	@ 0x48
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	647b      	str	r3, [r7, #68]	@ 0x44
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8004e30:	23bf      	movs	r3, #191	@ 0xbf
 8004e32:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8004e36:	4b51      	ldr	r3, [pc, #324]	@ (8004f7c <HTS221_0_Probe+0x15c>)
 8004e38:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8004e3a:	4b51      	ldr	r3, [pc, #324]	@ (8004f80 <HTS221_0_Probe+0x160>)
 8004e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8004e3e:	4b51      	ldr	r3, [pc, #324]	@ (8004f84 <HTS221_0_Probe+0x164>)
 8004e40:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8004e42:	4b51      	ldr	r3, [pc, #324]	@ (8004f88 <HTS221_0_Probe+0x168>)
 8004e44:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 8004e46:	4b51      	ldr	r3, [pc, #324]	@ (8004f8c <HTS221_0_Probe+0x16c>)
 8004e48:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8004e4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e4e:	4619      	mov	r1, r3
 8004e50:	484f      	ldr	r0, [pc, #316]	@ (8004f90 <HTS221_0_Probe+0x170>)
 8004e52:	f7fd fd57 	bl	8002904 <HTS221_RegisterBusIO>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004e5c:	f06f 0306 	mvn.w	r3, #6
 8004e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e62:	e085      	b.n	8004f70 <HTS221_0_Probe+0x150>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8004e64:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4849      	ldr	r0, [pc, #292]	@ (8004f90 <HTS221_0_Probe+0x170>)
 8004e6c:	f7fd fdd3 	bl	8002a16 <HTS221_ReadID>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004e76:	f06f 0306 	mvn.w	r3, #6
 8004e7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e7c:	e078      	b.n	8004f70 <HTS221_0_Probe+0x150>
  }
  else if (id != HTS221_ID)
 8004e7e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e82:	2bbc      	cmp	r3, #188	@ 0xbc
 8004e84:	d003      	beq.n	8004e8e <HTS221_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004e86:	f06f 0306 	mvn.w	r3, #6
 8004e8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e8c:	e070      	b.n	8004f70 <HTS221_0_Probe+0x150>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8004e8e:	f107 0308 	add.w	r3, r7, #8
 8004e92:	4619      	mov	r1, r3
 8004e94:	483e      	ldr	r0, [pc, #248]	@ (8004f90 <HTS221_0_Probe+0x170>)
 8004e96:	f7fd fdd5 	bl	8002a44 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 8004e9a:	7a3b      	ldrb	r3, [r7, #8]
 8004e9c:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 8004e9e:	7a7b      	ldrb	r3, [r7, #9]
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 8004ea4:	7abb      	ldrb	r3, [r7, #10]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 8004eaa:	7afb      	ldrb	r3, [r7, #11]
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 8004eb0:	4a38      	ldr	r2, [pc, #224]	@ (8004f94 <HTS221_0_Probe+0x174>)
 8004eb2:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 8004eb4:	4b38      	ldr	r3, [pc, #224]	@ (8004f98 <HTS221_0_Probe+0x178>)
 8004eb6:	4a36      	ldr	r2, [pc, #216]	@ (8004f90 <HTS221_0_Probe+0x170>)
 8004eb8:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8004eba:	4b38      	ldr	r3, [pc, #224]	@ (8004f9c <HTS221_0_Probe+0x17c>)
 8004ebc:	4a38      	ldr	r2, [pc, #224]	@ (8004fa0 <HTS221_0_Probe+0x180>)
 8004ebe:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8004ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d11d      	bne.n	8004f02 <HTS221_0_Probe+0xe2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d018      	beq.n	8004f02 <HTS221_0_Probe+0xe2>
 8004ed0:	7a3b      	ldrb	r3, [r7, #8]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d115      	bne.n	8004f02 <HTS221_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8004ed6:	4b33      	ldr	r3, [pc, #204]	@ (8004fa4 <HTS221_0_Probe+0x184>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	4a33      	ldr	r2, [pc, #204]	@ (8004fa8 <HTS221_0_Probe+0x188>)
 8004edc:	4933      	ldr	r1, [pc, #204]	@ (8004fac <HTS221_0_Probe+0x18c>)
 8004ede:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8004ee2:	4b2e      	ldr	r3, [pc, #184]	@ (8004f9c <HTS221_0_Probe+0x17c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8004f98 <HTS221_0_Probe+0x178>)
 8004eea:	6812      	ldr	r2, [r2, #0]
 8004eec:	4610      	mov	r0, r2
 8004eee:	4798      	blx	r3
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HTS221_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004ef6:	f06f 0304 	mvn.w	r3, #4
 8004efa:	647b      	str	r3, [r7, #68]	@ 0x44
 8004efc:	e001      	b.n	8004f02 <HTS221_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004efe:	2300      	movs	r3, #0
 8004f00:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8004f02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d11d      	bne.n	8004f44 <HTS221_0_Probe+0x124>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d018      	beq.n	8004f44 <HTS221_0_Probe+0x124>
 8004f12:	7abb      	ldrb	r3, [r7, #10]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d115      	bne.n	8004f44 <HTS221_0_Probe+0x124>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8004f18:	4b22      	ldr	r3, [pc, #136]	@ (8004fa4 <HTS221_0_Probe+0x184>)
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	4a22      	ldr	r2, [pc, #136]	@ (8004fa8 <HTS221_0_Probe+0x188>)
 8004f1e:	4924      	ldr	r1, [pc, #144]	@ (8004fb0 <HTS221_0_Probe+0x190>)
 8004f20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8004f24:	4b1d      	ldr	r3, [pc, #116]	@ (8004f9c <HTS221_0_Probe+0x17c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8004f98 <HTS221_0_Probe+0x178>)
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	4610      	mov	r0, r2
 8004f30:	4798      	blx	r3
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HTS221_0_Probe+0x120>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004f38:	f06f 0304 	mvn.w	r3, #4
 8004f3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f3e:	e001      	b.n	8004f44 <HTS221_0_Probe+0x124>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8004f40:	2300      	movs	r3, #0
 8004f42:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8004f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d107      	bne.n	8004f5a <HTS221_0_Probe+0x13a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <HTS221_0_Probe+0x13a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004f54:	f06f 0304 	mvn.w	r3, #4
 8004f58:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8004f5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d107      	bne.n	8004f70 <HTS221_0_Probe+0x150>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <HTS221_0_Probe+0x150>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004f6a:	f06f 0304 	mvn.w	r3, #4
 8004f6e:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 8004f70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3748      	adds	r7, #72	@ 0x48
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	08002471 	.word	0x08002471
 8004f80:	080024d5 	.word	0x080024d5
 8004f84:	08002589 	.word	0x08002589
 8004f88:	08002525 	.word	0x08002525
 8004f8c:	080025ed 	.word	0x080025ed
 8004f90:	2000051c 	.word	0x2000051c
 8004f94:	20000510 	.word	0x20000510
 8004f98:	200004c8 	.word	0x200004c8
 8004f9c:	20000504 	.word	0x20000504
 8004fa0:	20000048 	.word	0x20000048
 8004fa4:	200000dc 	.word	0x200000dc
 8004fa8:	200004d4 	.word	0x200004d4
 8004fac:	2000006c 	.word	0x2000006c
 8004fb0:	20000058 	.word	0x20000058

08004fb4 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b092      	sub	sp, #72	@ 0x48
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 8004fc4:	23bb      	movs	r3, #187	@ 0xbb
 8004fc6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8004fca:	4b52      	ldr	r3, [pc, #328]	@ (8005114 <LPS22HH_0_Probe+0x160>)
 8004fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8004fce:	4b52      	ldr	r3, [pc, #328]	@ (8005118 <LPS22HH_0_Probe+0x164>)
 8004fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8004fd2:	4b52      	ldr	r3, [pc, #328]	@ (800511c <LPS22HH_0_Probe+0x168>)
 8004fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8004fd6:	4b52      	ldr	r3, [pc, #328]	@ (8005120 <LPS22HH_0_Probe+0x16c>)
 8004fd8:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 8004fda:	4b52      	ldr	r3, [pc, #328]	@ (8005124 <LPS22HH_0_Probe+0x170>)
 8004fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8004fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4850      	ldr	r0, [pc, #320]	@ (8005128 <LPS22HH_0_Probe+0x174>)
 8004fe6:	f7fe faad 	bl	8003544 <LPS22HH_RegisterBusIO>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004ff0:	f06f 0306 	mvn.w	r3, #6
 8004ff4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ff6:	e087      	b.n	8005108 <LPS22HH_0_Probe+0x154>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8004ff8:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	484a      	ldr	r0, [pc, #296]	@ (8005128 <LPS22HH_0_Probe+0x174>)
 8005000:	f7fe fb49 	bl	8003696 <LPS22HH_ReadID>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800500a:	f06f 0306 	mvn.w	r3, #6
 800500e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005010:	e07a      	b.n	8005108 <LPS22HH_0_Probe+0x154>
  }
  else if (id != LPS22HH_ID)
 8005012:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005016:	2bb3      	cmp	r3, #179	@ 0xb3
 8005018:	d003      	beq.n	8005022 <LPS22HH_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800501a:	f06f 0306 	mvn.w	r3, #6
 800501e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005020:	e072      	b.n	8005108 <LPS22HH_0_Probe+0x154>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 8005022:	f107 0308 	add.w	r3, r7, #8
 8005026:	4619      	mov	r1, r3
 8005028:	483f      	ldr	r0, [pc, #252]	@ (8005128 <LPS22HH_0_Probe+0x174>)
 800502a:	f7fe fb4b 	bl	80036c4 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 800502e:	7a3b      	ldrb	r3, [r7, #8]
 8005030:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 8005032:	7a7b      	ldrb	r3, [r7, #9]
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 8005038:	7abb      	ldrb	r3, [r7, #10]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 800503e:	7afb      	ldrb	r3, [r7, #11]
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 8005044:	4a39      	ldr	r2, [pc, #228]	@ (800512c <LPS22HH_0_Probe+0x178>)
 8005046:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 8005048:	4b39      	ldr	r3, [pc, #228]	@ (8005130 <LPS22HH_0_Probe+0x17c>)
 800504a:	4a37      	ldr	r2, [pc, #220]	@ (8005128 <LPS22HH_0_Probe+0x174>)
 800504c:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 800504e:	4b39      	ldr	r3, [pc, #228]	@ (8005134 <LPS22HH_0_Probe+0x180>)
 8005050:	4a39      	ldr	r2, [pc, #228]	@ (8005138 <LPS22HH_0_Probe+0x184>)
 8005052:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8005054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005056:	2b00      	cmp	r3, #0
 8005058:	d11e      	bne.n	8005098 <LPS22HH_0_Probe+0xe4>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d019      	beq.n	8005098 <LPS22HH_0_Probe+0xe4>
 8005064:	7a3b      	ldrb	r3, [r7, #8]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d116      	bne.n	8005098 <LPS22HH_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 800506a:	4b34      	ldr	r3, [pc, #208]	@ (800513c <LPS22HH_0_Probe+0x188>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	4a34      	ldr	r2, [pc, #208]	@ (8005140 <LPS22HH_0_Probe+0x18c>)
 8005070:	3304      	adds	r3, #4
 8005072:	4934      	ldr	r1, [pc, #208]	@ (8005144 <LPS22HH_0_Probe+0x190>)
 8005074:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8005078:	4b2e      	ldr	r3, [pc, #184]	@ (8005134 <LPS22HH_0_Probe+0x180>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a2c      	ldr	r2, [pc, #176]	@ (8005130 <LPS22HH_0_Probe+0x17c>)
 8005080:	6852      	ldr	r2, [r2, #4]
 8005082:	4610      	mov	r0, r2
 8005084:	4798      	blx	r3
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <LPS22HH_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800508c:	f06f 0304 	mvn.w	r3, #4
 8005090:	647b      	str	r3, [r7, #68]	@ 0x44
 8005092:	e001      	b.n	8005098 <LPS22HH_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005094:	2300      	movs	r3, #0
 8005096:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8005098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800509a:	2b00      	cmp	r3, #0
 800509c:	d11e      	bne.n	80050dc <LPS22HH_0_Probe+0x128>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d019      	beq.n	80050dc <LPS22HH_0_Probe+0x128>
 80050a8:	7a7b      	ldrb	r3, [r7, #9]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d116      	bne.n	80050dc <LPS22HH_0_Probe+0x128>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 80050ae:	4b23      	ldr	r3, [pc, #140]	@ (800513c <LPS22HH_0_Probe+0x188>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	4a23      	ldr	r2, [pc, #140]	@ (8005140 <LPS22HH_0_Probe+0x18c>)
 80050b4:	3304      	adds	r3, #4
 80050b6:	4924      	ldr	r1, [pc, #144]	@ (8005148 <LPS22HH_0_Probe+0x194>)
 80050b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 80050bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005134 <LPS22HH_0_Probe+0x180>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005130 <LPS22HH_0_Probe+0x17c>)
 80050c4:	6852      	ldr	r2, [r2, #4]
 80050c6:	4610      	mov	r0, r2
 80050c8:	4798      	blx	r3
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <LPS22HH_0_Probe+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80050d0:	f06f 0304 	mvn.w	r3, #4
 80050d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80050d6:	e001      	b.n	80050dc <LPS22HH_0_Probe+0x128>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80050d8:	2300      	movs	r3, #0
 80050da:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 80050dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d107      	bne.n	80050f2 <LPS22HH_0_Probe+0x13e>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <LPS22HH_0_Probe+0x13e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80050ec:	f06f 0304 	mvn.w	r3, #4
 80050f0:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 80050f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d107      	bne.n	8005108 <LPS22HH_0_Probe+0x154>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f003 0308 	and.w	r3, r3, #8
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d002      	beq.n	8005108 <LPS22HH_0_Probe+0x154>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005102:	f06f 0304 	mvn.w	r3, #4
 8005106:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 8005108:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800510a:	4618      	mov	r0, r3
 800510c:	3748      	adds	r7, #72	@ 0x48
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	08002471 	.word	0x08002471
 8005118:	080024d5 	.word	0x080024d5
 800511c:	08002589 	.word	0x08002589
 8005120:	08002525 	.word	0x08002525
 8005124:	080025ed 	.word	0x080025ed
 8005128:	20000550 	.word	0x20000550
 800512c:	20000510 	.word	0x20000510
 8005130:	200004c8 	.word	0x200004c8
 8005134:	20000504 	.word	0x20000504
 8005138:	20000080 	.word	0x20000080
 800513c:	200000dc 	.word	0x200000dc
 8005140:	200004d4 	.word	0x200004d4
 8005144:	200000a4 	.word	0x200000a4
 8005148:	20000090 	.word	0x20000090

0800514c <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b092      	sub	sp, #72	@ 0x48
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8005154:	2300      	movs	r3, #0
 8005156:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 8005158:	2300      	movs	r3, #0
 800515a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 800515c:	2395      	movs	r3, #149	@ 0x95
 800515e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005162:	4b46      	ldr	r3, [pc, #280]	@ (800527c <STTS751_0_Probe+0x130>)
 8005164:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8005166:	4b46      	ldr	r3, [pc, #280]	@ (8005280 <STTS751_0_Probe+0x134>)
 8005168:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800516a:	4b46      	ldr	r3, [pc, #280]	@ (8005284 <STTS751_0_Probe+0x138>)
 800516c:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800516e:	4b46      	ldr	r3, [pc, #280]	@ (8005288 <STTS751_0_Probe+0x13c>)
 8005170:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005172:	4b46      	ldr	r3, [pc, #280]	@ (800528c <STTS751_0_Probe+0x140>)
 8005174:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8005176:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800517a:	4619      	mov	r1, r3
 800517c:	4844      	ldr	r0, [pc, #272]	@ (8005290 <STTS751_0_Probe+0x144>)
 800517e:	f7ff f81f 	bl	80041c0 <STTS751_RegisterBusIO>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005188:	f06f 0306 	mvn.w	r3, #6
 800518c:	647b      	str	r3, [r7, #68]	@ 0x44
 800518e:	e070      	b.n	8005272 <STTS751_0_Probe+0x126>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 8005190:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8005194:	4619      	mov	r1, r3
 8005196:	483e      	ldr	r0, [pc, #248]	@ (8005290 <STTS751_0_Probe+0x144>)
 8005198:	f7ff f8b1 	bl	80042fe <STTS751_ReadID>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80051a2:	f06f 0306 	mvn.w	r3, #6
 80051a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80051a8:	e063      	b.n	8005272 <STTS751_0_Probe+0x126>
  }
  else if (id != STTS751_ID_MAN)
 80051aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051ae:	2b53      	cmp	r3, #83	@ 0x53
 80051b0:	d003      	beq.n	80051ba <STTS751_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80051b2:	f06f 0306 	mvn.w	r3, #6
 80051b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80051b8:	e05b      	b.n	8005272 <STTS751_0_Probe+0x126>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 80051ba:	f107 0308 	add.w	r3, r7, #8
 80051be:	4619      	mov	r1, r3
 80051c0:	4833      	ldr	r0, [pc, #204]	@ (8005290 <STTS751_0_Probe+0x144>)
 80051c2:	f7ff f8b7 	bl	8004334 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 80051c6:	7a3b      	ldrb	r3, [r7, #8]
 80051c8:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 80051ca:	7a7b      	ldrb	r3, [r7, #9]
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 80051d0:	7abb      	ldrb	r3, [r7, #10]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 80051d6:	7afb      	ldrb	r3, [r7, #11]
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 80051dc:	4a2d      	ldr	r2, [pc, #180]	@ (8005294 <STTS751_0_Probe+0x148>)
 80051de:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 80051e0:	4b2d      	ldr	r3, [pc, #180]	@ (8005298 <STTS751_0_Probe+0x14c>)
 80051e2:	4a2b      	ldr	r2, [pc, #172]	@ (8005290 <STTS751_0_Probe+0x144>)
 80051e4:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 80051e6:	4b2d      	ldr	r3, [pc, #180]	@ (800529c <STTS751_0_Probe+0x150>)
 80051e8:	4a2d      	ldr	r2, [pc, #180]	@ (80052a0 <STTS751_0_Probe+0x154>)
 80051ea:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80051ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d11e      	bne.n	8005230 <STTS751_0_Probe+0xe4>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d019      	beq.n	8005230 <STTS751_0_Probe+0xe4>
 80051fc:	7a3b      	ldrb	r3, [r7, #8]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d116      	bne.n	8005230 <STTS751_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 8005202:	4b28      	ldr	r3, [pc, #160]	@ (80052a4 <STTS751_0_Probe+0x158>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	4a28      	ldr	r2, [pc, #160]	@ (80052a8 <STTS751_0_Probe+0x15c>)
 8005208:	3308      	adds	r3, #8
 800520a:	4928      	ldr	r1, [pc, #160]	@ (80052ac <STTS751_0_Probe+0x160>)
 800520c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 8005210:	4b22      	ldr	r3, [pc, #136]	@ (800529c <STTS751_0_Probe+0x150>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a20      	ldr	r2, [pc, #128]	@ (8005298 <STTS751_0_Probe+0x14c>)
 8005218:	6892      	ldr	r2, [r2, #8]
 800521a:	4610      	mov	r0, r2
 800521c:	4798      	blx	r3
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <STTS751_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005224:	f06f 0304 	mvn.w	r3, #4
 8005228:	647b      	str	r3, [r7, #68]	@ 0x44
 800522a:	e001      	b.n	8005230 <STTS751_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800522c:	2300      	movs	r3, #0
 800522e:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8005230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005232:	2b00      	cmp	r3, #0
 8005234:	d107      	bne.n	8005246 <STTS751_0_Probe+0xfa>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <STTS751_0_Probe+0xfa>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005240:	f06f 0304 	mvn.w	r3, #4
 8005244:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8005246:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005248:	2b00      	cmp	r3, #0
 800524a:	d107      	bne.n	800525c <STTS751_0_Probe+0x110>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <STTS751_0_Probe+0x110>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005256:	f06f 0304 	mvn.w	r3, #4
 800525a:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800525c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800525e:	2b00      	cmp	r3, #0
 8005260:	d107      	bne.n	8005272 <STTS751_0_Probe+0x126>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f003 0308 	and.w	r3, r3, #8
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <STTS751_0_Probe+0x126>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800526c:	f06f 0304 	mvn.w	r3, #4
 8005270:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 8005272:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8005274:	4618      	mov	r0, r3
 8005276:	3748      	adds	r7, #72	@ 0x48
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	08002471 	.word	0x08002471
 8005280:	080024d5 	.word	0x080024d5
 8005284:	08002589 	.word	0x08002589
 8005288:	08002525 	.word	0x08002525
 800528c:	080025ed 	.word	0x080025ed
 8005290:	20000584 	.word	0x20000584
 8005294:	20000510 	.word	0x20000510
 8005298:	200004c8 	.word	0x200004c8
 800529c:	20000504 	.word	0x20000504
 80052a0:	200000b8 	.word	0x200000b8
 80052a4:	200000dc 	.word	0x200000dc
 80052a8:	200004d4 	.word	0x200004d4
 80052ac:	200000c8 	.word	0x200000c8

080052b0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052ba:	2003      	movs	r0, #3
 80052bc:	f000 fef8 	bl	80060b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80052c0:	2000      	movs	r0, #0
 80052c2:	f000 f80d 	bl	80052e0 <HAL_InitTick>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	71fb      	strb	r3, [r7, #7]
 80052d0:	e001      	b.n	80052d6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80052d2:	f7fc fb9d 	bl	8001a10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80052d6:	79fb      	ldrb	r3, [r7, #7]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80052ec:	4b16      	ldr	r3, [pc, #88]	@ (8005348 <HAL_InitTick+0x68>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d022      	beq.n	800533a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80052f4:	4b15      	ldr	r3, [pc, #84]	@ (800534c <HAL_InitTick+0x6c>)
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	4b13      	ldr	r3, [pc, #76]	@ (8005348 <HAL_InitTick+0x68>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005300:	fbb1 f3f3 	udiv	r3, r1, r3
 8005304:	fbb2 f3f3 	udiv	r3, r2, r3
 8005308:	4618      	mov	r0, r3
 800530a:	f000 ff06 	bl	800611a <HAL_SYSTICK_Config>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10f      	bne.n	8005334 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b0f      	cmp	r3, #15
 8005318:	d809      	bhi.n	800532e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800531a:	2200      	movs	r2, #0
 800531c:	6879      	ldr	r1, [r7, #4]
 800531e:	f04f 30ff 	mov.w	r0, #4294967295
 8005322:	f000 fed0 	bl	80060c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005326:	4a0a      	ldr	r2, [pc, #40]	@ (8005350 <HAL_InitTick+0x70>)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	e007      	b.n	800533e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	73fb      	strb	r3, [r7, #15]
 8005332:	e004      	b.n	800533e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	73fb      	strb	r3, [r7, #15]
 8005338:	e001      	b.n	800533e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800533e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	20000104 	.word	0x20000104
 800534c:	20000044 	.word	0x20000044
 8005350:	20000100 	.word	0x20000100

08005354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005358:	4b05      	ldr	r3, [pc, #20]	@ (8005370 <HAL_IncTick+0x1c>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	4b05      	ldr	r3, [pc, #20]	@ (8005374 <HAL_IncTick+0x20>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4413      	add	r3, r2
 8005362:	4a03      	ldr	r2, [pc, #12]	@ (8005370 <HAL_IncTick+0x1c>)
 8005364:	6013      	str	r3, [r2, #0]
}
 8005366:	bf00      	nop
 8005368:	46bd      	mov	sp, r7
 800536a:	bc80      	pop	{r7}
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	200005bc 	.word	0x200005bc
 8005374:	20000104 	.word	0x20000104

08005378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
  return uwTick;
 800537c:	4b02      	ldr	r3, [pc, #8]	@ (8005388 <HAL_GetTick+0x10>)
 800537e:	681b      	ldr	r3, [r3, #0]
}
 8005380:	4618      	mov	r0, r3
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr
 8005388:	200005bc 	.word	0x200005bc

0800538c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005394:	f7ff fff0 	bl	8005378 <HAL_GetTick>
 8005398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a4:	d004      	beq.n	80053b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80053a6:	4b09      	ldr	r3, [pc, #36]	@ (80053cc <HAL_Delay+0x40>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4413      	add	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80053b0:	bf00      	nop
 80053b2:	f7ff ffe1 	bl	8005378 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d8f7      	bhi.n	80053b2 <HAL_Delay+0x26>
  {
  }
}
 80053c2:	bf00      	nop
 80053c4:	bf00      	nop
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	20000104 	.word	0x20000104

080053d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08e      	sub	sp, #56	@ 0x38
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053d8:	2300      	movs	r3, #0
 80053da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 80053de:	2300      	movs	r3, #0
 80053e0:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e127      	b.n	8005640 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d115      	bne.n	800542a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800540c:	4b8e      	ldr	r3, [pc, #568]	@ (8005648 <HAL_ADC_Init+0x278>)
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	4a8d      	ldr	r2, [pc, #564]	@ (8005648 <HAL_ADC_Init+0x278>)
 8005412:	f043 0301 	orr.w	r3, r3, #1
 8005416:	6213      	str	r3, [r2, #32]
 8005418:	4b8b      	ldr	r3, [pc, #556]	@ (8005648 <HAL_ADC_Init+0x278>)
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	60bb      	str	r3, [r7, #8]
 8005422:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7fc fb23 	bl	8001a70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800542e:	f003 0310 	and.w	r3, r3, #16
 8005432:	2b00      	cmp	r3, #0
 8005434:	f040 80ff 	bne.w	8005636 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800543c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005440:	f023 0302 	bic.w	r3, r3, #2
 8005444:	f043 0202 	orr.w	r2, r3, #2
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800544c:	4b7f      	ldr	r3, [pc, #508]	@ (800564c <HAL_ADC_Init+0x27c>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	497c      	ldr	r1, [pc, #496]	@ (800564c <HAL_ADC_Init+0x27c>)
 800545a:	4313      	orrs	r3, r2
 800545c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8005466:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800546e:	4619      	mov	r1, r3
 8005470:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005474:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	fa93 f3a3 	rbit	r3, r3
 800547c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	fab3 f383 	clz	r3, r3
 8005484:	b2db      	uxtb	r3, r3
 8005486:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800548a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005490:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005498:	4619      	mov	r1, r3
 800549a:	2302      	movs	r3, #2
 800549c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a0:	fa93 f3a3 	rbit	r3, r3
 80054a4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80054a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a8:	fab3 f383 	clz	r3, r3
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80054b2:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80054b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054b6:	4313      	orrs	r3, r2
 80054b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054be:	2b10      	cmp	r3, #16
 80054c0:	d007      	beq.n	80054d2 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80054ca:	4313      	orrs	r3, r2
 80054cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054ce:	4313      	orrs	r3, r2
 80054d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054dc:	2b40      	cmp	r3, #64	@ 0x40
 80054de:	d04f      	beq.n	8005580 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054e6:	4313      	orrs	r3, r2
 80054e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80054f2:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6912      	ldr	r2, [r2, #16]
 80054f8:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80054fc:	d003      	beq.n	8005506 <HAL_ADC_Init+0x136>
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6912      	ldr	r2, [r2, #16]
 8005502:	2a01      	cmp	r2, #1
 8005504:	d102      	bne.n	800550c <HAL_ADC_Init+0x13c>
 8005506:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800550a:	e000      	b.n	800550e <HAL_ADC_Init+0x13e>
 800550c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800550e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8005510:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005512:	4313      	orrs	r3, r2
 8005514:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800551c:	2b01      	cmp	r3, #1
 800551e:	d125      	bne.n	800556c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005526:	2b00      	cmp	r3, #0
 8005528:	d114      	bne.n	8005554 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800552e:	3b01      	subs	r3, #1
 8005530:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8005534:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	fa92 f2a2 	rbit	r2, r2
 800553c:	617a      	str	r2, [r7, #20]
  return result;
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	fab2 f282 	clz	r2, r2
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	4093      	lsls	r3, r2
 8005548:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800554c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800554e:	4313      	orrs	r3, r2
 8005550:	633b      	str	r3, [r7, #48]	@ 0x30
 8005552:	e00b      	b.n	800556c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005558:	f043 0220 	orr.w	r2, r3, #32
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005564:	f043 0201 	orr.w	r2, r3, #1
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	4b37      	ldr	r3, [pc, #220]	@ (8005650 <HAL_ADC_Init+0x280>)
 8005574:	4013      	ands	r3, r2
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6812      	ldr	r2, [r2, #0]
 800557a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800557c:	430b      	orrs	r3, r1
 800557e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	4b33      	ldr	r3, [pc, #204]	@ (8005654 <HAL_ADC_Init+0x284>)
 8005588:	4013      	ands	r3, r2
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6812      	ldr	r2, [r2, #0]
 800558e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005590:	430b      	orrs	r3, r1
 8005592:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800559c:	d003      	beq.n	80055a6 <HAL_ADC_Init+0x1d6>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d119      	bne.n	80055da <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ac:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b4:	3b01      	subs	r3, #1
 80055b6:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 80055ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	fa92 f2a2 	rbit	r2, r2
 80055c2:	60fa      	str	r2, [r7, #12]
  return result;
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	fab2 f282 	clz	r2, r2
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	fa03 f202 	lsl.w	r2, r3, r2
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80055d8:	e007      	b.n	80055ea <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 80055e8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	4b19      	ldr	r3, [pc, #100]	@ (8005658 <HAL_ADC_Init+0x288>)
 80055f2:	4013      	ands	r3, r2
 80055f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d10b      	bne.n	8005612 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005604:	f023 0303 	bic.w	r3, r3, #3
 8005608:	f043 0201 	orr.w	r2, r3, #1
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005610:	e014      	b.n	800563c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005616:	f023 0312 	bic.w	r3, r3, #18
 800561a:	f043 0210 	orr.w	r2, r3, #16
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005626:	f043 0201 	orr.w	r2, r3, #1
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005634:	e002      	b.n	800563c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 800563c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8005640:	4618      	mov	r0, r3
 8005642:	3738      	adds	r7, #56	@ 0x38
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40023800 	.word	0x40023800
 800564c:	40012700 	.word	0x40012700
 8005650:	fcfc16ff 	.word	0xfcfc16ff
 8005654:	c0fff189 	.word	0xc0fff189
 8005658:	bf80fffe 	.word	0xbf80fffe

0800565c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005666:	2300      	movs	r3, #0
 8005668:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005674:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005678:	d113      	bne.n	80056a2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005684:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005688:	d10b      	bne.n	80056a2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800568e:	f043 0220 	orr.w	r2, r3, #32
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e068      	b.n	8005774 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80056a2:	f7ff fe69 	bl	8005378 <HAL_GetTick>
 80056a6:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80056a8:	e021      	b.n	80056ee <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b0:	d01d      	beq.n	80056ee <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d007      	beq.n	80056c8 <HAL_ADC_PollForConversion+0x6c>
 80056b8:	f7ff fe5e 	bl	8005378 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d212      	bcs.n	80056ee <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10b      	bne.n	80056ee <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056da:	f043 0204 	orr.w	r2, r3, #4
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e042      	b.n	8005774 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0d6      	beq.n	80056aa <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d104      	bne.n	800570e <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f06f 0212 	mvn.w	r2, #18
 800570c:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005712:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d124      	bne.n	8005772 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800572e:	2b00      	cmp	r3, #0
 8005730:	d11f      	bne.n	8005772 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005738:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800573c:	2b00      	cmp	r3, #0
 800573e:	d006      	beq.n	800574e <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800574a:	2b00      	cmp	r3, #0
 800574c:	d111      	bne.n	8005772 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005752:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800575e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d105      	bne.n	8005772 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800576a:	f043 0201 	orr.w	r2, r3, #1
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005784:	2300      	movs	r3, #0
 8005786:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800578e:	2b01      	cmp	r3, #1
 8005790:	d101      	bne.n	8005796 <HAL_ADC_Start_IT+0x1a>
 8005792:	2302      	movs	r3, #2
 8005794:	e058      	b.n	8005848 <HAL_ADC_Start_IT+0xcc>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fb14 	bl	8005dcc <ADC_Enable>
 80057a4:	4603      	mov	r3, r0
 80057a6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d14b      	bne.n	8005846 <HAL_ADC_Start_IT+0xca>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057b2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80057b6:	f023 0301 	bic.w	r3, r3, #1
 80057ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d007      	beq.n	80057e0 <HAL_ADC_Start_IT+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80057d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ec:	d106      	bne.n	80057fc <HAL_ADC_Start_IT+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057f2:	f023 0206 	bic.w	r2, r3, #6
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	651a      	str	r2, [r3, #80]	@ 0x50
 80057fa:	e002      	b.n	8005802 <HAL_ADC_Start_IT+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005812:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	6812      	ldr	r2, [r2, #0]
 800581e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005822:	f043 0320 	orr.w	r3, r3, #32
 8005826:	6053      	str	r3, [r2, #4]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d107      	bne.n	8005846 <HAL_ADC_Start_IT+0xca>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005844:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005846:	7bfb      	ldrb	r3, [r7, #15]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005862:	2b01      	cmp	r3, #1
 8005864:	d101      	bne.n	800586a <HAL_ADC_Stop_IT+0x1a>
 8005866:	2302      	movs	r3, #2
 8005868:	e022      	b.n	80058b0 <HAL_ADC_Stop_IT+0x60>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fb06 	bl	8005e84 <ADC_ConversionStop_Disable>
 8005878:	4603      	mov	r3, r0
 800587a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d111      	bne.n	80058a6 <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0220 	bic.w	r2, r2, #32
 8005890:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005896:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800589a:	f023 0301 	bic.w	r3, r3, #1
 800589e:	f043 0201 	orr.w	r2, r3, #1
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bc80      	pop	{r7}
 80058ce:	4770      	bx	lr

080058d0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f003 0320 	and.w	r3, r3, #32
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d04c      	beq.n	800598c <HAL_ADC_IRQHandler+0xbc>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d047      	beq.n	800598c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005900:	f003 0310 	and.w	r3, r3, #16
 8005904:	2b00      	cmp	r3, #0
 8005906:	d105      	bne.n	8005914 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800590c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d12c      	bne.n	800597c <HAL_ADC_IRQHandler+0xac>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005928:	2b00      	cmp	r3, #0
 800592a:	d127      	bne.n	800597c <HAL_ADC_IRQHandler+0xac>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005932:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005936:	2b00      	cmp	r3, #0
 8005938:	d006      	beq.n	8005948 <HAL_ADC_IRQHandler+0x78>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005944:	2b00      	cmp	r3, #0
 8005946:	d119      	bne.n	800597c <HAL_ADC_IRQHandler+0xac>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 0220 	bic.w	r2, r2, #32
 8005956:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800595c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	64da      	str	r2, [r3, #76]	@ 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005968:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d105      	bne.n	800597c <HAL_ADC_IRQHandler+0xac>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005974:	f043 0201 	orr.w	r2, r3, #1
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f89e 	bl	8005abe <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f06f 0212 	mvn.w	r2, #18
 800598a:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005992:	2b00      	cmp	r3, #0
 8005994:	d05a      	beq.n	8005a4c <HAL_ADC_IRQHandler+0x17c>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b00      	cmp	r3, #0
 800599e:	d055      	beq.n	8005a4c <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059a4:	f003 0310 	and.w	r3, r3, #16
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d105      	bne.n	80059b8 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059b0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d13a      	bne.n	8005a3c <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059cc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d006      	beq.n	80059e2 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d12c      	bne.n	8005a3c <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d125      	bne.n	8005a3c <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d11e      	bne.n	8005a3c <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d119      	bne.n	8005a3c <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a16:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	64da      	str	r2, [r3, #76]	@ 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d105      	bne.n	8005a3c <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a34:	f043 0201 	orr.w	r2, r3, #1
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fa62 	bl	8005f06 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f06f 020c 	mvn.w	r2, #12
 8005a4a:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d012      	beq.n	8005a7c <HAL_ADC_IRQHandler+0x1ac>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00d      	beq.n	8005a7c <HAL_ADC_IRQHandler+0x1ac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a64:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	64da      	str	r2, [r3, #76]	@ 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f82f 	bl	8005ad0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f06f 0201 	mvn.w	r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if((tmp_cr1 & ADC_IT_OVR) == ADC_IT_OVR)
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d017      	beq.n	8005ab6 <HAL_ADC_IRQHandler+0x1e6>
  {
    if((tmp_sr & ADC_FLAG_OVR) == ADC_FLAG_OVR)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d012      	beq.n	8005ab6 <HAL_ADC_IRQHandler+0x1e6>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a94:	f043 0202 	orr.w	r2, r3, #2
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f06f 0220 	mvn.w	r2, #32
 8005aa4:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f81b 	bl	8005ae2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f06f 0220 	mvn.w	r2, #32
 8005ab4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8005ab6:	bf00      	nop
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bc80      	pop	{r7}
 8005ace:	4770      	bx	lr

08005ad0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bc80      	pop	{r7}
 8005ae0:	4770      	bx	lr

08005ae2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005aea:	bf00      	nop
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bc80      	pop	{r7}
 8005af2:	4770      	bx	lr

08005af4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_ADC_ConfigChannel+0x20>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e14f      	b.n	8005db4 <HAL_ADC_ConfigChannel+0x2c0>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2b06      	cmp	r3, #6
 8005b22:	d81c      	bhi.n	8005b5e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	3b05      	subs	r3, #5
 8005b36:	221f      	movs	r2, #31
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	43db      	mvns	r3, r3
 8005b3e:	4019      	ands	r1, r3
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	6818      	ldr	r0, [r3, #0]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	3b05      	subs	r3, #5
 8005b50:	fa00 f203 	lsl.w	r2, r0, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8005b5c:	e07e      	b.n	8005c5c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2b0c      	cmp	r3, #12
 8005b64:	d81c      	bhi.n	8005ba0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	4613      	mov	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	3b23      	subs	r3, #35	@ 0x23
 8005b78:	221f      	movs	r2, #31
 8005b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7e:	43db      	mvns	r3, r3
 8005b80:	4019      	ands	r1, r3
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	6818      	ldr	r0, [r3, #0]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	3b23      	subs	r3, #35	@ 0x23
 8005b92:	fa00 f203 	lsl.w	r2, r0, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005b9e:	e05d      	b.n	8005c5c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	2b12      	cmp	r3, #18
 8005ba6:	d81c      	bhi.n	8005be2 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	3b41      	subs	r3, #65	@ 0x41
 8005bba:	221f      	movs	r2, #31
 8005bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	4019      	ands	r1, r3
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	6818      	ldr	r0, [r3, #0]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	3b41      	subs	r3, #65	@ 0x41
 8005bd4:	fa00 f203 	lsl.w	r2, r0, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	639a      	str	r2, [r3, #56]	@ 0x38
 8005be0:	e03c      	b.n	8005c5c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	2b18      	cmp	r3, #24
 8005be8:	d81c      	bhi.n	8005c24 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	3b5f      	subs	r3, #95	@ 0x5f
 8005bfc:	221f      	movs	r2, #31
 8005bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005c02:	43db      	mvns	r3, r3
 8005c04:	4019      	ands	r1, r3
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	6818      	ldr	r0, [r3, #0]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	3b5f      	subs	r3, #95	@ 0x5f
 8005c16:	fa00 f203 	lsl.w	r2, r0, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	635a      	str	r2, [r3, #52]	@ 0x34
 8005c22:	e01b      	b.n	8005c5c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	3b7d      	subs	r3, #125	@ 0x7d
 8005c36:	221f      	movs	r2, #31
 8005c38:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3c:	43db      	mvns	r3, r3
 8005c3e:	4019      	ands	r1, r3
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	6818      	ldr	r0, [r3, #0]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	3b7d      	subs	r3, #125	@ 0x7d
 8005c50:	fa00 f203 	lsl.w	r2, r0, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b09      	cmp	r3, #9
 8005c62:	d81a      	bhi.n	8005c9a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6959      	ldr	r1, [r3, #20]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	4413      	add	r3, r2
 8005c74:	2207      	movs	r2, #7
 8005c76:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7a:	43db      	mvns	r3, r3
 8005c7c:	4019      	ands	r1, r3
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	6898      	ldr	r0, [r3, #8]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	4613      	mov	r3, r2
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	4413      	add	r3, r2
 8005c8c:	fa00 f203 	lsl.w	r2, r0, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	615a      	str	r2, [r3, #20]
 8005c98:	e05d      	b.n	8005d56 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b13      	cmp	r3, #19
 8005ca0:	d81c      	bhi.n	8005cdc <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6919      	ldr	r1, [r3, #16]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	4613      	mov	r3, r2
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	4413      	add	r3, r2
 8005cb2:	3b1e      	subs	r3, #30
 8005cb4:	2207      	movs	r2, #7
 8005cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cba:	43db      	mvns	r3, r3
 8005cbc:	4019      	ands	r1, r3
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	6898      	ldr	r0, [r3, #8]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	4413      	add	r3, r2
 8005ccc:	3b1e      	subs	r3, #30
 8005cce:	fa00 f203 	lsl.w	r2, r0, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	611a      	str	r2, [r3, #16]
 8005cda:	e03c      	b.n	8005d56 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b1d      	cmp	r3, #29
 8005ce2:	d81c      	bhi.n	8005d1e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68d9      	ldr	r1, [r3, #12]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	4413      	add	r3, r2
 8005cf4:	3b3c      	subs	r3, #60	@ 0x3c
 8005cf6:	2207      	movs	r2, #7
 8005cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfc:	43db      	mvns	r3, r3
 8005cfe:	4019      	ands	r1, r3
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	6898      	ldr	r0, [r3, #8]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	005b      	lsls	r3, r3, #1
 8005d0c:	4413      	add	r3, r2
 8005d0e:	3b3c      	subs	r3, #60	@ 0x3c
 8005d10:	fa00 f203 	lsl.w	r2, r0, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	60da      	str	r2, [r3, #12]
 8005d1c:	e01b      	b.n	8005d56 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	4413      	add	r3, r2
 8005d2e:	3b5a      	subs	r3, #90	@ 0x5a
 8005d30:	2207      	movs	r2, #7
 8005d32:	fa02 f303 	lsl.w	r3, r2, r3
 8005d36:	43db      	mvns	r3, r3
 8005d38:	4019      	ands	r1, r3
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	6898      	ldr	r0, [r3, #8]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	4613      	mov	r3, r2
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	4413      	add	r3, r2
 8005d48:	3b5a      	subs	r3, #90	@ 0x5a
 8005d4a:	fa00 f203 	lsl.w	r2, r0, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b10      	cmp	r3, #16
 8005d5c:	d003      	beq.n	8005d66 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005d62:	2b11      	cmp	r3, #17
 8005d64:	d121      	bne.n	8005daa <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8005d66:	4b16      	ldr	r3, [pc, #88]	@ (8005dc0 <HAL_ADC_ConfigChannel+0x2cc>)
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d11b      	bne.n	8005daa <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8005d72:	4b13      	ldr	r3, [pc, #76]	@ (8005dc0 <HAL_ADC_ConfigChannel+0x2cc>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	4a12      	ldr	r2, [pc, #72]	@ (8005dc0 <HAL_ADC_ConfigChannel+0x2cc>)
 8005d78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005d7c:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b10      	cmp	r3, #16
 8005d84:	d111      	bne.n	8005daa <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005d86:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc4 <HAL_ADC_ConfigChannel+0x2d0>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a0f      	ldr	r2, [pc, #60]	@ (8005dc8 <HAL_ADC_ConfigChannel+0x2d4>)
 8005d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d90:	0c9a      	lsrs	r2, r3, #18
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8005d9c:	e002      	b.n	8005da4 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	3b01      	subs	r3, #1
 8005da2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1f9      	bne.n	8005d9e <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bc80      	pop	{r7}
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	40012700 	.word	0x40012700
 8005dc4:	20000044 	.word	0x20000044
 8005dc8:	431bde83 	.word	0x431bde83

08005dcc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005de6:	2b40      	cmp	r3, #64	@ 0x40
 8005de8:	d043      	beq.n	8005e72 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f042 0201 	orr.w	r2, r2, #1
 8005df8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005dfa:	4b20      	ldr	r3, [pc, #128]	@ (8005e7c <ADC_Enable+0xb0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a20      	ldr	r2, [pc, #128]	@ (8005e80 <ADC_Enable+0xb4>)
 8005e00:	fba2 2303 	umull	r2, r3, r2, r3
 8005e04:	0c9a      	lsrs	r2, r3, #18
 8005e06:	4613      	mov	r3, r2
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	4413      	add	r3, r2
 8005e0c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8005e0e:	e002      	b.n	8005e16 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1f9      	bne.n	8005e10 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8005e1c:	f7ff faac 	bl	8005378 <HAL_GetTick>
 8005e20:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005e22:	e01f      	b.n	8005e64 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8005e24:	f7ff faa8 	bl	8005378 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d918      	bls.n	8005e64 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e3c:	2b40      	cmp	r3, #64	@ 0x40
 8005e3e:	d011      	beq.n	8005e64 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e44:	f043 0210 	orr.w	r2, r3, #16
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e50:	f043 0201 	orr.w	r2, r3, #1
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e007      	b.n	8005e74 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e6e:	2b40      	cmp	r3, #64	@ 0x40
 8005e70:	d1d8      	bne.n	8005e24 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	20000044 	.word	0x20000044
 8005e80:	431bde83 	.word	0x431bde83

08005e84 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e9a:	2b40      	cmp	r3, #64	@ 0x40
 8005e9c:	d12e      	bne.n	8005efc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0201 	bic.w	r2, r2, #1
 8005eac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005eae:	f7ff fa63 	bl	8005378 <HAL_GetTick>
 8005eb2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005eb4:	e01b      	b.n	8005eee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8005eb6:	f7ff fa5f 	bl	8005378 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d914      	bls.n	8005eee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ece:	2b40      	cmp	r3, #64	@ 0x40
 8005ed0:	d10d      	bne.n	8005eee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ed6:	f043 0210 	orr.w	r2, r3, #16
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ee2:	f043 0201 	orr.w	r2, r3, #1
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	651a      	str	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e007      	b.n	8005efe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef8:	2b40      	cmp	r3, #64	@ 0x40
 8005efa:	d0dc      	beq.n	8005eb6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b083      	sub	sp, #12
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bc80      	pop	{r7}
 8005f16:	4770      	bx	lr

08005f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f28:	4b0c      	ldr	r3, [pc, #48]	@ (8005f5c <__NVIC_SetPriorityGrouping+0x44>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005f34:	4013      	ands	r3, r2
 8005f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f4a:	4a04      	ldr	r2, [pc, #16]	@ (8005f5c <__NVIC_SetPriorityGrouping+0x44>)
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	60d3      	str	r3, [r2, #12]
}
 8005f50:	bf00      	nop
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bc80      	pop	{r7}
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	e000ed00 	.word	0xe000ed00

08005f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f64:	4b04      	ldr	r3, [pc, #16]	@ (8005f78 <__NVIC_GetPriorityGrouping+0x18>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	0a1b      	lsrs	r3, r3, #8
 8005f6a:	f003 0307 	and.w	r3, r3, #7
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	e000ed00 	.word	0xe000ed00

08005f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	4603      	mov	r3, r0
 8005f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	db0b      	blt.n	8005fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f8e:	79fb      	ldrb	r3, [r7, #7]
 8005f90:	f003 021f 	and.w	r2, r3, #31
 8005f94:	4906      	ldr	r1, [pc, #24]	@ (8005fb0 <__NVIC_EnableIRQ+0x34>)
 8005f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f9a:	095b      	lsrs	r3, r3, #5
 8005f9c:	2001      	movs	r0, #1
 8005f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8005fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bc80      	pop	{r7}
 8005fae:	4770      	bx	lr
 8005fb0:	e000e100 	.word	0xe000e100

08005fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	4603      	mov	r3, r0
 8005fbc:	6039      	str	r1, [r7, #0]
 8005fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	db0a      	blt.n	8005fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	490c      	ldr	r1, [pc, #48]	@ (8006000 <__NVIC_SetPriority+0x4c>)
 8005fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fd2:	0112      	lsls	r2, r2, #4
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	440b      	add	r3, r1
 8005fd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fdc:	e00a      	b.n	8005ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	4908      	ldr	r1, [pc, #32]	@ (8006004 <__NVIC_SetPriority+0x50>)
 8005fe4:	79fb      	ldrb	r3, [r7, #7]
 8005fe6:	f003 030f 	and.w	r3, r3, #15
 8005fea:	3b04      	subs	r3, #4
 8005fec:	0112      	lsls	r2, r2, #4
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	440b      	add	r3, r1
 8005ff2:	761a      	strb	r2, [r3, #24]
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bc80      	pop	{r7}
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	e000e100 	.word	0xe000e100
 8006004:	e000ed00 	.word	0xe000ed00

08006008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006008:	b480      	push	{r7}
 800600a:	b089      	sub	sp, #36	@ 0x24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f1c3 0307 	rsb	r3, r3, #7
 8006022:	2b04      	cmp	r3, #4
 8006024:	bf28      	it	cs
 8006026:	2304      	movcs	r3, #4
 8006028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	3304      	adds	r3, #4
 800602e:	2b06      	cmp	r3, #6
 8006030:	d902      	bls.n	8006038 <NVIC_EncodePriority+0x30>
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	3b03      	subs	r3, #3
 8006036:	e000      	b.n	800603a <NVIC_EncodePriority+0x32>
 8006038:	2300      	movs	r3, #0
 800603a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800603c:	f04f 32ff 	mov.w	r2, #4294967295
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	fa02 f303 	lsl.w	r3, r2, r3
 8006046:	43da      	mvns	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	401a      	ands	r2, r3
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006050:	f04f 31ff 	mov.w	r1, #4294967295
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	fa01 f303 	lsl.w	r3, r1, r3
 800605a:	43d9      	mvns	r1, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006060:	4313      	orrs	r3, r2
         );
}
 8006062:	4618      	mov	r0, r3
 8006064:	3724      	adds	r7, #36	@ 0x24
 8006066:	46bd      	mov	sp, r7
 8006068:	bc80      	pop	{r7}
 800606a:	4770      	bx	lr

0800606c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	3b01      	subs	r3, #1
 8006078:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800607c:	d301      	bcc.n	8006082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800607e:	2301      	movs	r3, #1
 8006080:	e00f      	b.n	80060a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006082:	4a0a      	ldr	r2, [pc, #40]	@ (80060ac <SysTick_Config+0x40>)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3b01      	subs	r3, #1
 8006088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800608a:	210f      	movs	r1, #15
 800608c:	f04f 30ff 	mov.w	r0, #4294967295
 8006090:	f7ff ff90 	bl	8005fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006094:	4b05      	ldr	r3, [pc, #20]	@ (80060ac <SysTick_Config+0x40>)
 8006096:	2200      	movs	r2, #0
 8006098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800609a:	4b04      	ldr	r3, [pc, #16]	@ (80060ac <SysTick_Config+0x40>)
 800609c:	2207      	movs	r2, #7
 800609e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	e000e010 	.word	0xe000e010

080060b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7ff ff2d 	bl	8005f18 <__NVIC_SetPriorityGrouping>
}
 80060be:	bf00      	nop
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b086      	sub	sp, #24
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	4603      	mov	r3, r0
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	607a      	str	r2, [r7, #4]
 80060d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80060d4:	2300      	movs	r3, #0
 80060d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060d8:	f7ff ff42 	bl	8005f60 <__NVIC_GetPriorityGrouping>
 80060dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	68b9      	ldr	r1, [r7, #8]
 80060e2:	6978      	ldr	r0, [r7, #20]
 80060e4:	f7ff ff90 	bl	8006008 <NVIC_EncodePriority>
 80060e8:	4602      	mov	r2, r0
 80060ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ee:	4611      	mov	r1, r2
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff ff5f 	bl	8005fb4 <__NVIC_SetPriority>
}
 80060f6:	bf00      	nop
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b082      	sub	sp, #8
 8006102:	af00      	add	r7, sp, #0
 8006104:	4603      	mov	r3, r0
 8006106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff ff35 	bl	8005f7c <__NVIC_EnableIRQ>
}
 8006112:	bf00      	nop
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff ffa2 	bl	800606c <SysTick_Config>
 8006128:	4603      	mov	r3, r0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b084      	sub	sp, #16
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b02      	cmp	r3, #2
 8006148:	d005      	beq.n	8006156 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2204      	movs	r2, #4
 800614e:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	73fb      	strb	r3, [r7, #15]
 8006154:	e029      	b.n	80061aa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 020e 	bic.w	r2, r2, #14
 8006164:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0201 	bic.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617a:	f003 021c 	and.w	r2, r3, #28
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006182:	2101      	movs	r1, #1
 8006184:	fa01 f202 	lsl.w	r2, r1, r2
 8006188:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	4798      	blx	r3
    }
  }
  return status;
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80061be:	2300      	movs	r3, #0
 80061c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80061c2:	2300      	movs	r3, #0
 80061c4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80061c6:	2300      	movs	r3, #0
 80061c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80061ca:	e160      	b.n	800648e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	2101      	movs	r1, #1
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	fa01 f303 	lsl.w	r3, r1, r3
 80061d8:	4013      	ands	r3, r2
 80061da:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 8152 	beq.w	8006488 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f003 0303 	and.w	r3, r3, #3
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d005      	beq.n	80061fc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d130      	bne.n	800625e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	2203      	movs	r2, #3
 8006208:	fa02 f303 	lsl.w	r3, r2, r3
 800620c:	43db      	mvns	r3, r3
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	4013      	ands	r3, r2
 8006212:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	68da      	ldr	r2, [r3, #12]
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	005b      	lsls	r3, r3, #1
 800621c:	fa02 f303 	lsl.w	r3, r2, r3
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	4313      	orrs	r3, r2
 8006224:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8006232:	2201      	movs	r2, #1
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	fa02 f303 	lsl.w	r3, r2, r3
 800623a:	43db      	mvns	r3, r3
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	4013      	ands	r3, r2
 8006240:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	091b      	lsrs	r3, r3, #4
 8006248:	f003 0201 	and.w	r2, r3, #1
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	fa02 f303 	lsl.w	r3, r2, r3
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f003 0303 	and.w	r3, r3, #3
 8006266:	2b03      	cmp	r3, #3
 8006268:	d017      	beq.n	800629a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	2203      	movs	r2, #3
 8006276:	fa02 f303 	lsl.w	r3, r2, r3
 800627a:	43db      	mvns	r3, r3
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	4013      	ands	r3, r2
 8006280:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	fa02 f303 	lsl.w	r3, r2, r3
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	4313      	orrs	r3, r2
 8006292:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f003 0303 	and.w	r3, r3, #3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d123      	bne.n	80062ee <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	08da      	lsrs	r2, r3, #3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	3208      	adds	r2, #8
 80062ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f003 0307 	and.w	r3, r3, #7
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	220f      	movs	r2, #15
 80062be:	fa02 f303 	lsl.w	r3, r2, r3
 80062c2:	43db      	mvns	r3, r3
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	4013      	ands	r3, r2
 80062c8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	691a      	ldr	r2, [r3, #16]
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	fa02 f303 	lsl.w	r3, r2, r3
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4313      	orrs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	08da      	lsrs	r2, r3, #3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3208      	adds	r2, #8
 80062e8:	6939      	ldr	r1, [r7, #16]
 80062ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	005b      	lsls	r3, r3, #1
 80062f8:	2203      	movs	r2, #3
 80062fa:	fa02 f303 	lsl.w	r3, r2, r3
 80062fe:	43db      	mvns	r3, r3
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	4013      	ands	r3, r2
 8006304:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f003 0203 	and.w	r2, r3, #3
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	fa02 f303 	lsl.w	r3, r2, r3
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4313      	orrs	r3, r2
 800631a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 80ac 	beq.w	8006488 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006330:	4b5e      	ldr	r3, [pc, #376]	@ (80064ac <HAL_GPIO_Init+0x2f8>)
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	4a5d      	ldr	r2, [pc, #372]	@ (80064ac <HAL_GPIO_Init+0x2f8>)
 8006336:	f043 0301 	orr.w	r3, r3, #1
 800633a:	6213      	str	r3, [r2, #32]
 800633c:	4b5b      	ldr	r3, [pc, #364]	@ (80064ac <HAL_GPIO_Init+0x2f8>)
 800633e:	6a1b      	ldr	r3, [r3, #32]
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	60bb      	str	r3, [r7, #8]
 8006346:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8006348:	4a59      	ldr	r2, [pc, #356]	@ (80064b0 <HAL_GPIO_Init+0x2fc>)
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	089b      	lsrs	r3, r3, #2
 800634e:	3302      	adds	r3, #2
 8006350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006354:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f003 0303 	and.w	r3, r3, #3
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	220f      	movs	r2, #15
 8006360:	fa02 f303 	lsl.w	r3, r2, r3
 8006364:	43db      	mvns	r3, r3
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	4013      	ands	r3, r2
 800636a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a51      	ldr	r2, [pc, #324]	@ (80064b4 <HAL_GPIO_Init+0x300>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d025      	beq.n	80063c0 <HAL_GPIO_Init+0x20c>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a50      	ldr	r2, [pc, #320]	@ (80064b8 <HAL_GPIO_Init+0x304>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d01f      	beq.n	80063bc <HAL_GPIO_Init+0x208>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a4f      	ldr	r2, [pc, #316]	@ (80064bc <HAL_GPIO_Init+0x308>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d019      	beq.n	80063b8 <HAL_GPIO_Init+0x204>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a4e      	ldr	r2, [pc, #312]	@ (80064c0 <HAL_GPIO_Init+0x30c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d013      	beq.n	80063b4 <HAL_GPIO_Init+0x200>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a4d      	ldr	r2, [pc, #308]	@ (80064c4 <HAL_GPIO_Init+0x310>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00d      	beq.n	80063b0 <HAL_GPIO_Init+0x1fc>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a4c      	ldr	r2, [pc, #304]	@ (80064c8 <HAL_GPIO_Init+0x314>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d007      	beq.n	80063ac <HAL_GPIO_Init+0x1f8>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a4b      	ldr	r2, [pc, #300]	@ (80064cc <HAL_GPIO_Init+0x318>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d101      	bne.n	80063a8 <HAL_GPIO_Init+0x1f4>
 80063a4:	2306      	movs	r3, #6
 80063a6:	e00c      	b.n	80063c2 <HAL_GPIO_Init+0x20e>
 80063a8:	2307      	movs	r3, #7
 80063aa:	e00a      	b.n	80063c2 <HAL_GPIO_Init+0x20e>
 80063ac:	2305      	movs	r3, #5
 80063ae:	e008      	b.n	80063c2 <HAL_GPIO_Init+0x20e>
 80063b0:	2304      	movs	r3, #4
 80063b2:	e006      	b.n	80063c2 <HAL_GPIO_Init+0x20e>
 80063b4:	2303      	movs	r3, #3
 80063b6:	e004      	b.n	80063c2 <HAL_GPIO_Init+0x20e>
 80063b8:	2302      	movs	r3, #2
 80063ba:	e002      	b.n	80063c2 <HAL_GPIO_Init+0x20e>
 80063bc:	2301      	movs	r3, #1
 80063be:	e000      	b.n	80063c2 <HAL_GPIO_Init+0x20e>
 80063c0:	2300      	movs	r3, #0
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	f002 0203 	and.w	r2, r2, #3
 80063c8:	0092      	lsls	r2, r2, #2
 80063ca:	4093      	lsls	r3, r2
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80063d2:	4937      	ldr	r1, [pc, #220]	@ (80064b0 <HAL_GPIO_Init+0x2fc>)
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	089b      	lsrs	r3, r3, #2
 80063d8:	3302      	adds	r3, #2
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80063e0:	4b3b      	ldr	r3, [pc, #236]	@ (80064d0 <HAL_GPIO_Init+0x31c>)
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	43db      	mvns	r3, r3
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4013      	ands	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4313      	orrs	r3, r2
 8006402:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006404:	4a32      	ldr	r2, [pc, #200]	@ (80064d0 <HAL_GPIO_Init+0x31c>)
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800640a:	4b31      	ldr	r3, [pc, #196]	@ (80064d0 <HAL_GPIO_Init+0x31c>)
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	43db      	mvns	r3, r3
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4013      	ands	r3, r2
 8006418:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4313      	orrs	r3, r2
 800642c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800642e:	4a28      	ldr	r2, [pc, #160]	@ (80064d0 <HAL_GPIO_Init+0x31c>)
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006434:	4b26      	ldr	r3, [pc, #152]	@ (80064d0 <HAL_GPIO_Init+0x31c>)
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	43db      	mvns	r3, r3
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	4013      	ands	r3, r2
 8006442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d003      	beq.n	8006458 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4313      	orrs	r3, r2
 8006456:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006458:	4a1d      	ldr	r2, [pc, #116]	@ (80064d0 <HAL_GPIO_Init+0x31c>)
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800645e:	4b1c      	ldr	r3, [pc, #112]	@ (80064d0 <HAL_GPIO_Init+0x31c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	43db      	mvns	r3, r3
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	4013      	ands	r3, r2
 800646c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4313      	orrs	r3, r2
 8006480:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006482:	4a13      	ldr	r2, [pc, #76]	@ (80064d0 <HAL_GPIO_Init+0x31c>)
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	3301      	adds	r3, #1
 800648c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	fa22 f303 	lsr.w	r3, r2, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	f47f ae97 	bne.w	80061cc <HAL_GPIO_Init+0x18>
  }
}
 800649e:	bf00      	nop
 80064a0:	bf00      	nop
 80064a2:	371c      	adds	r7, #28
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bc80      	pop	{r7}
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	40023800 	.word	0x40023800
 80064b0:	40010000 	.word	0x40010000
 80064b4:	40020000 	.word	0x40020000
 80064b8:	40020400 	.word	0x40020400
 80064bc:	40020800 	.word	0x40020800
 80064c0:	40020c00 	.word	0x40020c00
 80064c4:	40021000 	.word	0x40021000
 80064c8:	40021400 	.word	0x40021400
 80064cc:	40021800 	.word	0x40021800
 80064d0:	40010400 	.word	0x40010400

080064d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80064de:	2300      	movs	r3, #0
 80064e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80064e2:	2300      	movs	r3, #0
 80064e4:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 80064ea:	e0c4      	b.n	8006676 <HAL_GPIO_DeInit+0x1a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 80064ec:	2201      	movs	r2, #1
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	fa02 f303 	lsl.w	r3, r2, r3
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	4013      	ands	r3, r2
 80064f8:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 80b7 	beq.w	8006670 <HAL_GPIO_DeInit+0x19c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 8006502:	4a63      	ldr	r2, [pc, #396]	@ (8006690 <HAL_GPIO_DeInit+0x1bc>)
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	089b      	lsrs	r3, r3, #2
 8006508:	3302      	adds	r3, #2
 800650a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800650e:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	220f      	movs	r2, #15
 800651a:	fa02 f303 	lsl.w	r3, r2, r3
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4013      	ands	r3, r2
 8006522:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a5b      	ldr	r2, [pc, #364]	@ (8006694 <HAL_GPIO_DeInit+0x1c0>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d025      	beq.n	8006578 <HAL_GPIO_DeInit+0xa4>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a5a      	ldr	r2, [pc, #360]	@ (8006698 <HAL_GPIO_DeInit+0x1c4>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d01f      	beq.n	8006574 <HAL_GPIO_DeInit+0xa0>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a59      	ldr	r2, [pc, #356]	@ (800669c <HAL_GPIO_DeInit+0x1c8>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d019      	beq.n	8006570 <HAL_GPIO_DeInit+0x9c>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a58      	ldr	r2, [pc, #352]	@ (80066a0 <HAL_GPIO_DeInit+0x1cc>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d013      	beq.n	800656c <HAL_GPIO_DeInit+0x98>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a57      	ldr	r2, [pc, #348]	@ (80066a4 <HAL_GPIO_DeInit+0x1d0>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d00d      	beq.n	8006568 <HAL_GPIO_DeInit+0x94>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a56      	ldr	r2, [pc, #344]	@ (80066a8 <HAL_GPIO_DeInit+0x1d4>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d007      	beq.n	8006564 <HAL_GPIO_DeInit+0x90>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a55      	ldr	r2, [pc, #340]	@ (80066ac <HAL_GPIO_DeInit+0x1d8>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d101      	bne.n	8006560 <HAL_GPIO_DeInit+0x8c>
 800655c:	2306      	movs	r3, #6
 800655e:	e00c      	b.n	800657a <HAL_GPIO_DeInit+0xa6>
 8006560:	2307      	movs	r3, #7
 8006562:	e00a      	b.n	800657a <HAL_GPIO_DeInit+0xa6>
 8006564:	2305      	movs	r3, #5
 8006566:	e008      	b.n	800657a <HAL_GPIO_DeInit+0xa6>
 8006568:	2304      	movs	r3, #4
 800656a:	e006      	b.n	800657a <HAL_GPIO_DeInit+0xa6>
 800656c:	2303      	movs	r3, #3
 800656e:	e004      	b.n	800657a <HAL_GPIO_DeInit+0xa6>
 8006570:	2302      	movs	r3, #2
 8006572:	e002      	b.n	800657a <HAL_GPIO_DeInit+0xa6>
 8006574:	2301      	movs	r3, #1
 8006576:	e000      	b.n	800657a <HAL_GPIO_DeInit+0xa6>
 8006578:	2300      	movs	r3, #0
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	f002 0203 	and.w	r2, r2, #3
 8006580:	0092      	lsls	r2, r2, #2
 8006582:	4093      	lsls	r3, r2
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	429a      	cmp	r2, r3
 8006588:	d132      	bne.n	80065f0 <HAL_GPIO_DeInit+0x11c>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800658a:	4b49      	ldr	r3, [pc, #292]	@ (80066b0 <HAL_GPIO_DeInit+0x1dc>)
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	43db      	mvns	r3, r3
 8006592:	4947      	ldr	r1, [pc, #284]	@ (80066b0 <HAL_GPIO_DeInit+0x1dc>)
 8006594:	4013      	ands	r3, r2
 8006596:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8006598:	4b45      	ldr	r3, [pc, #276]	@ (80066b0 <HAL_GPIO_DeInit+0x1dc>)
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	43db      	mvns	r3, r3
 80065a0:	4943      	ldr	r1, [pc, #268]	@ (80066b0 <HAL_GPIO_DeInit+0x1dc>)
 80065a2:	4013      	ands	r3, r2
 80065a4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80065a6:	4b42      	ldr	r3, [pc, #264]	@ (80066b0 <HAL_GPIO_DeInit+0x1dc>)
 80065a8:	68da      	ldr	r2, [r3, #12]
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	43db      	mvns	r3, r3
 80065ae:	4940      	ldr	r1, [pc, #256]	@ (80066b0 <HAL_GPIO_DeInit+0x1dc>)
 80065b0:	4013      	ands	r3, r2
 80065b2:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80065b4:	4b3e      	ldr	r3, [pc, #248]	@ (80066b0 <HAL_GPIO_DeInit+0x1dc>)
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	43db      	mvns	r3, r3
 80065bc:	493c      	ldr	r1, [pc, #240]	@ (80066b0 <HAL_GPIO_DeInit+0x1dc>)
 80065be:	4013      	ands	r3, r2
 80065c0:	608b      	str	r3, [r1, #8]

        tmp = (0x0FU) << (4 * (position & 0x03));
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f003 0303 	and.w	r3, r3, #3
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	220f      	movs	r2, #15
 80065cc:	fa02 f303 	lsl.w	r3, r2, r3
 80065d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80065d2:	4a2f      	ldr	r2, [pc, #188]	@ (8006690 <HAL_GPIO_DeInit+0x1bc>)
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	089b      	lsrs	r3, r3, #2
 80065d8:	3302      	adds	r3, #2
 80065da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	43da      	mvns	r2, r3
 80065e2:	482b      	ldr	r0, [pc, #172]	@ (8006690 <HAL_GPIO_DeInit+0x1bc>)
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	089b      	lsrs	r3, r3, #2
 80065e8:	400a      	ands	r2, r1
 80065ea:	3302      	adds	r3, #2
 80065ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	2103      	movs	r1, #3
 80065fa:	fa01 f303 	lsl.w	r3, r1, r3
 80065fe:	43db      	mvns	r3, r3
 8006600:	401a      	ands	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	08da      	lsrs	r2, r3, #3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	3208      	adds	r2, #8
 800660e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f003 0307 	and.w	r3, r3, #7
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	220f      	movs	r2, #15
 800661c:	fa02 f303 	lsl.w	r3, r2, r3
 8006620:	43db      	mvns	r3, r3
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	08d2      	lsrs	r2, r2, #3
 8006626:	4019      	ands	r1, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	3208      	adds	r2, #8
 800662c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	2103      	movs	r1, #3
 800663a:	fa01 f303 	lsl.w	r3, r1, r3
 800663e:	43db      	mvns	r3, r3
 8006640:	401a      	ands	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	2101      	movs	r1, #1
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	fa01 f303 	lsl.w	r3, r1, r3
 8006652:	43db      	mvns	r3, r3
 8006654:	401a      	ands	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	689a      	ldr	r2, [r3, #8]
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	005b      	lsls	r3, r3, #1
 8006662:	2103      	movs	r1, #3
 8006664:	fa01 f303 	lsl.w	r3, r1, r3
 8006668:	43db      	mvns	r3, r3
 800666a:	401a      	ands	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	609a      	str	r2, [r3, #8]
    }

    position++;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	3301      	adds	r3, #1
 8006674:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	fa22 f303 	lsr.w	r3, r2, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	f47f af34 	bne.w	80064ec <HAL_GPIO_DeInit+0x18>
  }
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop
 8006688:	371c      	adds	r7, #28
 800668a:	46bd      	mov	sp, r7
 800668c:	bc80      	pop	{r7}
 800668e:	4770      	bx	lr
 8006690:	40010000 	.word	0x40010000
 8006694:	40020000 	.word	0x40020000
 8006698:	40020400 	.word	0x40020400
 800669c:	40020800 	.word	0x40020800
 80066a0:	40020c00 	.word	0x40020c00
 80066a4:	40021000 	.word	0x40021000
 80066a8:	40021400 	.word	0x40021400
 80066ac:	40021800 	.word	0x40021800
 80066b0:	40010400 	.word	0x40010400

080066b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	807b      	strh	r3, [r7, #2]
 80066c0:	4613      	mov	r3, r2
 80066c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80066c4:	787b      	ldrb	r3, [r7, #1]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80066ca:	887a      	ldrh	r2, [r7, #2]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80066d0:	e003      	b.n	80066da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80066d2:	887b      	ldrh	r3, [r7, #2]
 80066d4:	041a      	lsls	r2, r3, #16
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	619a      	str	r2, [r3, #24]
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	bc80      	pop	{r7}
 80066e2:	4770      	bx	lr

080066e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80066f6:	887a      	ldrh	r2, [r7, #2]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4013      	ands	r3, r2
 80066fc:	041a      	lsls	r2, r3, #16
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	43d9      	mvns	r1, r3
 8006702:	887b      	ldrh	r3, [r7, #2]
 8006704:	400b      	ands	r3, r1
 8006706:	431a      	orrs	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	619a      	str	r2, [r3, #24]
}
 800670c:	bf00      	nop
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	bc80      	pop	{r7}
 8006714:	4770      	bx	lr
	...

08006718 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	4603      	mov	r3, r0
 8006720:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006722:	4b08      	ldr	r3, [pc, #32]	@ (8006744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006724:	695a      	ldr	r2, [r3, #20]
 8006726:	88fb      	ldrh	r3, [r7, #6]
 8006728:	4013      	ands	r3, r2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d006      	beq.n	800673c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800672e:	4a05      	ldr	r2, [pc, #20]	@ (8006744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006730:	88fb      	ldrh	r3, [r7, #6]
 8006732:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006734:	88fb      	ldrh	r3, [r7, #6]
 8006736:	4618      	mov	r0, r3
 8006738:	f7fb fb98 	bl	8001e6c <HAL_GPIO_EXTI_Callback>
  }
}
 800673c:	bf00      	nop
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	40010400 	.word	0x40010400

08006748 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e12b      	b.n	80069b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d106      	bne.n	8006774 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f95d 	bl	8006a2e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2224      	movs	r2, #36	@ 0x24
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0201 	bic.w	r2, r2, #1
 800678a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800679a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80067aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80067ac:	f001 fdac 	bl	8008308 <HAL_RCC_GetPCLK1Freq>
 80067b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	4a81      	ldr	r2, [pc, #516]	@ (80069bc <HAL_I2C_Init+0x274>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d807      	bhi.n	80067cc <HAL_I2C_Init+0x84>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4a80      	ldr	r2, [pc, #512]	@ (80069c0 <HAL_I2C_Init+0x278>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	bf94      	ite	ls
 80067c4:	2301      	movls	r3, #1
 80067c6:	2300      	movhi	r3, #0
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	e006      	b.n	80067da <HAL_I2C_Init+0x92>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4a7d      	ldr	r2, [pc, #500]	@ (80069c4 <HAL_I2C_Init+0x27c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	bf94      	ite	ls
 80067d4:	2301      	movls	r3, #1
 80067d6:	2300      	movhi	r3, #0
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e0e7      	b.n	80069b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4a78      	ldr	r2, [pc, #480]	@ (80069c8 <HAL_I2C_Init+0x280>)
 80067e6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ea:	0c9b      	lsrs	r3, r3, #18
 80067ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	430a      	orrs	r2, r1
 8006800:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	4a6a      	ldr	r2, [pc, #424]	@ (80069bc <HAL_I2C_Init+0x274>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d802      	bhi.n	800681c <HAL_I2C_Init+0xd4>
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	3301      	adds	r3, #1
 800681a:	e009      	b.n	8006830 <HAL_I2C_Init+0xe8>
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006822:	fb02 f303 	mul.w	r3, r2, r3
 8006826:	4a69      	ldr	r2, [pc, #420]	@ (80069cc <HAL_I2C_Init+0x284>)
 8006828:	fba2 2303 	umull	r2, r3, r2, r3
 800682c:	099b      	lsrs	r3, r3, #6
 800682e:	3301      	adds	r3, #1
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	6812      	ldr	r2, [r2, #0]
 8006834:	430b      	orrs	r3, r1
 8006836:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006842:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	495c      	ldr	r1, [pc, #368]	@ (80069bc <HAL_I2C_Init+0x274>)
 800684c:	428b      	cmp	r3, r1
 800684e:	d819      	bhi.n	8006884 <HAL_I2C_Init+0x13c>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	1e59      	subs	r1, r3, #1
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	fbb1 f3f3 	udiv	r3, r1, r3
 800685e:	1c59      	adds	r1, r3, #1
 8006860:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006864:	400b      	ands	r3, r1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00a      	beq.n	8006880 <HAL_I2C_Init+0x138>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	1e59      	subs	r1, r3, #1
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	005b      	lsls	r3, r3, #1
 8006874:	fbb1 f3f3 	udiv	r3, r1, r3
 8006878:	3301      	adds	r3, #1
 800687a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800687e:	e051      	b.n	8006924 <HAL_I2C_Init+0x1dc>
 8006880:	2304      	movs	r3, #4
 8006882:	e04f      	b.n	8006924 <HAL_I2C_Init+0x1dc>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d111      	bne.n	80068b0 <HAL_I2C_Init+0x168>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	1e58      	subs	r0, r3, #1
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6859      	ldr	r1, [r3, #4]
 8006894:	460b      	mov	r3, r1
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	440b      	add	r3, r1
 800689a:	fbb0 f3f3 	udiv	r3, r0, r3
 800689e:	3301      	adds	r3, #1
 80068a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	bf0c      	ite	eq
 80068a8:	2301      	moveq	r3, #1
 80068aa:	2300      	movne	r3, #0
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	e012      	b.n	80068d6 <HAL_I2C_Init+0x18e>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	1e58      	subs	r0, r3, #1
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6859      	ldr	r1, [r3, #4]
 80068b8:	460b      	mov	r3, r1
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	440b      	add	r3, r1
 80068be:	0099      	lsls	r1, r3, #2
 80068c0:	440b      	add	r3, r1
 80068c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80068c6:	3301      	adds	r3, #1
 80068c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	bf0c      	ite	eq
 80068d0:	2301      	moveq	r3, #1
 80068d2:	2300      	movne	r3, #0
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <HAL_I2C_Init+0x196>
 80068da:	2301      	movs	r3, #1
 80068dc:	e022      	b.n	8006924 <HAL_I2C_Init+0x1dc>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10e      	bne.n	8006904 <HAL_I2C_Init+0x1bc>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	1e58      	subs	r0, r3, #1
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6859      	ldr	r1, [r3, #4]
 80068ee:	460b      	mov	r3, r1
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	440b      	add	r3, r1
 80068f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80068f8:	3301      	adds	r3, #1
 80068fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006902:	e00f      	b.n	8006924 <HAL_I2C_Init+0x1dc>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	1e58      	subs	r0, r3, #1
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6859      	ldr	r1, [r3, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	440b      	add	r3, r1
 8006912:	0099      	lsls	r1, r3, #2
 8006914:	440b      	add	r3, r1
 8006916:	fbb0 f3f3 	udiv	r3, r0, r3
 800691a:	3301      	adds	r3, #1
 800691c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006920:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006924:	6879      	ldr	r1, [r7, #4]
 8006926:	6809      	ldr	r1, [r1, #0]
 8006928:	4313      	orrs	r3, r2
 800692a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	69da      	ldr	r2, [r3, #28]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	431a      	orrs	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	430a      	orrs	r2, r1
 8006946:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006952:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	6911      	ldr	r1, [r2, #16]
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	68d2      	ldr	r2, [r2, #12]
 800695e:	4311      	orrs	r1, r2
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6812      	ldr	r2, [r2, #0]
 8006964:	430b      	orrs	r3, r1
 8006966:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	695a      	ldr	r2, [r3, #20]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	431a      	orrs	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	430a      	orrs	r2, r1
 8006982:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f042 0201 	orr.w	r2, r2, #1
 8006992:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2220      	movs	r2, #32
 800699e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	000186a0 	.word	0x000186a0
 80069c0:	001e847f 	.word	0x001e847f
 80069c4:	003d08ff 	.word	0x003d08ff
 80069c8:	431bde83 	.word	0x431bde83
 80069cc:	10624dd3 	.word	0x10624dd3

080069d0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e021      	b.n	8006a26 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2224      	movs	r2, #36	@ 0x24
 80069e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0201 	bic.w	r2, r2, #1
 80069f8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f820 	bl	8006a40 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bc80      	pop	{r7}
 8006a3e:	4770      	bx	lr

08006a40 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bc80      	pop	{r7}
 8006a50:	4770      	bx	lr
	...

08006a54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b088      	sub	sp, #32
 8006a58:	af02      	add	r7, sp, #8
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	4608      	mov	r0, r1
 8006a5e:	4611      	mov	r1, r2
 8006a60:	461a      	mov	r2, r3
 8006a62:	4603      	mov	r3, r0
 8006a64:	817b      	strh	r3, [r7, #10]
 8006a66:	460b      	mov	r3, r1
 8006a68:	813b      	strh	r3, [r7, #8]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a6e:	f7fe fc83 	bl	8005378 <HAL_GetTick>
 8006a72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b20      	cmp	r3, #32
 8006a7e:	f040 80d9 	bne.w	8006c34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	2319      	movs	r3, #25
 8006a88:	2201      	movs	r2, #1
 8006a8a:	496d      	ldr	r1, [pc, #436]	@ (8006c40 <HAL_I2C_Mem_Write+0x1ec>)
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 fc97 	bl	80073c0 <I2C_WaitOnFlagUntilTimeout>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006a98:	2302      	movs	r3, #2
 8006a9a:	e0cc      	b.n	8006c36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <HAL_I2C_Mem_Write+0x56>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e0c5      	b.n	8006c36 <HAL_I2C_Mem_Write+0x1e2>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d007      	beq.n	8006ad0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f042 0201 	orr.w	r2, r2, #1
 8006ace:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ade:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2221      	movs	r2, #33	@ 0x21
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2240      	movs	r2, #64	@ 0x40
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a3a      	ldr	r2, [r7, #32]
 8006afa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006b00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4a4d      	ldr	r2, [pc, #308]	@ (8006c44 <HAL_I2C_Mem_Write+0x1f0>)
 8006b10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b12:	88f8      	ldrh	r0, [r7, #6]
 8006b14:	893a      	ldrh	r2, [r7, #8]
 8006b16:	8979      	ldrh	r1, [r7, #10]
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	9301      	str	r3, [sp, #4]
 8006b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	4603      	mov	r3, r0
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 face 	bl	80070c4 <I2C_RequestMemoryWrite>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d052      	beq.n	8006bd4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e081      	b.n	8006c36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f000 fd5c 	bl	80075f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00d      	beq.n	8006b5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b46:	2b04      	cmp	r3, #4
 8006b48:	d107      	bne.n	8006b5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e06b      	b.n	8006c36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b62:	781a      	ldrb	r2, [r3, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	3b01      	subs	r3, #1
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	2b04      	cmp	r3, #4
 8006b9a:	d11b      	bne.n	8006bd4 <HAL_I2C_Mem_Write+0x180>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d017      	beq.n	8006bd4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba8:	781a      	ldrb	r2, [r3, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb4:	1c5a      	adds	r2, r3, #1
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1aa      	bne.n	8006b32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 fd4f 	bl	8007684 <I2C_WaitOnBTFFlagUntilTimeout>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00d      	beq.n	8006c08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf0:	2b04      	cmp	r3, #4
 8006bf2:	d107      	bne.n	8006c04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e016      	b.n	8006c36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	e000      	b.n	8006c36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006c34:	2302      	movs	r3, #2
  }
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	00100002 	.word	0x00100002
 8006c44:	ffff0000 	.word	0xffff0000

08006c48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08c      	sub	sp, #48	@ 0x30
 8006c4c:	af02      	add	r7, sp, #8
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	4608      	mov	r0, r1
 8006c52:	4611      	mov	r1, r2
 8006c54:	461a      	mov	r2, r3
 8006c56:	4603      	mov	r3, r0
 8006c58:	817b      	strh	r3, [r7, #10]
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	813b      	strh	r3, [r7, #8]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c62:	f7fe fb89 	bl	8005378 <HAL_GetTick>
 8006c66:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b20      	cmp	r3, #32
 8006c72:	f040 8208 	bne.w	8007086 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	2319      	movs	r3, #25
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	497b      	ldr	r1, [pc, #492]	@ (8006e6c <HAL_I2C_Mem_Read+0x224>)
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 fb9d 	bl	80073c0 <I2C_WaitOnFlagUntilTimeout>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d001      	beq.n	8006c90 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	e1fb      	b.n	8007088 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d101      	bne.n	8006c9e <HAL_I2C_Mem_Read+0x56>
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	e1f4      	b.n	8007088 <HAL_I2C_Mem_Read+0x440>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d007      	beq.n	8006cc4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0201 	orr.w	r2, r2, #1
 8006cc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006cd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2222      	movs	r2, #34	@ 0x22
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2240      	movs	r2, #64	@ 0x40
 8006ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4a5b      	ldr	r2, [pc, #364]	@ (8006e70 <HAL_I2C_Mem_Read+0x228>)
 8006d04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d06:	88f8      	ldrh	r0, [r7, #6]
 8006d08:	893a      	ldrh	r2, [r7, #8]
 8006d0a:	8979      	ldrh	r1, [r7, #10]
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0e:	9301      	str	r3, [sp, #4]
 8006d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	4603      	mov	r3, r0
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f000 fa6a 	bl	80071f0 <I2C_RequestMemoryRead>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e1b0      	b.n	8007088 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d113      	bne.n	8006d56 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d2e:	2300      	movs	r3, #0
 8006d30:	623b      	str	r3, [r7, #32]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	623b      	str	r3, [r7, #32]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	623b      	str	r3, [r7, #32]
 8006d42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	e184      	b.n	8007060 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d11b      	bne.n	8006d96 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d6e:	2300      	movs	r3, #0
 8006d70:	61fb      	str	r3, [r7, #28]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	61fb      	str	r3, [r7, #28]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	61fb      	str	r3, [r7, #28]
 8006d82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	e164      	b.n	8007060 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d11b      	bne.n	8006dd6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006dbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	61bb      	str	r3, [r7, #24]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	61bb      	str	r3, [r7, #24]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	61bb      	str	r3, [r7, #24]
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	e144      	b.n	8007060 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	617b      	str	r3, [r7, #20]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	617b      	str	r3, [r7, #20]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006dec:	e138      	b.n	8007060 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006df2:	2b03      	cmp	r3, #3
 8006df4:	f200 80f1 	bhi.w	8006fda <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d123      	bne.n	8006e48 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f000 fc85 	bl	8007714 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d001      	beq.n	8006e14 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e139      	b.n	8007088 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	691a      	ldr	r2, [r3, #16]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1e:	b2d2      	uxtb	r2, r2
 8006e20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e26:	1c5a      	adds	r2, r3, #1
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e30:	3b01      	subs	r3, #1
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e46:	e10b      	b.n	8007060 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d14e      	bne.n	8006eee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e56:	2200      	movs	r2, #0
 8006e58:	4906      	ldr	r1, [pc, #24]	@ (8006e74 <HAL_I2C_Mem_Read+0x22c>)
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 fab0 	bl	80073c0 <I2C_WaitOnFlagUntilTimeout>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d008      	beq.n	8006e78 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e10e      	b.n	8007088 <HAL_I2C_Mem_Read+0x440>
 8006e6a:	bf00      	nop
 8006e6c:	00100002 	.word	0x00100002
 8006e70:	ffff0000 	.word	0xffff0000
 8006e74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	691a      	ldr	r2, [r3, #16]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e92:	b2d2      	uxtb	r2, r2
 8006e94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9a:	1c5a      	adds	r2, r3, #1
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	691a      	ldr	r2, [r3, #16]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec4:	b2d2      	uxtb	r2, r2
 8006ec6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006eec:	e0b8      	b.n	8007060 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	4966      	ldr	r1, [pc, #408]	@ (8007090 <HAL_I2C_Mem_Read+0x448>)
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 fa61 	bl	80073c0 <I2C_WaitOnFlagUntilTimeout>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e0bf      	b.n	8007088 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	691a      	ldr	r2, [r3, #16]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f22:	b2d2      	uxtb	r2, r2
 8006f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2a:	1c5a      	adds	r2, r3, #1
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f34:	3b01      	subs	r3, #1
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f50:	2200      	movs	r2, #0
 8006f52:	494f      	ldr	r1, [pc, #316]	@ (8007090 <HAL_I2C_Mem_Read+0x448>)
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f000 fa33 	bl	80073c0 <I2C_WaitOnFlagUntilTimeout>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e091      	b.n	8007088 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	691a      	ldr	r2, [r3, #16]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f7e:	b2d2      	uxtb	r2, r2
 8006f80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f90:	3b01      	subs	r3, #1
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	691a      	ldr	r2, [r3, #16]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb0:	b2d2      	uxtb	r2, r2
 8006fb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb8:	1c5a      	adds	r2, r3, #1
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006fd8:	e042      	b.n	8007060 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fdc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 fb98 	bl	8007714 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e04c      	b.n	8007088 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	691a      	ldr	r2, [r3, #16]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff8:	b2d2      	uxtb	r2, r2
 8006ffa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800700a:	3b01      	subs	r3, #1
 800700c:	b29a      	uxth	r2, r3
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007016:	b29b      	uxth	r3, r3
 8007018:	3b01      	subs	r3, #1
 800701a:	b29a      	uxth	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	f003 0304 	and.w	r3, r3, #4
 800702a:	2b04      	cmp	r3, #4
 800702c:	d118      	bne.n	8007060 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	691a      	ldr	r2, [r3, #16]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007038:	b2d2      	uxtb	r2, r2
 800703a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007040:	1c5a      	adds	r2, r3, #1
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800704a:	3b01      	subs	r3, #1
 800704c:	b29a      	uxth	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007056:	b29b      	uxth	r3, r3
 8007058:	3b01      	subs	r3, #1
 800705a:	b29a      	uxth	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007064:	2b00      	cmp	r3, #0
 8007066:	f47f aec2 	bne.w	8006dee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2220      	movs	r2, #32
 800706e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	e000      	b.n	8007088 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007086:	2302      	movs	r3, #2
  }
}
 8007088:	4618      	mov	r0, r3
 800708a:	3728      	adds	r7, #40	@ 0x28
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	00010004 	.word	0x00010004

08007094 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070a2:	b2db      	uxtb	r3, r3
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bc80      	pop	{r7}
 80070ac:	4770      	bx	lr

080070ae <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b083      	sub	sp, #12
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	bc80      	pop	{r7}
 80070c2:	4770      	bx	lr

080070c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af02      	add	r7, sp, #8
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	4608      	mov	r0, r1
 80070ce:	4611      	mov	r1, r2
 80070d0:	461a      	mov	r2, r3
 80070d2:	4603      	mov	r3, r0
 80070d4:	817b      	strh	r3, [r7, #10]
 80070d6:	460b      	mov	r3, r1
 80070d8:	813b      	strh	r3, [r7, #8]
 80070da:	4613      	mov	r3, r2
 80070dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	6a3b      	ldr	r3, [r7, #32]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f000 f960 	bl	80073c0 <I2C_WaitOnFlagUntilTimeout>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00d      	beq.n	8007122 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007110:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007114:	d103      	bne.n	800711e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800711c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e05f      	b.n	80071e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007122:	897b      	ldrh	r3, [r7, #10]
 8007124:	b2db      	uxtb	r3, r3
 8007126:	461a      	mov	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007130:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007134:	6a3a      	ldr	r2, [r7, #32]
 8007136:	492d      	ldr	r1, [pc, #180]	@ (80071ec <I2C_RequestMemoryWrite+0x128>)
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f000 f9bb 	bl	80074b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d001      	beq.n	8007148 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e04c      	b.n	80071e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007148:	2300      	movs	r3, #0
 800714a:	617b      	str	r3, [r7, #20]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	617b      	str	r3, [r7, #20]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	617b      	str	r3, [r7, #20]
 800715c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800715e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007160:	6a39      	ldr	r1, [r7, #32]
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 fa46 	bl	80075f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00d      	beq.n	800718a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007172:	2b04      	cmp	r3, #4
 8007174:	d107      	bne.n	8007186 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007184:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e02b      	b.n	80071e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800718a:	88fb      	ldrh	r3, [r7, #6]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d105      	bne.n	800719c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007190:	893b      	ldrh	r3, [r7, #8]
 8007192:	b2da      	uxtb	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	611a      	str	r2, [r3, #16]
 800719a:	e021      	b.n	80071e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800719c:	893b      	ldrh	r3, [r7, #8]
 800719e:	0a1b      	lsrs	r3, r3, #8
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ac:	6a39      	ldr	r1, [r7, #32]
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f000 fa20 	bl	80075f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00d      	beq.n	80071d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071be:	2b04      	cmp	r3, #4
 80071c0:	d107      	bne.n	80071d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e005      	b.n	80071e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071d6:	893b      	ldrh	r3, [r7, #8]
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3718      	adds	r7, #24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	00010002 	.word	0x00010002

080071f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b088      	sub	sp, #32
 80071f4:	af02      	add	r7, sp, #8
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	4608      	mov	r0, r1
 80071fa:	4611      	mov	r1, r2
 80071fc:	461a      	mov	r2, r3
 80071fe:	4603      	mov	r3, r0
 8007200:	817b      	strh	r3, [r7, #10]
 8007202:	460b      	mov	r3, r1
 8007204:	813b      	strh	r3, [r7, #8]
 8007206:	4613      	mov	r3, r2
 8007208:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007218:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007228:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800722a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	2200      	movs	r2, #0
 8007232:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f000 f8c2 	bl	80073c0 <I2C_WaitOnFlagUntilTimeout>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00d      	beq.n	800725e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800724c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007250:	d103      	bne.n	800725a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007258:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e0aa      	b.n	80073b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800725e:	897b      	ldrh	r3, [r7, #10]
 8007260:	b2db      	uxtb	r3, r3
 8007262:	461a      	mov	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800726c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800726e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007270:	6a3a      	ldr	r2, [r7, #32]
 8007272:	4952      	ldr	r1, [pc, #328]	@ (80073bc <I2C_RequestMemoryRead+0x1cc>)
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 f91d 	bl	80074b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e097      	b.n	80073b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007284:	2300      	movs	r3, #0
 8007286:	617b      	str	r3, [r7, #20]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	617b      	str	r3, [r7, #20]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	617b      	str	r3, [r7, #20]
 8007298:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800729a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800729c:	6a39      	ldr	r1, [r7, #32]
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 f9a8 	bl	80075f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00d      	beq.n	80072c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ae:	2b04      	cmp	r3, #4
 80072b0:	d107      	bne.n	80072c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e076      	b.n	80073b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072c6:	88fb      	ldrh	r3, [r7, #6]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d105      	bne.n	80072d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072cc:	893b      	ldrh	r3, [r7, #8]
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	611a      	str	r2, [r3, #16]
 80072d6:	e021      	b.n	800731c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80072d8:	893b      	ldrh	r3, [r7, #8]
 80072da:	0a1b      	lsrs	r3, r3, #8
 80072dc:	b29b      	uxth	r3, r3
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072e8:	6a39      	ldr	r1, [r7, #32]
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 f982 	bl	80075f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00d      	beq.n	8007312 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072fa:	2b04      	cmp	r3, #4
 80072fc:	d107      	bne.n	800730e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800730c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e050      	b.n	80073b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007312:	893b      	ldrh	r3, [r7, #8]
 8007314:	b2da      	uxtb	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800731c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800731e:	6a39      	ldr	r1, [r7, #32]
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f000 f967 	bl	80075f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00d      	beq.n	8007348 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007330:	2b04      	cmp	r3, #4
 8007332:	d107      	bne.n	8007344 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007342:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e035      	b.n	80073b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007356:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	2200      	movs	r2, #0
 8007360:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f000 f82b 	bl	80073c0 <I2C_WaitOnFlagUntilTimeout>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00d      	beq.n	800738c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800737a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800737e:	d103      	bne.n	8007388 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007386:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e013      	b.n	80073b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800738c:	897b      	ldrh	r3, [r7, #10]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	f043 0301 	orr.w	r3, r3, #1
 8007394:	b2da      	uxtb	r2, r3
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800739c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739e:	6a3a      	ldr	r2, [r7, #32]
 80073a0:	4906      	ldr	r1, [pc, #24]	@ (80073bc <I2C_RequestMemoryRead+0x1cc>)
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f000 f886 	bl	80074b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d001      	beq.n	80073b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e000      	b.n	80073b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3718      	adds	r7, #24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	00010002 	.word	0x00010002

080073c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	603b      	str	r3, [r7, #0]
 80073cc:	4613      	mov	r3, r2
 80073ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073d0:	e048      	b.n	8007464 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d8:	d044      	beq.n	8007464 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073da:	f7fd ffcd 	bl	8005378 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d302      	bcc.n	80073f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d139      	bne.n	8007464 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	0c1b      	lsrs	r3, r3, #16
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d10d      	bne.n	8007416 <I2C_WaitOnFlagUntilTimeout+0x56>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	43da      	mvns	r2, r3
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	4013      	ands	r3, r2
 8007406:	b29b      	uxth	r3, r3
 8007408:	2b00      	cmp	r3, #0
 800740a:	bf0c      	ite	eq
 800740c:	2301      	moveq	r3, #1
 800740e:	2300      	movne	r3, #0
 8007410:	b2db      	uxtb	r3, r3
 8007412:	461a      	mov	r2, r3
 8007414:	e00c      	b.n	8007430 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	43da      	mvns	r2, r3
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	4013      	ands	r3, r2
 8007422:	b29b      	uxth	r3, r3
 8007424:	2b00      	cmp	r3, #0
 8007426:	bf0c      	ite	eq
 8007428:	2301      	moveq	r3, #1
 800742a:	2300      	movne	r3, #0
 800742c:	b2db      	uxtb	r3, r3
 800742e:	461a      	mov	r2, r3
 8007430:	79fb      	ldrb	r3, [r7, #7]
 8007432:	429a      	cmp	r2, r3
 8007434:	d116      	bne.n	8007464 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2220      	movs	r2, #32
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007450:	f043 0220 	orr.w	r2, r3, #32
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e023      	b.n	80074ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	0c1b      	lsrs	r3, r3, #16
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b01      	cmp	r3, #1
 800746c:	d10d      	bne.n	800748a <I2C_WaitOnFlagUntilTimeout+0xca>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	43da      	mvns	r2, r3
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	4013      	ands	r3, r2
 800747a:	b29b      	uxth	r3, r3
 800747c:	2b00      	cmp	r3, #0
 800747e:	bf0c      	ite	eq
 8007480:	2301      	moveq	r3, #1
 8007482:	2300      	movne	r3, #0
 8007484:	b2db      	uxtb	r3, r3
 8007486:	461a      	mov	r2, r3
 8007488:	e00c      	b.n	80074a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	43da      	mvns	r2, r3
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	4013      	ands	r3, r2
 8007496:	b29b      	uxth	r3, r3
 8007498:	2b00      	cmp	r3, #0
 800749a:	bf0c      	ite	eq
 800749c:	2301      	moveq	r3, #1
 800749e:	2300      	movne	r3, #0
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	461a      	mov	r2, r3
 80074a4:	79fb      	ldrb	r3, [r7, #7]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d093      	beq.n	80073d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
 80074c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074c2:	e071      	b.n	80075a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074d2:	d123      	bne.n	800751c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80074ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2220      	movs	r2, #32
 80074f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007508:	f043 0204 	orr.w	r2, r3, #4
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e067      	b.n	80075ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007522:	d041      	beq.n	80075a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007524:	f7fd ff28 	bl	8005378 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	429a      	cmp	r2, r3
 8007532:	d302      	bcc.n	800753a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d136      	bne.n	80075a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	0c1b      	lsrs	r3, r3, #16
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b01      	cmp	r3, #1
 8007542:	d10c      	bne.n	800755e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	43da      	mvns	r2, r3
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	4013      	ands	r3, r2
 8007550:	b29b      	uxth	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	bf14      	ite	ne
 8007556:	2301      	movne	r3, #1
 8007558:	2300      	moveq	r3, #0
 800755a:	b2db      	uxtb	r3, r3
 800755c:	e00b      	b.n	8007576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	43da      	mvns	r2, r3
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	4013      	ands	r3, r2
 800756a:	b29b      	uxth	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	bf14      	ite	ne
 8007570:	2301      	movne	r3, #1
 8007572:	2300      	moveq	r3, #0
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d016      	beq.n	80075a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2220      	movs	r2, #32
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007594:	f043 0220 	orr.w	r2, r3, #32
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e021      	b.n	80075ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	0c1b      	lsrs	r3, r3, #16
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d10c      	bne.n	80075cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	695b      	ldr	r3, [r3, #20]
 80075b8:	43da      	mvns	r2, r3
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	4013      	ands	r3, r2
 80075be:	b29b      	uxth	r3, r3
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	bf14      	ite	ne
 80075c4:	2301      	movne	r3, #1
 80075c6:	2300      	moveq	r3, #0
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	e00b      	b.n	80075e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	43da      	mvns	r2, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	4013      	ands	r3, r2
 80075d8:	b29b      	uxth	r3, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	bf14      	ite	ne
 80075de:	2301      	movne	r3, #1
 80075e0:	2300      	moveq	r3, #0
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f47f af6d 	bne.w	80074c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007600:	e034      	b.n	800766c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f000 f8e3 	bl	80077ce <I2C_IsAcknowledgeFailed>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e034      	b.n	800767c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007618:	d028      	beq.n	800766c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800761a:	f7fd fead 	bl	8005378 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	429a      	cmp	r2, r3
 8007628:	d302      	bcc.n	8007630 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d11d      	bne.n	800766c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800763a:	2b80      	cmp	r3, #128	@ 0x80
 800763c:	d016      	beq.n	800766c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2220      	movs	r2, #32
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007658:	f043 0220 	orr.w	r2, r3, #32
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e007      	b.n	800767c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007676:	2b80      	cmp	r3, #128	@ 0x80
 8007678:	d1c3      	bne.n	8007602 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007690:	e034      	b.n	80076fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 f89b 	bl	80077ce <I2C_IsAcknowledgeFailed>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e034      	b.n	800770c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a8:	d028      	beq.n	80076fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076aa:	f7fd fe65 	bl	8005378 <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d302      	bcc.n	80076c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d11d      	bne.n	80076fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	f003 0304 	and.w	r3, r3, #4
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	d016      	beq.n	80076fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2220      	movs	r2, #32
 80076d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e8:	f043 0220 	orr.w	r2, r3, #32
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e007      	b.n	800770c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	f003 0304 	and.w	r3, r3, #4
 8007706:	2b04      	cmp	r3, #4
 8007708:	d1c3      	bne.n	8007692 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007720:	e049      	b.n	80077b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	695b      	ldr	r3, [r3, #20]
 8007728:	f003 0310 	and.w	r3, r3, #16
 800772c:	2b10      	cmp	r3, #16
 800772e:	d119      	bne.n	8007764 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f06f 0210 	mvn.w	r2, #16
 8007738:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2220      	movs	r2, #32
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e030      	b.n	80077c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007764:	f7fd fe08 	bl	8005378 <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	429a      	cmp	r2, r3
 8007772:	d302      	bcc.n	800777a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d11d      	bne.n	80077b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007784:	2b40      	cmp	r3, #64	@ 0x40
 8007786:	d016      	beq.n	80077b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2220      	movs	r2, #32
 8007792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077a2:	f043 0220 	orr.w	r2, r3, #32
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e007      	b.n	80077c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	695b      	ldr	r3, [r3, #20]
 80077bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077c0:	2b40      	cmp	r3, #64	@ 0x40
 80077c2:	d1ae      	bne.n	8007722 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b083      	sub	sp, #12
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077e4:	d11b      	bne.n	800781e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80077ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2220      	movs	r2, #32
 80077fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800780a:	f043 0204 	orr.w	r2, r3, #4
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e000      	b.n	8007820 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	bc80      	pop	{r7}
 8007828:	4770      	bx	lr
	...

0800782c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b088      	sub	sp, #32
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e31d      	b.n	8007e7a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800783e:	4b94      	ldr	r3, [pc, #592]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f003 030c 	and.w	r3, r3, #12
 8007846:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007848:	4b91      	ldr	r3, [pc, #580]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007850:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b00      	cmp	r3, #0
 800785c:	d07b      	beq.n	8007956 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	2b08      	cmp	r3, #8
 8007862:	d006      	beq.n	8007872 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	2b0c      	cmp	r3, #12
 8007868:	d10f      	bne.n	800788a <HAL_RCC_OscConfig+0x5e>
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007870:	d10b      	bne.n	800788a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007872:	4b87      	ldr	r3, [pc, #540]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d06a      	beq.n	8007954 <HAL_RCC_OscConfig+0x128>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d166      	bne.n	8007954 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e2f7      	b.n	8007e7a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d106      	bne.n	80078a0 <HAL_RCC_OscConfig+0x74>
 8007892:	4b7f      	ldr	r3, [pc, #508]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a7e      	ldr	r2, [pc, #504]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 8007898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800789c:	6013      	str	r3, [r2, #0]
 800789e:	e02d      	b.n	80078fc <HAL_RCC_OscConfig+0xd0>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10c      	bne.n	80078c2 <HAL_RCC_OscConfig+0x96>
 80078a8:	4b79      	ldr	r3, [pc, #484]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a78      	ldr	r2, [pc, #480]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 80078ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078b2:	6013      	str	r3, [r2, #0]
 80078b4:	4b76      	ldr	r3, [pc, #472]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a75      	ldr	r2, [pc, #468]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 80078ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078be:	6013      	str	r3, [r2, #0]
 80078c0:	e01c      	b.n	80078fc <HAL_RCC_OscConfig+0xd0>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	2b05      	cmp	r3, #5
 80078c8:	d10c      	bne.n	80078e4 <HAL_RCC_OscConfig+0xb8>
 80078ca:	4b71      	ldr	r3, [pc, #452]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a70      	ldr	r2, [pc, #448]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 80078d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078d4:	6013      	str	r3, [r2, #0]
 80078d6:	4b6e      	ldr	r3, [pc, #440]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a6d      	ldr	r2, [pc, #436]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 80078dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078e0:	6013      	str	r3, [r2, #0]
 80078e2:	e00b      	b.n	80078fc <HAL_RCC_OscConfig+0xd0>
 80078e4:	4b6a      	ldr	r3, [pc, #424]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a69      	ldr	r2, [pc, #420]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 80078ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078ee:	6013      	str	r3, [r2, #0]
 80078f0:	4b67      	ldr	r3, [pc, #412]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a66      	ldr	r2, [pc, #408]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 80078f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d013      	beq.n	800792c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007904:	f7fd fd38 	bl	8005378 <HAL_GetTick>
 8007908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800790a:	e008      	b.n	800791e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800790c:	f7fd fd34 	bl	8005378 <HAL_GetTick>
 8007910:	4602      	mov	r2, r0
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	2b64      	cmp	r3, #100	@ 0x64
 8007918:	d901      	bls.n	800791e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e2ad      	b.n	8007e7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800791e:	4b5c      	ldr	r3, [pc, #368]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d0f0      	beq.n	800790c <HAL_RCC_OscConfig+0xe0>
 800792a:	e014      	b.n	8007956 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800792c:	f7fd fd24 	bl	8005378 <HAL_GetTick>
 8007930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007932:	e008      	b.n	8007946 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007934:	f7fd fd20 	bl	8005378 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	2b64      	cmp	r3, #100	@ 0x64
 8007940:	d901      	bls.n	8007946 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e299      	b.n	8007e7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007946:	4b52      	ldr	r3, [pc, #328]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1f0      	bne.n	8007934 <HAL_RCC_OscConfig+0x108>
 8007952:	e000      	b.n	8007956 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 0302 	and.w	r3, r3, #2
 800795e:	2b00      	cmp	r3, #0
 8007960:	d05a      	beq.n	8007a18 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	2b04      	cmp	r3, #4
 8007966:	d005      	beq.n	8007974 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	2b0c      	cmp	r3, #12
 800796c:	d119      	bne.n	80079a2 <HAL_RCC_OscConfig+0x176>
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d116      	bne.n	80079a2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007974:	4b46      	ldr	r3, [pc, #280]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b00      	cmp	r3, #0
 800797e:	d005      	beq.n	800798c <HAL_RCC_OscConfig+0x160>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d001      	beq.n	800798c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e276      	b.n	8007e7a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800798c:	4b40      	ldr	r3, [pc, #256]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	021b      	lsls	r3, r3, #8
 800799a:	493d      	ldr	r1, [pc, #244]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 800799c:	4313      	orrs	r3, r2
 800799e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079a0:	e03a      	b.n	8007a18 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d020      	beq.n	80079ec <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079aa:	4b3a      	ldr	r3, [pc, #232]	@ (8007a94 <HAL_RCC_OscConfig+0x268>)
 80079ac:	2201      	movs	r2, #1
 80079ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079b0:	f7fd fce2 	bl	8005378 <HAL_GetTick>
 80079b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079b6:	e008      	b.n	80079ca <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079b8:	f7fd fcde 	bl	8005378 <HAL_GetTick>
 80079bc:	4602      	mov	r2, r0
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d901      	bls.n	80079ca <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e257      	b.n	8007e7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079ca:	4b31      	ldr	r3, [pc, #196]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d0f0      	beq.n	80079b8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079d6:	4b2e      	ldr	r3, [pc, #184]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	021b      	lsls	r3, r3, #8
 80079e4:	492a      	ldr	r1, [pc, #168]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	604b      	str	r3, [r1, #4]
 80079ea:	e015      	b.n	8007a18 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079ec:	4b29      	ldr	r3, [pc, #164]	@ (8007a94 <HAL_RCC_OscConfig+0x268>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079f2:	f7fd fcc1 	bl	8005378 <HAL_GetTick>
 80079f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80079f8:	e008      	b.n	8007a0c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079fa:	f7fd fcbd 	bl	8005378 <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d901      	bls.n	8007a0c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e236      	b.n	8007e7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a0c:	4b20      	ldr	r3, [pc, #128]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1f0      	bne.n	80079fa <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0310 	and.w	r3, r3, #16
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 80b8 	beq.w	8007b96 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d170      	bne.n	8007b0e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007a2c:	4b18      	ldr	r3, [pc, #96]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d005      	beq.n	8007a44 <HAL_RCC_OscConfig+0x218>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e21a      	b.n	8007e7a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a1a      	ldr	r2, [r3, #32]
 8007a48:	4b11      	ldr	r3, [pc, #68]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d921      	bls.n	8007a98 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a1b      	ldr	r3, [r3, #32]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 fc7d 	bl	8008358 <RCC_SetFlashLatencyFromMSIRange>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d001      	beq.n	8007a68 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e208      	b.n	8007e7a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a68:	4b09      	ldr	r3, [pc, #36]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	4906      	ldr	r1, [pc, #24]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a7a:	4b05      	ldr	r3, [pc, #20]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	061b      	lsls	r3, r3, #24
 8007a88:	4901      	ldr	r1, [pc, #4]	@ (8007a90 <HAL_RCC_OscConfig+0x264>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	604b      	str	r3, [r1, #4]
 8007a8e:	e020      	b.n	8007ad2 <HAL_RCC_OscConfig+0x2a6>
 8007a90:	40023800 	.word	0x40023800
 8007a94:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a98:	4b99      	ldr	r3, [pc, #612]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	4996      	ldr	r1, [pc, #600]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007aaa:	4b95      	ldr	r3, [pc, #596]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	061b      	lsls	r3, r3, #24
 8007ab8:	4991      	ldr	r1, [pc, #580]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 fc48 	bl	8008358 <RCC_SetFlashLatencyFromMSIRange>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e1d3      	b.n	8007e7a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	0b5b      	lsrs	r3, r3, #13
 8007ad8:	3301      	adds	r3, #1
 8007ada:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007ade:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007ae2:	4a87      	ldr	r2, [pc, #540]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007ae4:	6892      	ldr	r2, [r2, #8]
 8007ae6:	0912      	lsrs	r2, r2, #4
 8007ae8:	f002 020f 	and.w	r2, r2, #15
 8007aec:	4985      	ldr	r1, [pc, #532]	@ (8007d04 <HAL_RCC_OscConfig+0x4d8>)
 8007aee:	5c8a      	ldrb	r2, [r1, r2]
 8007af0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007af2:	4a85      	ldr	r2, [pc, #532]	@ (8007d08 <HAL_RCC_OscConfig+0x4dc>)
 8007af4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007af6:	4b85      	ldr	r3, [pc, #532]	@ (8007d0c <HAL_RCC_OscConfig+0x4e0>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fd fbf0 	bl	80052e0 <HAL_InitTick>
 8007b00:	4603      	mov	r3, r0
 8007b02:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d045      	beq.n	8007b96 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
 8007b0c:	e1b5      	b.n	8007e7a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d029      	beq.n	8007b6a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007b16:	4b7e      	ldr	r3, [pc, #504]	@ (8007d10 <HAL_RCC_OscConfig+0x4e4>)
 8007b18:	2201      	movs	r2, #1
 8007b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b1c:	f7fd fc2c 	bl	8005378 <HAL_GetTick>
 8007b20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007b22:	e008      	b.n	8007b36 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007b24:	f7fd fc28 	bl	8005378 <HAL_GetTick>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d901      	bls.n	8007b36 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e1a1      	b.n	8007e7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007b36:	4b72      	ldr	r3, [pc, #456]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d0f0      	beq.n	8007b24 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007b42:	4b6f      	ldr	r3, [pc, #444]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	496c      	ldr	r1, [pc, #432]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007b50:	4313      	orrs	r3, r2
 8007b52:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007b54:	4b6a      	ldr	r3, [pc, #424]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	69db      	ldr	r3, [r3, #28]
 8007b60:	061b      	lsls	r3, r3, #24
 8007b62:	4967      	ldr	r1, [pc, #412]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	604b      	str	r3, [r1, #4]
 8007b68:	e015      	b.n	8007b96 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007b6a:	4b69      	ldr	r3, [pc, #420]	@ (8007d10 <HAL_RCC_OscConfig+0x4e4>)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b70:	f7fd fc02 	bl	8005378 <HAL_GetTick>
 8007b74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007b76:	e008      	b.n	8007b8a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007b78:	f7fd fbfe 	bl	8005378 <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d901      	bls.n	8007b8a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e177      	b.n	8007e7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007b8a:	4b5d      	ldr	r3, [pc, #372]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1f0      	bne.n	8007b78 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0308 	and.w	r3, r3, #8
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d030      	beq.n	8007c04 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d016      	beq.n	8007bd8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007baa:	4b5a      	ldr	r3, [pc, #360]	@ (8007d14 <HAL_RCC_OscConfig+0x4e8>)
 8007bac:	2201      	movs	r2, #1
 8007bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bb0:	f7fd fbe2 	bl	8005378 <HAL_GetTick>
 8007bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007bb6:	e008      	b.n	8007bca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bb8:	f7fd fbde 	bl	8005378 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d901      	bls.n	8007bca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e157      	b.n	8007e7a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007bca:	4b4d      	ldr	r3, [pc, #308]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bce:	f003 0302 	and.w	r3, r3, #2
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0f0      	beq.n	8007bb8 <HAL_RCC_OscConfig+0x38c>
 8007bd6:	e015      	b.n	8007c04 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bd8:	4b4e      	ldr	r3, [pc, #312]	@ (8007d14 <HAL_RCC_OscConfig+0x4e8>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bde:	f7fd fbcb 	bl	8005378 <HAL_GetTick>
 8007be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007be4:	e008      	b.n	8007bf8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007be6:	f7fd fbc7 	bl	8005378 <HAL_GetTick>
 8007bea:	4602      	mov	r2, r0
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d901      	bls.n	8007bf8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e140      	b.n	8007e7a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007bf8:	4b41      	ldr	r3, [pc, #260]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bfc:	f003 0302 	and.w	r3, r3, #2
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1f0      	bne.n	8007be6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0304 	and.w	r3, r3, #4
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f000 80b5 	beq.w	8007d7c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c12:	2300      	movs	r3, #0
 8007c14:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c16:	4b3a      	ldr	r3, [pc, #232]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10d      	bne.n	8007c3e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c22:	4b37      	ldr	r3, [pc, #220]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c26:	4a36      	ldr	r2, [pc, #216]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c2c:	6253      	str	r3, [r2, #36]	@ 0x24
 8007c2e:	4b34      	ldr	r3, [pc, #208]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c36:	60bb      	str	r3, [r7, #8]
 8007c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c3e:	4b36      	ldr	r3, [pc, #216]	@ (8007d18 <HAL_RCC_OscConfig+0x4ec>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d118      	bne.n	8007c7c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c4a:	4b33      	ldr	r3, [pc, #204]	@ (8007d18 <HAL_RCC_OscConfig+0x4ec>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a32      	ldr	r2, [pc, #200]	@ (8007d18 <HAL_RCC_OscConfig+0x4ec>)
 8007c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c56:	f7fd fb8f 	bl	8005378 <HAL_GetTick>
 8007c5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c5c:	e008      	b.n	8007c70 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c5e:	f7fd fb8b 	bl	8005378 <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	2b64      	cmp	r3, #100	@ 0x64
 8007c6a:	d901      	bls.n	8007c70 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e104      	b.n	8007e7a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c70:	4b29      	ldr	r3, [pc, #164]	@ (8007d18 <HAL_RCC_OscConfig+0x4ec>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d0f0      	beq.n	8007c5e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d106      	bne.n	8007c92 <HAL_RCC_OscConfig+0x466>
 8007c84:	4b1e      	ldr	r3, [pc, #120]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c88:	4a1d      	ldr	r2, [pc, #116]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007c8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c8e:	6353      	str	r3, [r2, #52]	@ 0x34
 8007c90:	e02d      	b.n	8007cee <HAL_RCC_OscConfig+0x4c2>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10c      	bne.n	8007cb4 <HAL_RCC_OscConfig+0x488>
 8007c9a:	4b19      	ldr	r3, [pc, #100]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c9e:	4a18      	ldr	r2, [pc, #96]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007ca0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ca4:	6353      	str	r3, [r2, #52]	@ 0x34
 8007ca6:	4b16      	ldr	r3, [pc, #88]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007caa:	4a15      	ldr	r2, [pc, #84]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007cac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007cb0:	6353      	str	r3, [r2, #52]	@ 0x34
 8007cb2:	e01c      	b.n	8007cee <HAL_RCC_OscConfig+0x4c2>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	2b05      	cmp	r3, #5
 8007cba:	d10c      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x4aa>
 8007cbc:	4b10      	ldr	r3, [pc, #64]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cc0:	4a0f      	ldr	r2, [pc, #60]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007cc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007cc6:	6353      	str	r3, [r2, #52]	@ 0x34
 8007cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cd2:	6353      	str	r3, [r2, #52]	@ 0x34
 8007cd4:	e00b      	b.n	8007cee <HAL_RCC_OscConfig+0x4c2>
 8007cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cda:	4a09      	ldr	r2, [pc, #36]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007cdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ce0:	6353      	str	r3, [r2, #52]	@ 0x34
 8007ce2:	4b07      	ldr	r3, [pc, #28]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ce6:	4a06      	ldr	r2, [pc, #24]	@ (8007d00 <HAL_RCC_OscConfig+0x4d4>)
 8007ce8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007cec:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d024      	beq.n	8007d40 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cf6:	f7fd fb3f 	bl	8005378 <HAL_GetTick>
 8007cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cfc:	e019      	b.n	8007d32 <HAL_RCC_OscConfig+0x506>
 8007cfe:	bf00      	nop
 8007d00:	40023800 	.word	0x40023800
 8007d04:	0800cf90 	.word	0x0800cf90
 8007d08:	20000044 	.word	0x20000044
 8007d0c:	20000100 	.word	0x20000100
 8007d10:	42470020 	.word	0x42470020
 8007d14:	42470680 	.word	0x42470680
 8007d18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d1c:	f7fd fb2c 	bl	8005378 <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d901      	bls.n	8007d32 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e0a3      	b.n	8007e7a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d32:	4b54      	ldr	r3, [pc, #336]	@ (8007e84 <HAL_RCC_OscConfig+0x658>)
 8007d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d0ee      	beq.n	8007d1c <HAL_RCC_OscConfig+0x4f0>
 8007d3e:	e014      	b.n	8007d6a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d40:	f7fd fb1a 	bl	8005378 <HAL_GetTick>
 8007d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d46:	e00a      	b.n	8007d5e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d48:	f7fd fb16 	bl	8005378 <HAL_GetTick>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d901      	bls.n	8007d5e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e08d      	b.n	8007e7a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d5e:	4b49      	ldr	r3, [pc, #292]	@ (8007e84 <HAL_RCC_OscConfig+0x658>)
 8007d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1ee      	bne.n	8007d48 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007d6a:	7ffb      	ldrb	r3, [r7, #31]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d105      	bne.n	8007d7c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d70:	4b44      	ldr	r3, [pc, #272]	@ (8007e84 <HAL_RCC_OscConfig+0x658>)
 8007d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d74:	4a43      	ldr	r2, [pc, #268]	@ (8007e84 <HAL_RCC_OscConfig+0x658>)
 8007d76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d7a:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d079      	beq.n	8007e78 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	2b0c      	cmp	r3, #12
 8007d88:	d056      	beq.n	8007e38 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d13b      	bne.n	8007e0a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d92:	4b3d      	ldr	r3, [pc, #244]	@ (8007e88 <HAL_RCC_OscConfig+0x65c>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d98:	f7fd faee 	bl	8005378 <HAL_GetTick>
 8007d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d9e:	e008      	b.n	8007db2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007da0:	f7fd faea 	bl	8005378 <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d901      	bls.n	8007db2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e063      	b.n	8007e7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007db2:	4b34      	ldr	r3, [pc, #208]	@ (8007e84 <HAL_RCC_OscConfig+0x658>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1f0      	bne.n	8007da0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007dbe:	4b31      	ldr	r3, [pc, #196]	@ (8007e84 <HAL_RCC_OscConfig+0x658>)
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dce:	4319      	orrs	r1, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dd4:	430b      	orrs	r3, r1
 8007dd6:	492b      	ldr	r1, [pc, #172]	@ (8007e84 <HAL_RCC_OscConfig+0x658>)
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8007e88 <HAL_RCC_OscConfig+0x65c>)
 8007dde:	2201      	movs	r2, #1
 8007de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007de2:	f7fd fac9 	bl	8005378 <HAL_GetTick>
 8007de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007de8:	e008      	b.n	8007dfc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dea:	f7fd fac5 	bl	8005378 <HAL_GetTick>
 8007dee:	4602      	mov	r2, r0
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d901      	bls.n	8007dfc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e03e      	b.n	8007e7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007dfc:	4b21      	ldr	r3, [pc, #132]	@ (8007e84 <HAL_RCC_OscConfig+0x658>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d0f0      	beq.n	8007dea <HAL_RCC_OscConfig+0x5be>
 8007e08:	e036      	b.n	8007e78 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8007e88 <HAL_RCC_OscConfig+0x65c>)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e10:	f7fd fab2 	bl	8005378 <HAL_GetTick>
 8007e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e16:	e008      	b.n	8007e2a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e18:	f7fd faae 	bl	8005378 <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d901      	bls.n	8007e2a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e027      	b.n	8007e7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e2a:	4b16      	ldr	r3, [pc, #88]	@ (8007e84 <HAL_RCC_OscConfig+0x658>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1f0      	bne.n	8007e18 <HAL_RCC_OscConfig+0x5ec>
 8007e36:	e01f      	b.n	8007e78 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d101      	bne.n	8007e44 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e01a      	b.n	8007e7a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007e44:	4b0f      	ldr	r3, [pc, #60]	@ (8007e84 <HAL_RCC_OscConfig+0x658>)
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d10d      	bne.n	8007e74 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d106      	bne.n	8007e74 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d001      	beq.n	8007e78 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e000      	b.n	8007e7a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3720      	adds	r7, #32
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	40023800 	.word	0x40023800
 8007e88:	42470060 	.word	0x42470060

08007e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e11a      	b.n	80080d6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ea0:	4b8f      	ldr	r3, [pc, #572]	@ (80080e0 <HAL_RCC_ClockConfig+0x254>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	683a      	ldr	r2, [r7, #0]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d919      	bls.n	8007ee2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d105      	bne.n	8007ec0 <HAL_RCC_ClockConfig+0x34>
 8007eb4:	4b8a      	ldr	r3, [pc, #552]	@ (80080e0 <HAL_RCC_ClockConfig+0x254>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a89      	ldr	r2, [pc, #548]	@ (80080e0 <HAL_RCC_ClockConfig+0x254>)
 8007eba:	f043 0304 	orr.w	r3, r3, #4
 8007ebe:	6013      	str	r3, [r2, #0]
 8007ec0:	4b87      	ldr	r3, [pc, #540]	@ (80080e0 <HAL_RCC_ClockConfig+0x254>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f023 0201 	bic.w	r2, r3, #1
 8007ec8:	4985      	ldr	r1, [pc, #532]	@ (80080e0 <HAL_RCC_ClockConfig+0x254>)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ed0:	4b83      	ldr	r3, [pc, #524]	@ (80080e0 <HAL_RCC_ClockConfig+0x254>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	683a      	ldr	r2, [r7, #0]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d001      	beq.n	8007ee2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e0f9      	b.n	80080d6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 0302 	and.w	r3, r3, #2
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d008      	beq.n	8007f00 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007eee:	4b7d      	ldr	r3, [pc, #500]	@ (80080e4 <HAL_RCC_ClockConfig+0x258>)
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	497a      	ldr	r1, [pc, #488]	@ (80080e4 <HAL_RCC_ClockConfig+0x258>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 808e 	beq.w	800802a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d107      	bne.n	8007f26 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f16:	4b73      	ldr	r3, [pc, #460]	@ (80080e4 <HAL_RCC_ClockConfig+0x258>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d121      	bne.n	8007f66 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e0d7      	b.n	80080d6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	d107      	bne.n	8007f3e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f2e:	4b6d      	ldr	r3, [pc, #436]	@ (80080e4 <HAL_RCC_ClockConfig+0x258>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d115      	bne.n	8007f66 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e0cb      	b.n	80080d6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d107      	bne.n	8007f56 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f46:	4b67      	ldr	r3, [pc, #412]	@ (80080e4 <HAL_RCC_ClockConfig+0x258>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0302 	and.w	r3, r3, #2
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d109      	bne.n	8007f66 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e0bf      	b.n	80080d6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007f56:	4b63      	ldr	r3, [pc, #396]	@ (80080e4 <HAL_RCC_ClockConfig+0x258>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e0b7      	b.n	80080d6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f66:	4b5f      	ldr	r3, [pc, #380]	@ (80080e4 <HAL_RCC_ClockConfig+0x258>)
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f023 0203 	bic.w	r2, r3, #3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	495c      	ldr	r1, [pc, #368]	@ (80080e4 <HAL_RCC_ClockConfig+0x258>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f78:	f7fd f9fe 	bl	8005378 <HAL_GetTick>
 8007f7c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d112      	bne.n	8007fac <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007f86:	e00a      	b.n	8007f9e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f88:	f7fd f9f6 	bl	8005378 <HAL_GetTick>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d901      	bls.n	8007f9e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e09b      	b.n	80080d6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007f9e:	4b51      	ldr	r3, [pc, #324]	@ (80080e4 <HAL_RCC_ClockConfig+0x258>)
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f003 030c 	and.w	r3, r3, #12
 8007fa6:	2b08      	cmp	r3, #8
 8007fa8:	d1ee      	bne.n	8007f88 <HAL_RCC_ClockConfig+0xfc>
 8007faa:	e03e      	b.n	800802a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	2b03      	cmp	r3, #3
 8007fb2:	d112      	bne.n	8007fda <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007fb4:	e00a      	b.n	8007fcc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fb6:	f7fd f9df 	bl	8005378 <HAL_GetTick>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d901      	bls.n	8007fcc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e084      	b.n	80080d6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007fcc:	4b45      	ldr	r3, [pc, #276]	@ (80080e4 <HAL_RCC_ClockConfig+0x258>)
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f003 030c 	and.w	r3, r3, #12
 8007fd4:	2b0c      	cmp	r3, #12
 8007fd6:	d1ee      	bne.n	8007fb6 <HAL_RCC_ClockConfig+0x12a>
 8007fd8:	e027      	b.n	800802a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d11d      	bne.n	800801e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007fe2:	e00a      	b.n	8007ffa <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fe4:	f7fd f9c8 	bl	8005378 <HAL_GetTick>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d901      	bls.n	8007ffa <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e06d      	b.n	80080d6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007ffa:	4b3a      	ldr	r3, [pc, #232]	@ (80080e4 <HAL_RCC_ClockConfig+0x258>)
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f003 030c 	and.w	r3, r3, #12
 8008002:	2b04      	cmp	r3, #4
 8008004:	d1ee      	bne.n	8007fe4 <HAL_RCC_ClockConfig+0x158>
 8008006:	e010      	b.n	800802a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008008:	f7fd f9b6 	bl	8005378 <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008016:	4293      	cmp	r3, r2
 8008018:	d901      	bls.n	800801e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	e05b      	b.n	80080d6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800801e:	4b31      	ldr	r3, [pc, #196]	@ (80080e4 <HAL_RCC_ClockConfig+0x258>)
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	f003 030c 	and.w	r3, r3, #12
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1ee      	bne.n	8008008 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800802a:	4b2d      	ldr	r3, [pc, #180]	@ (80080e0 <HAL_RCC_ClockConfig+0x254>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	429a      	cmp	r2, r3
 8008036:	d219      	bcs.n	800806c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d105      	bne.n	800804a <HAL_RCC_ClockConfig+0x1be>
 800803e:	4b28      	ldr	r3, [pc, #160]	@ (80080e0 <HAL_RCC_ClockConfig+0x254>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a27      	ldr	r2, [pc, #156]	@ (80080e0 <HAL_RCC_ClockConfig+0x254>)
 8008044:	f043 0304 	orr.w	r3, r3, #4
 8008048:	6013      	str	r3, [r2, #0]
 800804a:	4b25      	ldr	r3, [pc, #148]	@ (80080e0 <HAL_RCC_ClockConfig+0x254>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f023 0201 	bic.w	r2, r3, #1
 8008052:	4923      	ldr	r1, [pc, #140]	@ (80080e0 <HAL_RCC_ClockConfig+0x254>)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	4313      	orrs	r3, r2
 8008058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800805a:	4b21      	ldr	r3, [pc, #132]	@ (80080e0 <HAL_RCC_ClockConfig+0x254>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	683a      	ldr	r2, [r7, #0]
 8008064:	429a      	cmp	r2, r3
 8008066:	d001      	beq.n	800806c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	e034      	b.n	80080d6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0304 	and.w	r3, r3, #4
 8008074:	2b00      	cmp	r3, #0
 8008076:	d008      	beq.n	800808a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008078:	4b1a      	ldr	r3, [pc, #104]	@ (80080e4 <HAL_RCC_ClockConfig+0x258>)
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	4917      	ldr	r1, [pc, #92]	@ (80080e4 <HAL_RCC_ClockConfig+0x258>)
 8008086:	4313      	orrs	r3, r2
 8008088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0308 	and.w	r3, r3, #8
 8008092:	2b00      	cmp	r3, #0
 8008094:	d009      	beq.n	80080aa <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008096:	4b13      	ldr	r3, [pc, #76]	@ (80080e4 <HAL_RCC_ClockConfig+0x258>)
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	00db      	lsls	r3, r3, #3
 80080a4:	490f      	ldr	r1, [pc, #60]	@ (80080e4 <HAL_RCC_ClockConfig+0x258>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80080aa:	f000 f823 	bl	80080f4 <HAL_RCC_GetSysClockFreq>
 80080ae:	4602      	mov	r2, r0
 80080b0:	4b0c      	ldr	r3, [pc, #48]	@ (80080e4 <HAL_RCC_ClockConfig+0x258>)
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	091b      	lsrs	r3, r3, #4
 80080b6:	f003 030f 	and.w	r3, r3, #15
 80080ba:	490b      	ldr	r1, [pc, #44]	@ (80080e8 <HAL_RCC_ClockConfig+0x25c>)
 80080bc:	5ccb      	ldrb	r3, [r1, r3]
 80080be:	fa22 f303 	lsr.w	r3, r2, r3
 80080c2:	4a0a      	ldr	r2, [pc, #40]	@ (80080ec <HAL_RCC_ClockConfig+0x260>)
 80080c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80080c6:	4b0a      	ldr	r3, [pc, #40]	@ (80080f0 <HAL_RCC_ClockConfig+0x264>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7fd f908 	bl	80052e0 <HAL_InitTick>
 80080d0:	4603      	mov	r3, r0
 80080d2:	72fb      	strb	r3, [r7, #11]

  return status;
 80080d4:	7afb      	ldrb	r3, [r7, #11]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	40023c00 	.word	0x40023c00
 80080e4:	40023800 	.word	0x40023800
 80080e8:	0800cf90 	.word	0x0800cf90
 80080ec:	20000044 	.word	0x20000044
 80080f0:	20000100 	.word	0x20000100

080080f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080f8:	b092      	sub	sp, #72	@ 0x48
 80080fa:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80080fc:	4b79      	ldr	r3, [pc, #484]	@ (80082e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008104:	f003 030c 	and.w	r3, r3, #12
 8008108:	2b0c      	cmp	r3, #12
 800810a:	d00d      	beq.n	8008128 <HAL_RCC_GetSysClockFreq+0x34>
 800810c:	2b0c      	cmp	r3, #12
 800810e:	f200 80d5 	bhi.w	80082bc <HAL_RCC_GetSysClockFreq+0x1c8>
 8008112:	2b04      	cmp	r3, #4
 8008114:	d002      	beq.n	800811c <HAL_RCC_GetSysClockFreq+0x28>
 8008116:	2b08      	cmp	r3, #8
 8008118:	d003      	beq.n	8008122 <HAL_RCC_GetSysClockFreq+0x2e>
 800811a:	e0cf      	b.n	80082bc <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800811c:	4b72      	ldr	r3, [pc, #456]	@ (80082e8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800811e:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8008120:	e0da      	b.n	80082d8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008122:	4b72      	ldr	r3, [pc, #456]	@ (80082ec <HAL_RCC_GetSysClockFreq+0x1f8>)
 8008124:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8008126:	e0d7      	b.n	80082d8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8008128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800812a:	0c9b      	lsrs	r3, r3, #18
 800812c:	f003 020f 	and.w	r2, r3, #15
 8008130:	4b6f      	ldr	r3, [pc, #444]	@ (80082f0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8008132:	5c9b      	ldrb	r3, [r3, r2]
 8008134:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8008136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008138:	0d9b      	lsrs	r3, r3, #22
 800813a:	f003 0303 	and.w	r3, r3, #3
 800813e:	3301      	adds	r3, #1
 8008140:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008142:	4b68      	ldr	r3, [pc, #416]	@ (80082e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d05d      	beq.n	800820a <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800814e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008150:	2200      	movs	r2, #0
 8008152:	4618      	mov	r0, r3
 8008154:	4611      	mov	r1, r2
 8008156:	4604      	mov	r4, r0
 8008158:	460d      	mov	r5, r1
 800815a:	4622      	mov	r2, r4
 800815c:	462b      	mov	r3, r5
 800815e:	f04f 0000 	mov.w	r0, #0
 8008162:	f04f 0100 	mov.w	r1, #0
 8008166:	0159      	lsls	r1, r3, #5
 8008168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800816c:	0150      	lsls	r0, r2, #5
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	4621      	mov	r1, r4
 8008174:	1a51      	subs	r1, r2, r1
 8008176:	6139      	str	r1, [r7, #16]
 8008178:	4629      	mov	r1, r5
 800817a:	eb63 0301 	sbc.w	r3, r3, r1
 800817e:	617b      	str	r3, [r7, #20]
 8008180:	f04f 0200 	mov.w	r2, #0
 8008184:	f04f 0300 	mov.w	r3, #0
 8008188:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800818c:	4659      	mov	r1, fp
 800818e:	018b      	lsls	r3, r1, #6
 8008190:	4651      	mov	r1, sl
 8008192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008196:	4651      	mov	r1, sl
 8008198:	018a      	lsls	r2, r1, #6
 800819a:	46d4      	mov	ip, sl
 800819c:	ebb2 080c 	subs.w	r8, r2, ip
 80081a0:	4659      	mov	r1, fp
 80081a2:	eb63 0901 	sbc.w	r9, r3, r1
 80081a6:	f04f 0200 	mov.w	r2, #0
 80081aa:	f04f 0300 	mov.w	r3, #0
 80081ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081ba:	4690      	mov	r8, r2
 80081bc:	4699      	mov	r9, r3
 80081be:	4623      	mov	r3, r4
 80081c0:	eb18 0303 	adds.w	r3, r8, r3
 80081c4:	60bb      	str	r3, [r7, #8]
 80081c6:	462b      	mov	r3, r5
 80081c8:	eb49 0303 	adc.w	r3, r9, r3
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	f04f 0200 	mov.w	r2, #0
 80081d2:	f04f 0300 	mov.w	r3, #0
 80081d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80081da:	4629      	mov	r1, r5
 80081dc:	024b      	lsls	r3, r1, #9
 80081de:	4620      	mov	r0, r4
 80081e0:	4629      	mov	r1, r5
 80081e2:	4604      	mov	r4, r0
 80081e4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80081e8:	4601      	mov	r1, r0
 80081ea:	024a      	lsls	r2, r1, #9
 80081ec:	4610      	mov	r0, r2
 80081ee:	4619      	mov	r1, r3
 80081f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f2:	2200      	movs	r2, #0
 80081f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80081fc:	f7f8 ff80 	bl	8001100 <__aeabi_uldivmod>
 8008200:	4602      	mov	r2, r0
 8008202:	460b      	mov	r3, r1
 8008204:	4613      	mov	r3, r2
 8008206:	647b      	str	r3, [r7, #68]	@ 0x44
 8008208:	e055      	b.n	80082b6 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800820a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800820c:	2200      	movs	r2, #0
 800820e:	623b      	str	r3, [r7, #32]
 8008210:	627a      	str	r2, [r7, #36]	@ 0x24
 8008212:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008216:	4642      	mov	r2, r8
 8008218:	464b      	mov	r3, r9
 800821a:	f04f 0000 	mov.w	r0, #0
 800821e:	f04f 0100 	mov.w	r1, #0
 8008222:	0159      	lsls	r1, r3, #5
 8008224:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008228:	0150      	lsls	r0, r2, #5
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	46c4      	mov	ip, r8
 8008230:	ebb2 0a0c 	subs.w	sl, r2, ip
 8008234:	4640      	mov	r0, r8
 8008236:	4649      	mov	r1, r9
 8008238:	468c      	mov	ip, r1
 800823a:	eb63 0b0c 	sbc.w	fp, r3, ip
 800823e:	f04f 0200 	mov.w	r2, #0
 8008242:	f04f 0300 	mov.w	r3, #0
 8008246:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800824a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800824e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008252:	ebb2 040a 	subs.w	r4, r2, sl
 8008256:	eb63 050b 	sbc.w	r5, r3, fp
 800825a:	f04f 0200 	mov.w	r2, #0
 800825e:	f04f 0300 	mov.w	r3, #0
 8008262:	00eb      	lsls	r3, r5, #3
 8008264:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008268:	00e2      	lsls	r2, r4, #3
 800826a:	4614      	mov	r4, r2
 800826c:	461d      	mov	r5, r3
 800826e:	4603      	mov	r3, r0
 8008270:	18e3      	adds	r3, r4, r3
 8008272:	603b      	str	r3, [r7, #0]
 8008274:	460b      	mov	r3, r1
 8008276:	eb45 0303 	adc.w	r3, r5, r3
 800827a:	607b      	str	r3, [r7, #4]
 800827c:	f04f 0200 	mov.w	r2, #0
 8008280:	f04f 0300 	mov.w	r3, #0
 8008284:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008288:	4629      	mov	r1, r5
 800828a:	028b      	lsls	r3, r1, #10
 800828c:	4620      	mov	r0, r4
 800828e:	4629      	mov	r1, r5
 8008290:	4604      	mov	r4, r0
 8008292:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8008296:	4601      	mov	r1, r0
 8008298:	028a      	lsls	r2, r1, #10
 800829a:	4610      	mov	r0, r2
 800829c:	4619      	mov	r1, r3
 800829e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082a0:	2200      	movs	r2, #0
 80082a2:	61bb      	str	r3, [r7, #24]
 80082a4:	61fa      	str	r2, [r7, #28]
 80082a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082aa:	f7f8 ff29 	bl	8001100 <__aeabi_uldivmod>
 80082ae:	4602      	mov	r2, r0
 80082b0:	460b      	mov	r3, r1
 80082b2:	4613      	mov	r3, r2
 80082b4:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 80082b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082b8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80082ba:	e00d      	b.n	80082d8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80082bc:	4b09      	ldr	r3, [pc, #36]	@ (80082e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	0b5b      	lsrs	r3, r3, #13
 80082c2:	f003 0307 	and.w	r3, r3, #7
 80082c6:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80082c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ca:	3301      	adds	r3, #1
 80082cc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80082d0:	fa02 f303 	lsl.w	r3, r2, r3
 80082d4:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80082d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80082d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3748      	adds	r7, #72	@ 0x48
 80082de:	46bd      	mov	sp, r7
 80082e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082e4:	40023800 	.word	0x40023800
 80082e8:	00f42400 	.word	0x00f42400
 80082ec:	007a1200 	.word	0x007a1200
 80082f0:	0800cf84 	.word	0x0800cf84

080082f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082f4:	b480      	push	{r7}
 80082f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082f8:	4b02      	ldr	r3, [pc, #8]	@ (8008304 <HAL_RCC_GetHCLKFreq+0x10>)
 80082fa:	681b      	ldr	r3, [r3, #0]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	46bd      	mov	sp, r7
 8008300:	bc80      	pop	{r7}
 8008302:	4770      	bx	lr
 8008304:	20000044 	.word	0x20000044

08008308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800830c:	f7ff fff2 	bl	80082f4 <HAL_RCC_GetHCLKFreq>
 8008310:	4602      	mov	r2, r0
 8008312:	4b05      	ldr	r3, [pc, #20]	@ (8008328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	0a1b      	lsrs	r3, r3, #8
 8008318:	f003 0307 	and.w	r3, r3, #7
 800831c:	4903      	ldr	r1, [pc, #12]	@ (800832c <HAL_RCC_GetPCLK1Freq+0x24>)
 800831e:	5ccb      	ldrb	r3, [r1, r3]
 8008320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008324:	4618      	mov	r0, r3
 8008326:	bd80      	pop	{r7, pc}
 8008328:	40023800 	.word	0x40023800
 800832c:	0800cfa0 	.word	0x0800cfa0

08008330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008334:	f7ff ffde 	bl	80082f4 <HAL_RCC_GetHCLKFreq>
 8008338:	4602      	mov	r2, r0
 800833a:	4b05      	ldr	r3, [pc, #20]	@ (8008350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	0adb      	lsrs	r3, r3, #11
 8008340:	f003 0307 	and.w	r3, r3, #7
 8008344:	4903      	ldr	r1, [pc, #12]	@ (8008354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008346:	5ccb      	ldrb	r3, [r1, r3]
 8008348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800834c:	4618      	mov	r0, r3
 800834e:	bd80      	pop	{r7, pc}
 8008350:	40023800 	.word	0x40023800
 8008354:	0800cfa0 	.word	0x0800cfa0

08008358 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8008358:	b480      	push	{r7}
 800835a:	b087      	sub	sp, #28
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008360:	2300      	movs	r3, #0
 8008362:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008364:	4b29      	ldr	r3, [pc, #164]	@ (800840c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d12c      	bne.n	80083ca <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008370:	4b26      	ldr	r3, [pc, #152]	@ (800840c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008378:	2b00      	cmp	r3, #0
 800837a:	d005      	beq.n	8008388 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800837c:	4b24      	ldr	r3, [pc, #144]	@ (8008410 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8008384:	617b      	str	r3, [r7, #20]
 8008386:	e016      	b.n	80083b6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008388:	4b20      	ldr	r3, [pc, #128]	@ (800840c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800838a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800838c:	4a1f      	ldr	r2, [pc, #124]	@ (800840c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800838e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008392:	6253      	str	r3, [r2, #36]	@ 0x24
 8008394:	4b1d      	ldr	r3, [pc, #116]	@ (800840c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800839c:	60fb      	str	r3, [r7, #12]
 800839e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80083a0:	4b1b      	ldr	r3, [pc, #108]	@ (8008410 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80083a8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80083aa:	4b18      	ldr	r3, [pc, #96]	@ (800840c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80083ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ae:	4a17      	ldr	r2, [pc, #92]	@ (800840c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80083b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80083b4:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80083bc:	d105      	bne.n	80083ca <RCC_SetFlashLatencyFromMSIRange+0x72>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80083c4:	d101      	bne.n	80083ca <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80083c6:	2301      	movs	r3, #1
 80083c8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d105      	bne.n	80083dc <RCC_SetFlashLatencyFromMSIRange+0x84>
 80083d0:	4b10      	ldr	r3, [pc, #64]	@ (8008414 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a0f      	ldr	r2, [pc, #60]	@ (8008414 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80083d6:	f043 0304 	orr.w	r3, r3, #4
 80083da:	6013      	str	r3, [r2, #0]
 80083dc:	4b0d      	ldr	r3, [pc, #52]	@ (8008414 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f023 0201 	bic.w	r2, r3, #1
 80083e4:	490b      	ldr	r1, [pc, #44]	@ (8008414 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80083ec:	4b09      	ldr	r3, [pc, #36]	@ (8008414 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 0301 	and.w	r3, r3, #1
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d001      	beq.n	80083fe <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e000      	b.n	8008400 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	371c      	adds	r7, #28
 8008404:	46bd      	mov	sp, r7
 8008406:	bc80      	pop	{r7}
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	40023800 	.word	0x40023800
 8008410:	40007000 	.word	0x40007000
 8008414:	40023c00 	.word	0x40023c00

08008418 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e07b      	b.n	8008522 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800842e:	2b00      	cmp	r3, #0
 8008430:	d108      	bne.n	8008444 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800843a:	d009      	beq.n	8008450 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	61da      	str	r2, [r3, #28]
 8008442:	e005      	b.n	8008450 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d106      	bne.n	8008470 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7f9 fb48 	bl	8001b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2202      	movs	r2, #2
 8008474:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008486:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008498:	431a      	orrs	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80084a2:	431a      	orrs	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	f003 0302 	and.w	r3, r3, #2
 80084ac:	431a      	orrs	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	431a      	orrs	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084c0:	431a      	orrs	r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	69db      	ldr	r3, [r3, #28]
 80084c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084ca:	431a      	orrs	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a1b      	ldr	r3, [r3, #32]
 80084d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084d4:	ea42 0103 	orr.w	r1, r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084dc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	430a      	orrs	r2, r1
 80084e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	0c1b      	lsrs	r3, r3, #16
 80084ee:	f003 0104 	and.w	r1, r3, #4
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f6:	f003 0210 	and.w	r2, r3, #16
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	430a      	orrs	r2, r1
 8008500:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	69da      	ldr	r2, [r3, #28]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008510:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b088      	sub	sp, #32
 800852e:	af00      	add	r7, sp, #0
 8008530:	60f8      	str	r0, [r7, #12]
 8008532:	60b9      	str	r1, [r7, #8]
 8008534:	603b      	str	r3, [r7, #0]
 8008536:	4613      	mov	r3, r2
 8008538:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008544:	2b01      	cmp	r3, #1
 8008546:	d101      	bne.n	800854c <HAL_SPI_Transmit+0x22>
 8008548:	2302      	movs	r3, #2
 800854a:	e12d      	b.n	80087a8 <HAL_SPI_Transmit+0x27e>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008554:	f7fc ff10 	bl	8005378 <HAL_GetTick>
 8008558:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800855a:	88fb      	ldrh	r3, [r7, #6]
 800855c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008564:	b2db      	uxtb	r3, r3
 8008566:	2b01      	cmp	r3, #1
 8008568:	d002      	beq.n	8008570 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800856a:	2302      	movs	r3, #2
 800856c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800856e:	e116      	b.n	800879e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <HAL_SPI_Transmit+0x52>
 8008576:	88fb      	ldrh	r3, [r7, #6]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d102      	bne.n	8008582 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008580:	e10d      	b.n	800879e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2203      	movs	r2, #3
 8008586:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	88fa      	ldrh	r2, [r7, #6]
 800859a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	88fa      	ldrh	r2, [r7, #6]
 80085a0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085c8:	d10f      	bne.n	80085ea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085f4:	2b40      	cmp	r3, #64	@ 0x40
 80085f6:	d007      	beq.n	8008608 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008606:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008610:	d14f      	bne.n	80086b2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <HAL_SPI_Transmit+0xf6>
 800861a:	8afb      	ldrh	r3, [r7, #22]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d142      	bne.n	80086a6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008624:	881a      	ldrh	r2, [r3, #0]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008630:	1c9a      	adds	r2, r3, #2
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800863a:	b29b      	uxth	r3, r3
 800863c:	3b01      	subs	r3, #1
 800863e:	b29a      	uxth	r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008644:	e02f      	b.n	80086a6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	f003 0302 	and.w	r3, r3, #2
 8008650:	2b02      	cmp	r3, #2
 8008652:	d112      	bne.n	800867a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008658:	881a      	ldrh	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008664:	1c9a      	adds	r2, r3, #2
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800866e:	b29b      	uxth	r3, r3
 8008670:	3b01      	subs	r3, #1
 8008672:	b29a      	uxth	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008678:	e015      	b.n	80086a6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800867a:	f7fc fe7d 	bl	8005378 <HAL_GetTick>
 800867e:	4602      	mov	r2, r0
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	683a      	ldr	r2, [r7, #0]
 8008686:	429a      	cmp	r2, r3
 8008688:	d803      	bhi.n	8008692 <HAL_SPI_Transmit+0x168>
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008690:	d102      	bne.n	8008698 <HAL_SPI_Transmit+0x16e>
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d106      	bne.n	80086a6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8008698:	2303      	movs	r3, #3
 800869a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80086a4:	e07b      	b.n	800879e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1ca      	bne.n	8008646 <HAL_SPI_Transmit+0x11c>
 80086b0:	e050      	b.n	8008754 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d002      	beq.n	80086c0 <HAL_SPI_Transmit+0x196>
 80086ba:	8afb      	ldrh	r3, [r7, #22]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d144      	bne.n	800874a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	330c      	adds	r3, #12
 80086ca:	7812      	ldrb	r2, [r2, #0]
 80086cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086d2:	1c5a      	adds	r2, r3, #1
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086dc:	b29b      	uxth	r3, r3
 80086de:	3b01      	subs	r3, #1
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80086e6:	e030      	b.n	800874a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	f003 0302 	and.w	r3, r3, #2
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d113      	bne.n	800871e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	330c      	adds	r3, #12
 8008700:	7812      	ldrb	r2, [r2, #0]
 8008702:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008708:	1c5a      	adds	r2, r3, #1
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008712:	b29b      	uxth	r3, r3
 8008714:	3b01      	subs	r3, #1
 8008716:	b29a      	uxth	r2, r3
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800871c:	e015      	b.n	800874a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800871e:	f7fc fe2b 	bl	8005378 <HAL_GetTick>
 8008722:	4602      	mov	r2, r0
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	429a      	cmp	r2, r3
 800872c:	d803      	bhi.n	8008736 <HAL_SPI_Transmit+0x20c>
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008734:	d102      	bne.n	800873c <HAL_SPI_Transmit+0x212>
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d106      	bne.n	800874a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800873c:	2303      	movs	r3, #3
 800873e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008748:	e029      	b.n	800879e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800874e:	b29b      	uxth	r3, r3
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1c9      	bne.n	80086e8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008754:	69ba      	ldr	r2, [r7, #24]
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f000 f9c3 	bl	8008ae4 <SPI_EndRxTxTransaction>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2220      	movs	r2, #32
 8008768:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10a      	bne.n	8008788 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008772:	2300      	movs	r3, #0
 8008774:	613b      	str	r3, [r7, #16]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	613b      	str	r3, [r7, #16]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	613b      	str	r3, [r7, #16]
 8008786:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800878c:	2b00      	cmp	r3, #0
 800878e:	d002      	beq.n	8008796 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	77fb      	strb	r3, [r7, #31]
 8008794:	e003      	b.n	800879e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80087a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3720      	adds	r7, #32
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b088      	sub	sp, #32
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10e      	bne.n	80087f0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d009      	beq.n	80087f0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d004      	beq.n	80087f0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	4798      	blx	r3
    return;
 80087ee:	e0ce      	b.n	800898e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d009      	beq.n	800880e <HAL_SPI_IRQHandler+0x5e>
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008800:	2b00      	cmp	r3, #0
 8008802:	d004      	beq.n	800880e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	4798      	blx	r3
    return;
 800880c:	e0bf      	b.n	800898e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	f003 0320 	and.w	r3, r3, #32
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10a      	bne.n	800882e <HAL_SPI_IRQHandler+0x7e>
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800881e:	2b00      	cmp	r3, #0
 8008820:	d105      	bne.n	800882e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008828:	2b00      	cmp	r3, #0
 800882a:	f000 80b0 	beq.w	800898e <HAL_SPI_IRQHandler+0x1de>
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	f003 0320 	and.w	r3, r3, #32
 8008834:	2b00      	cmp	r3, #0
 8008836:	f000 80aa 	beq.w	800898e <HAL_SPI_IRQHandler+0x1de>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#endif /* SPI_CR2_FRF */
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008840:	2b00      	cmp	r3, #0
 8008842:	d023      	beq.n	800888c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800884a:	b2db      	uxtb	r3, r3
 800884c:	2b03      	cmp	r3, #3
 800884e:	d011      	beq.n	8008874 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008854:	f043 0204 	orr.w	r2, r3, #4
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800885c:	2300      	movs	r3, #0
 800885e:	617b      	str	r3, [r7, #20]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	617b      	str	r3, [r7, #20]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	617b      	str	r3, [r7, #20]
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	e00b      	b.n	800888c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008874:	2300      	movs	r3, #0
 8008876:	613b      	str	r3, [r7, #16]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	613b      	str	r3, [r7, #16]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	613b      	str	r3, [r7, #16]
 8008888:	693b      	ldr	r3, [r7, #16]
        return;
 800888a:	e080      	b.n	800898e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	f003 0320 	and.w	r3, r3, #32
 8008892:	2b00      	cmp	r3, #0
 8008894:	d014      	beq.n	80088c0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800889a:	f043 0201 	orr.w	r2, r3, #1
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80088a2:	2300      	movs	r3, #0
 80088a4:	60fb      	str	r3, [r7, #12]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	60fb      	str	r3, [r7, #12]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088bc:	601a      	str	r2, [r3, #0]
 80088be:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
#if defined(SPI_CR2_FRF)
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00c      	beq.n	80088e4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088ce:	f043 0208 	orr.w	r2, r3, #8
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80088d6:	2300      	movs	r3, #0
 80088d8:	60bb      	str	r3, [r7, #8]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	60bb      	str	r3, [r7, #8]
 80088e2:	68bb      	ldr	r3, [r7, #8]
    }
#endif /* SPI_CR2_FRF */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d04f      	beq.n	800898c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685a      	ldr	r2, [r3, #4]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80088fa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	f003 0302 	and.w	r3, r3, #2
 800890a:	2b00      	cmp	r3, #0
 800890c:	d104      	bne.n	8008918 <HAL_SPI_IRQHandler+0x168>
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	2b00      	cmp	r3, #0
 8008916:	d034      	beq.n	8008982 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f022 0203 	bic.w	r2, r2, #3
 8008926:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800892c:	2b00      	cmp	r3, #0
 800892e:	d011      	beq.n	8008954 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008934:	4a17      	ldr	r2, [pc, #92]	@ (8008994 <HAL_SPI_IRQHandler+0x1e4>)
 8008936:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800893c:	4618      	mov	r0, r3
 800893e:	f7fd fbf8 	bl	8006132 <HAL_DMA_Abort_IT>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d005      	beq.n	8008954 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800894c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008958:	2b00      	cmp	r3, #0
 800895a:	d016      	beq.n	800898a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008960:	4a0c      	ldr	r2, [pc, #48]	@ (8008994 <HAL_SPI_IRQHandler+0x1e4>)
 8008962:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008968:	4618      	mov	r0, r3
 800896a:	f7fd fbe2 	bl	8006132 <HAL_DMA_Abort_IT>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00a      	beq.n	800898a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008978:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8008980:	e003      	b.n	800898a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f808 	bl	8008998 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008988:	e000      	b.n	800898c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800898a:	bf00      	nop
    return;
 800898c:	bf00      	nop
  }
}
 800898e:	3720      	adds	r7, #32
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	080089ab 	.word	0x080089ab

08008998 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bc80      	pop	{r7}
 80089a8:	4770      	bx	lr

080089aa <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b084      	sub	sp, #16
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2200      	movs	r2, #0
 80089bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f7ff ffe7 	bl	8008998 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80089ca:	bf00      	nop
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
	...

080089d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b088      	sub	sp, #32
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	603b      	str	r3, [r7, #0]
 80089e0:	4613      	mov	r3, r2
 80089e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80089e4:	f7fc fcc8 	bl	8005378 <HAL_GetTick>
 80089e8:	4602      	mov	r2, r0
 80089ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ec:	1a9b      	subs	r3, r3, r2
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	4413      	add	r3, r2
 80089f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80089f4:	f7fc fcc0 	bl	8005378 <HAL_GetTick>
 80089f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80089fa:	4b39      	ldr	r3, [pc, #228]	@ (8008ae0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	015b      	lsls	r3, r3, #5
 8008a00:	0d1b      	lsrs	r3, r3, #20
 8008a02:	69fa      	ldr	r2, [r7, #28]
 8008a04:	fb02 f303 	mul.w	r3, r2, r3
 8008a08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a0a:	e054      	b.n	8008ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a12:	d050      	beq.n	8008ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a14:	f7fc fcb0 	bl	8005378 <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	69fa      	ldr	r2, [r7, #28]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d902      	bls.n	8008a2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d13d      	bne.n	8008aa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	685a      	ldr	r2, [r3, #4]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008a38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a42:	d111      	bne.n	8008a68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a4c:	d004      	beq.n	8008a58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a56:	d107      	bne.n	8008a68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a70:	d10f      	bne.n	8008a92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008a80:	601a      	str	r2, [r3, #0]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008a90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e017      	b.n	8008ad6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d101      	bne.n	8008ab0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008aac:	2300      	movs	r3, #0
 8008aae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	689a      	ldr	r2, [r3, #8]
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	4013      	ands	r3, r2
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	bf0c      	ite	eq
 8008ac6:	2301      	moveq	r3, #1
 8008ac8:	2300      	movne	r3, #0
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	461a      	mov	r2, r3
 8008ace:	79fb      	ldrb	r3, [r7, #7]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d19b      	bne.n	8008a0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3720      	adds	r7, #32
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	20000044 	.word	0x20000044

08008ae4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b088      	sub	sp, #32
 8008ae8:	af02      	add	r7, sp, #8
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008af0:	4b1b      	ldr	r3, [pc, #108]	@ (8008b60 <SPI_EndRxTxTransaction+0x7c>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a1b      	ldr	r2, [pc, #108]	@ (8008b64 <SPI_EndRxTxTransaction+0x80>)
 8008af6:	fba2 2303 	umull	r2, r3, r2, r3
 8008afa:	0d5b      	lsrs	r3, r3, #21
 8008afc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008b00:	fb02 f303 	mul.w	r3, r2, r3
 8008b04:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b0e:	d112      	bne.n	8008b36 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	9300      	str	r3, [sp, #0]
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	2200      	movs	r2, #0
 8008b18:	2180      	movs	r1, #128	@ 0x80
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f7ff ff5a 	bl	80089d4 <SPI_WaitFlagStateUntilTimeout>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d016      	beq.n	8008b54 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b2a:	f043 0220 	orr.w	r2, r3, #32
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e00f      	b.n	8008b56 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00a      	beq.n	8008b52 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b4c:	2b80      	cmp	r3, #128	@ 0x80
 8008b4e:	d0f2      	beq.n	8008b36 <SPI_EndRxTxTransaction+0x52>
 8008b50:	e000      	b.n	8008b54 <SPI_EndRxTxTransaction+0x70>
        break;
 8008b52:	bf00      	nop
  }

  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3718      	adds	r7, #24
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	20000044 	.word	0x20000044
 8008b64:	165e9f81 	.word	0x165e9f81

08008b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d101      	bne.n	8008b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e031      	b.n	8008bde <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d106      	bne.n	8008b94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f7f9 f802 	bl	8001b98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2202      	movs	r2, #2
 8008b98:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	3304      	adds	r3, #4
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	4610      	mov	r0, r2
 8008ba8:	f000 fc3c 	bl	8009424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
	...

08008be8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d001      	beq.n	8008c00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e03a      	b.n	8008c76 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2202      	movs	r2, #2
 8008c04:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	68da      	ldr	r2, [r3, #12]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f042 0201 	orr.w	r2, r2, #1
 8008c16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c20:	d00e      	beq.n	8008c40 <HAL_TIM_Base_Start_IT+0x58>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a16      	ldr	r2, [pc, #88]	@ (8008c80 <HAL_TIM_Base_Start_IT+0x98>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d009      	beq.n	8008c40 <HAL_TIM_Base_Start_IT+0x58>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a14      	ldr	r2, [pc, #80]	@ (8008c84 <HAL_TIM_Base_Start_IT+0x9c>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d004      	beq.n	8008c40 <HAL_TIM_Base_Start_IT+0x58>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a13      	ldr	r2, [pc, #76]	@ (8008c88 <HAL_TIM_Base_Start_IT+0xa0>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d111      	bne.n	8008c64 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f003 0307 	and.w	r3, r3, #7
 8008c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2b06      	cmp	r3, #6
 8008c50:	d010      	beq.n	8008c74 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f042 0201 	orr.w	r2, r2, #1
 8008c60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c62:	e007      	b.n	8008c74 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f042 0201 	orr.w	r2, r2, #1
 8008c72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bc80      	pop	{r7}
 8008c7e:	4770      	bx	lr
 8008c80:	40000400 	.word	0x40000400
 8008c84:	40000800 	.word	0x40000800
 8008c88:	40010800 	.word	0x40010800

08008c8c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68da      	ldr	r2, [r3, #12]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f022 0201 	bic.w	r2, r2, #1
 8008ca2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6a1a      	ldr	r2, [r3, #32]
 8008caa:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008cae:	4013      	ands	r3, r2
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d107      	bne.n	8008cc4 <HAL_TIM_Base_Stop_IT+0x38>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f022 0201 	bic.w	r2, r2, #1
 8008cc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Return function status */
  return HAL_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	370c      	adds	r7, #12
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bc80      	pop	{r7}
 8008cd6:	4770      	bx	lr

08008cd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d101      	bne.n	8008cea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e031      	b.n	8008d4e <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d106      	bne.n	8008d04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f829 	bl	8008d56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2202      	movs	r2, #2
 8008d08:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	3304      	adds	r3, #4
 8008d14:	4619      	mov	r1, r3
 8008d16:	4610      	mov	r0, r2
 8008d18:	f000 fb84 	bl	8009424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3708      	adds	r7, #8
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008d56:	b480      	push	{r7}
 8008d58:	b083      	sub	sp, #12
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008d5e:	bf00      	nop
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bc80      	pop	{r7}
 8008d66:	4770      	bx	lr

08008d68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d109      	bne.n	8008d8c <HAL_TIM_PWM_Start+0x24>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	bf14      	ite	ne
 8008d84:	2301      	movne	r3, #1
 8008d86:	2300      	moveq	r3, #0
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	e022      	b.n	8008dd2 <HAL_TIM_PWM_Start+0x6a>
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	2b04      	cmp	r3, #4
 8008d90:	d109      	bne.n	8008da6 <HAL_TIM_PWM_Start+0x3e>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	bf14      	ite	ne
 8008d9e:	2301      	movne	r3, #1
 8008da0:	2300      	moveq	r3, #0
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	e015      	b.n	8008dd2 <HAL_TIM_PWM_Start+0x6a>
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	2b08      	cmp	r3, #8
 8008daa:	d109      	bne.n	8008dc0 <HAL_TIM_PWM_Start+0x58>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	bf14      	ite	ne
 8008db8:	2301      	movne	r3, #1
 8008dba:	2300      	moveq	r3, #0
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	e008      	b.n	8008dd2 <HAL_TIM_PWM_Start+0x6a>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	bf14      	ite	ne
 8008dcc:	2301      	movne	r3, #1
 8008dce:	2300      	moveq	r3, #0
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e051      	b.n	8008e7e <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d104      	bne.n	8008dea <HAL_TIM_PWM_Start+0x82>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2202      	movs	r2, #2
 8008de4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8008de8:	e013      	b.n	8008e12 <HAL_TIM_PWM_Start+0xaa>
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b04      	cmp	r3, #4
 8008dee:	d104      	bne.n	8008dfa <HAL_TIM_PWM_Start+0x92>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2202      	movs	r2, #2
 8008df4:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8008df8:	e00b      	b.n	8008e12 <HAL_TIM_PWM_Start+0xaa>
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	2b08      	cmp	r3, #8
 8008dfe:	d104      	bne.n	8008e0a <HAL_TIM_PWM_Start+0xa2>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2202      	movs	r2, #2
 8008e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008e08:	e003      	b.n	8008e12 <HAL_TIM_PWM_Start+0xaa>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2202      	movs	r2, #2
 8008e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2201      	movs	r2, #1
 8008e18:	6839      	ldr	r1, [r7, #0]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 fcfd 	bl	800981a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e28:	d00e      	beq.n	8008e48 <HAL_TIM_PWM_Start+0xe0>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a16      	ldr	r2, [pc, #88]	@ (8008e88 <HAL_TIM_PWM_Start+0x120>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d009      	beq.n	8008e48 <HAL_TIM_PWM_Start+0xe0>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a14      	ldr	r2, [pc, #80]	@ (8008e8c <HAL_TIM_PWM_Start+0x124>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d004      	beq.n	8008e48 <HAL_TIM_PWM_Start+0xe0>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a13      	ldr	r2, [pc, #76]	@ (8008e90 <HAL_TIM_PWM_Start+0x128>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d111      	bne.n	8008e6c <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	f003 0307 	and.w	r3, r3, #7
 8008e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2b06      	cmp	r3, #6
 8008e58:	d010      	beq.n	8008e7c <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f042 0201 	orr.w	r2, r2, #1
 8008e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e6a:	e007      	b.n	8008e7c <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f042 0201 	orr.w	r2, r2, #1
 8008e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	40000400 	.word	0x40000400
 8008e8c:	40000800 	.word	0x40000800
 8008e90:	40010800 	.word	0x40010800

08008e94 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	6839      	ldr	r1, [r7, #0]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 fcb7 	bl	800981a <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6a1a      	ldr	r2, [r3, #32]
 8008eb2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d107      	bne.n	8008ecc <HAL_TIM_PWM_Stop+0x38>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f022 0201 	bic.w	r2, r2, #1
 8008eca:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d104      	bne.n	8008edc <HAL_TIM_PWM_Stop+0x48>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8008eda:	e013      	b.n	8008f04 <HAL_TIM_PWM_Stop+0x70>
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	2b04      	cmp	r3, #4
 8008ee0:	d104      	bne.n	8008eec <HAL_TIM_PWM_Stop+0x58>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8008eea:	e00b      	b.n	8008f04 <HAL_TIM_PWM_Stop+0x70>
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	2b08      	cmp	r3, #8
 8008ef0:	d104      	bne.n	8008efc <HAL_TIM_PWM_Stop+0x68>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008efa:	e003      	b.n	8008f04 <HAL_TIM_PWM_Stop+0x70>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b082      	sub	sp, #8
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	691b      	ldr	r3, [r3, #16]
 8008f1c:	f003 0302 	and.w	r3, r3, #2
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d122      	bne.n	8008f6a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	f003 0302 	and.w	r3, r3, #2
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d11b      	bne.n	8008f6a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f06f 0202 	mvn.w	r2, #2
 8008f3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	699b      	ldr	r3, [r3, #24]
 8008f48:	f003 0303 	and.w	r3, r3, #3
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d003      	beq.n	8008f58 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 fa4b 	bl	80093ec <HAL_TIM_IC_CaptureCallback>
 8008f56:	e005      	b.n	8008f64 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 fa3e 	bl	80093da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fa4d 	bl	80093fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	691b      	ldr	r3, [r3, #16]
 8008f70:	f003 0304 	and.w	r3, r3, #4
 8008f74:	2b04      	cmp	r3, #4
 8008f76:	d122      	bne.n	8008fbe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	f003 0304 	and.w	r3, r3, #4
 8008f82:	2b04      	cmp	r3, #4
 8008f84:	d11b      	bne.n	8008fbe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f06f 0204 	mvn.w	r2, #4
 8008f8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2202      	movs	r2, #2
 8008f94:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d003      	beq.n	8008fac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 fa21 	bl	80093ec <HAL_TIM_IC_CaptureCallback>
 8008faa:	e005      	b.n	8008fb8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 fa14 	bl	80093da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fa23 	bl	80093fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	f003 0308 	and.w	r3, r3, #8
 8008fc8:	2b08      	cmp	r3, #8
 8008fca:	d122      	bne.n	8009012 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	f003 0308 	and.w	r3, r3, #8
 8008fd6:	2b08      	cmp	r3, #8
 8008fd8:	d11b      	bne.n	8009012 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f06f 0208 	mvn.w	r2, #8
 8008fe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2204      	movs	r2, #4
 8008fe8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	69db      	ldr	r3, [r3, #28]
 8008ff0:	f003 0303 	and.w	r3, r3, #3
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d003      	beq.n	8009000 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f9f7 	bl	80093ec <HAL_TIM_IC_CaptureCallback>
 8008ffe:	e005      	b.n	800900c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f9ea 	bl	80093da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 f9f9 	bl	80093fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	f003 0310 	and.w	r3, r3, #16
 800901c:	2b10      	cmp	r3, #16
 800901e:	d122      	bne.n	8009066 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	f003 0310 	and.w	r3, r3, #16
 800902a:	2b10      	cmp	r3, #16
 800902c:	d11b      	bne.n	8009066 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f06f 0210 	mvn.w	r2, #16
 8009036:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2208      	movs	r2, #8
 800903c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	69db      	ldr	r3, [r3, #28]
 8009044:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009048:	2b00      	cmp	r3, #0
 800904a:	d003      	beq.n	8009054 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f9cd 	bl	80093ec <HAL_TIM_IC_CaptureCallback>
 8009052:	e005      	b.n	8009060 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f9c0 	bl	80093da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 f9cf 	bl	80093fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	f003 0301 	and.w	r3, r3, #1
 8009070:	2b01      	cmp	r3, #1
 8009072:	d10e      	bne.n	8009092 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	2b01      	cmp	r3, #1
 8009080:	d107      	bne.n	8009092 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f06f 0201 	mvn.w	r2, #1
 800908a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7f8 fed9 	bl	8001e44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	691b      	ldr	r3, [r3, #16]
 8009098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800909c:	2b40      	cmp	r3, #64	@ 0x40
 800909e:	d10e      	bne.n	80090be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090aa:	2b40      	cmp	r3, #64	@ 0x40
 80090ac:	d107      	bne.n	80090be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80090b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 f9a9 	bl	8009410 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090be:	bf00      	nop
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
	...

080090c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b086      	sub	sp, #24
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090d4:	2300      	movs	r3, #0
 80090d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d101      	bne.n	80090e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80090e2:	2302      	movs	r3, #2
 80090e4:	e0ae      	b.n	8009244 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2b0c      	cmp	r3, #12
 80090f2:	f200 809f 	bhi.w	8009234 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80090f6:	a201      	add	r2, pc, #4	@ (adr r2, 80090fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80090f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fc:	08009131 	.word	0x08009131
 8009100:	08009235 	.word	0x08009235
 8009104:	08009235 	.word	0x08009235
 8009108:	08009235 	.word	0x08009235
 800910c:	08009171 	.word	0x08009171
 8009110:	08009235 	.word	0x08009235
 8009114:	08009235 	.word	0x08009235
 8009118:	08009235 	.word	0x08009235
 800911c:	080091b3 	.word	0x080091b3
 8009120:	08009235 	.word	0x08009235
 8009124:	08009235 	.word	0x08009235
 8009128:	08009235 	.word	0x08009235
 800912c:	080091f3 	.word	0x080091f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68b9      	ldr	r1, [r7, #8]
 8009136:	4618      	mov	r0, r3
 8009138:	f000 f9e4 	bl	8009504 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	699a      	ldr	r2, [r3, #24]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f042 0208 	orr.w	r2, r2, #8
 800914a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	699a      	ldr	r2, [r3, #24]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f022 0204 	bic.w	r2, r2, #4
 800915a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6999      	ldr	r1, [r3, #24]
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	68da      	ldr	r2, [r3, #12]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	430a      	orrs	r2, r1
 800916c:	619a      	str	r2, [r3, #24]
      break;
 800916e:	e064      	b.n	800923a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68b9      	ldr	r1, [r7, #8]
 8009176:	4618      	mov	r0, r3
 8009178:	f000 fa00 	bl	800957c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	699a      	ldr	r2, [r3, #24]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800918a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	699a      	ldr	r2, [r3, #24]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800919a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6999      	ldr	r1, [r3, #24]
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	021a      	lsls	r2, r3, #8
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	430a      	orrs	r2, r1
 80091ae:	619a      	str	r2, [r3, #24]
      break;
 80091b0:	e043      	b.n	800923a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68b9      	ldr	r1, [r7, #8]
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 fa1d 	bl	80095f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	69da      	ldr	r2, [r3, #28]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f042 0208 	orr.w	r2, r2, #8
 80091cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	69da      	ldr	r2, [r3, #28]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f022 0204 	bic.w	r2, r2, #4
 80091dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	69d9      	ldr	r1, [r3, #28]
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	68da      	ldr	r2, [r3, #12]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	430a      	orrs	r2, r1
 80091ee:	61da      	str	r2, [r3, #28]
      break;
 80091f0:	e023      	b.n	800923a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68b9      	ldr	r1, [r7, #8]
 80091f8:	4618      	mov	r0, r3
 80091fa:	f000 fa3a 	bl	8009672 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	69da      	ldr	r2, [r3, #28]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800920c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	69da      	ldr	r2, [r3, #28]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800921c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	69d9      	ldr	r1, [r3, #28]
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	021a      	lsls	r2, r3, #8
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	430a      	orrs	r2, r1
 8009230:	61da      	str	r2, [r3, #28]
      break;
 8009232:	e002      	b.n	800923a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	75fb      	strb	r3, [r7, #23]
      break;
 8009238:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8009242:	7dfb      	ldrb	r3, [r7, #23]
}
 8009244:	4618      	mov	r0, r3
 8009246:	3718      	adds	r7, #24
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009256:	2300      	movs	r3, #0
 8009258:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009260:	2b01      	cmp	r3, #1
 8009262:	d101      	bne.n	8009268 <HAL_TIM_ConfigClockSource+0x1c>
 8009264:	2302      	movs	r3, #2
 8009266:	e0b4      	b.n	80093d2 <HAL_TIM_ConfigClockSource+0x186>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2202      	movs	r2, #2
 8009274:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800928e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68ba      	ldr	r2, [r7, #8]
 8009296:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092a0:	d03e      	beq.n	8009320 <HAL_TIM_ConfigClockSource+0xd4>
 80092a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092a6:	f200 8087 	bhi.w	80093b8 <HAL_TIM_ConfigClockSource+0x16c>
 80092aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092ae:	f000 8086 	beq.w	80093be <HAL_TIM_ConfigClockSource+0x172>
 80092b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092b6:	d87f      	bhi.n	80093b8 <HAL_TIM_ConfigClockSource+0x16c>
 80092b8:	2b70      	cmp	r3, #112	@ 0x70
 80092ba:	d01a      	beq.n	80092f2 <HAL_TIM_ConfigClockSource+0xa6>
 80092bc:	2b70      	cmp	r3, #112	@ 0x70
 80092be:	d87b      	bhi.n	80093b8 <HAL_TIM_ConfigClockSource+0x16c>
 80092c0:	2b60      	cmp	r3, #96	@ 0x60
 80092c2:	d050      	beq.n	8009366 <HAL_TIM_ConfigClockSource+0x11a>
 80092c4:	2b60      	cmp	r3, #96	@ 0x60
 80092c6:	d877      	bhi.n	80093b8 <HAL_TIM_ConfigClockSource+0x16c>
 80092c8:	2b50      	cmp	r3, #80	@ 0x50
 80092ca:	d03c      	beq.n	8009346 <HAL_TIM_ConfigClockSource+0xfa>
 80092cc:	2b50      	cmp	r3, #80	@ 0x50
 80092ce:	d873      	bhi.n	80093b8 <HAL_TIM_ConfigClockSource+0x16c>
 80092d0:	2b40      	cmp	r3, #64	@ 0x40
 80092d2:	d058      	beq.n	8009386 <HAL_TIM_ConfigClockSource+0x13a>
 80092d4:	2b40      	cmp	r3, #64	@ 0x40
 80092d6:	d86f      	bhi.n	80093b8 <HAL_TIM_ConfigClockSource+0x16c>
 80092d8:	2b30      	cmp	r3, #48	@ 0x30
 80092da:	d064      	beq.n	80093a6 <HAL_TIM_ConfigClockSource+0x15a>
 80092dc:	2b30      	cmp	r3, #48	@ 0x30
 80092de:	d86b      	bhi.n	80093b8 <HAL_TIM_ConfigClockSource+0x16c>
 80092e0:	2b20      	cmp	r3, #32
 80092e2:	d060      	beq.n	80093a6 <HAL_TIM_ConfigClockSource+0x15a>
 80092e4:	2b20      	cmp	r3, #32
 80092e6:	d867      	bhi.n	80093b8 <HAL_TIM_ConfigClockSource+0x16c>
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d05c      	beq.n	80093a6 <HAL_TIM_ConfigClockSource+0x15a>
 80092ec:	2b10      	cmp	r3, #16
 80092ee:	d05a      	beq.n	80093a6 <HAL_TIM_ConfigClockSource+0x15a>
 80092f0:	e062      	b.n	80093b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009302:	f000 fa6b 	bl	80097dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009314:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	609a      	str	r2, [r3, #8]
      break;
 800931e:	e04f      	b.n	80093c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009330:	f000 fa54 	bl	80097dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	689a      	ldr	r2, [r3, #8]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009342:	609a      	str	r2, [r3, #8]
      break;
 8009344:	e03c      	b.n	80093c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009352:	461a      	mov	r2, r3
 8009354:	f000 f9cb 	bl	80096ee <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2150      	movs	r1, #80	@ 0x50
 800935e:	4618      	mov	r0, r3
 8009360:	f000 fa22 	bl	80097a8 <TIM_ITRx_SetConfig>
      break;
 8009364:	e02c      	b.n	80093c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009372:	461a      	mov	r2, r3
 8009374:	f000 f9e9 	bl	800974a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2160      	movs	r1, #96	@ 0x60
 800937e:	4618      	mov	r0, r3
 8009380:	f000 fa12 	bl	80097a8 <TIM_ITRx_SetConfig>
      break;
 8009384:	e01c      	b.n	80093c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009392:	461a      	mov	r2, r3
 8009394:	f000 f9ab 	bl	80096ee <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2140      	movs	r1, #64	@ 0x40
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 fa02 	bl	80097a8 <TIM_ITRx_SetConfig>
      break;
 80093a4:	e00c      	b.n	80093c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4619      	mov	r1, r3
 80093b0:	4610      	mov	r0, r2
 80093b2:	f000 f9f9 	bl	80097a8 <TIM_ITRx_SetConfig>
      break;
 80093b6:	e003      	b.n	80093c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	73fb      	strb	r3, [r7, #15]
      break;
 80093bc:	e000      	b.n	80093c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80093be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 80093d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093da:	b480      	push	{r7}
 80093dc:	b083      	sub	sp, #12
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093e2:	bf00      	nop
 80093e4:	370c      	adds	r7, #12
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bc80      	pop	{r7}
 80093ea:	4770      	bx	lr

080093ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093f4:	bf00      	nop
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bc80      	pop	{r7}
 80093fc:	4770      	bx	lr

080093fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093fe:	b480      	push	{r7}
 8009400:	b083      	sub	sp, #12
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009406:	bf00      	nop
 8009408:	370c      	adds	r7, #12
 800940a:	46bd      	mov	sp, r7
 800940c:	bc80      	pop	{r7}
 800940e:	4770      	bx	lr

08009410 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	bc80      	pop	{r7}
 8009420:	4770      	bx	lr
	...

08009424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800943a:	d00f      	beq.n	800945c <TIM_Base_SetConfig+0x38>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a2b      	ldr	r2, [pc, #172]	@ (80094ec <TIM_Base_SetConfig+0xc8>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d00b      	beq.n	800945c <TIM_Base_SetConfig+0x38>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a2a      	ldr	r2, [pc, #168]	@ (80094f0 <TIM_Base_SetConfig+0xcc>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d007      	beq.n	800945c <TIM_Base_SetConfig+0x38>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a29      	ldr	r2, [pc, #164]	@ (80094f4 <TIM_Base_SetConfig+0xd0>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d003      	beq.n	800945c <TIM_Base_SetConfig+0x38>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a28      	ldr	r2, [pc, #160]	@ (80094f8 <TIM_Base_SetConfig+0xd4>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d108      	bne.n	800946e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	4313      	orrs	r3, r2
 800946c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009474:	d017      	beq.n	80094a6 <TIM_Base_SetConfig+0x82>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a1c      	ldr	r2, [pc, #112]	@ (80094ec <TIM_Base_SetConfig+0xc8>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d013      	beq.n	80094a6 <TIM_Base_SetConfig+0x82>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4a1b      	ldr	r2, [pc, #108]	@ (80094f0 <TIM_Base_SetConfig+0xcc>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d00f      	beq.n	80094a6 <TIM_Base_SetConfig+0x82>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a1a      	ldr	r2, [pc, #104]	@ (80094f4 <TIM_Base_SetConfig+0xd0>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d00b      	beq.n	80094a6 <TIM_Base_SetConfig+0x82>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4a19      	ldr	r2, [pc, #100]	@ (80094f8 <TIM_Base_SetConfig+0xd4>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d007      	beq.n	80094a6 <TIM_Base_SetConfig+0x82>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4a18      	ldr	r2, [pc, #96]	@ (80094fc <TIM_Base_SetConfig+0xd8>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d003      	beq.n	80094a6 <TIM_Base_SetConfig+0x82>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a17      	ldr	r2, [pc, #92]	@ (8009500 <TIM_Base_SetConfig+0xdc>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d108      	bne.n	80094b8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	689a      	ldr	r2, [r3, #8]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	615a      	str	r2, [r3, #20]
}
 80094e2:	bf00      	nop
 80094e4:	3714      	adds	r7, #20
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bc80      	pop	{r7}
 80094ea:	4770      	bx	lr
 80094ec:	40000400 	.word	0x40000400
 80094f0:	40000800 	.word	0x40000800
 80094f4:	40000c00 	.word	0x40000c00
 80094f8:	40010800 	.word	0x40010800
 80094fc:	40010c00 	.word	0x40010c00
 8009500:	40011000 	.word	0x40011000

08009504 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009504:	b480      	push	{r7}
 8009506:	b087      	sub	sp, #28
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a1b      	ldr	r3, [r3, #32]
 8009512:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6a1b      	ldr	r3, [r3, #32]
 8009518:	f023 0201 	bic.w	r2, r3, #1
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	699b      	ldr	r3, [r3, #24]
 800952a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f023 0303 	bic.w	r3, r3, #3
 800953a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	4313      	orrs	r3, r2
 8009544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f023 0302 	bic.w	r3, r3, #2
 800954c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	697a      	ldr	r2, [r7, #20]
 8009554:	4313      	orrs	r3, r2
 8009556:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	693a      	ldr	r2, [r7, #16]
 800955c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	685a      	ldr	r2, [r3, #4]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	697a      	ldr	r2, [r7, #20]
 8009570:	621a      	str	r2, [r3, #32]
}
 8009572:	bf00      	nop
 8009574:	371c      	adds	r7, #28
 8009576:	46bd      	mov	sp, r7
 8009578:	bc80      	pop	{r7}
 800957a:	4770      	bx	lr

0800957c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800957c:	b480      	push	{r7}
 800957e:	b087      	sub	sp, #28
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a1b      	ldr	r3, [r3, #32]
 800958a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a1b      	ldr	r3, [r3, #32]
 8009590:	f023 0210 	bic.w	r2, r3, #16
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	021b      	lsls	r3, r3, #8
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	4313      	orrs	r3, r2
 80095be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	f023 0320 	bic.w	r3, r3, #32
 80095c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	011b      	lsls	r3, r3, #4
 80095ce:	697a      	ldr	r2, [r7, #20]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	685a      	ldr	r2, [r3, #4]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	697a      	ldr	r2, [r7, #20]
 80095ec:	621a      	str	r2, [r3, #32]
}
 80095ee:	bf00      	nop
 80095f0:	371c      	adds	r7, #28
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bc80      	pop	{r7}
 80095f6:	4770      	bx	lr

080095f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b087      	sub	sp, #28
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a1b      	ldr	r3, [r3, #32]
 8009606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6a1b      	ldr	r3, [r3, #32]
 800960c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	69db      	ldr	r3, [r3, #28]
 800961e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f023 0303 	bic.w	r3, r3, #3
 800962e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	4313      	orrs	r3, r2
 8009638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	021b      	lsls	r3, r3, #8
 8009648:	697a      	ldr	r2, [r7, #20]
 800964a:	4313      	orrs	r3, r2
 800964c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	693a      	ldr	r2, [r7, #16]
 8009652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	685a      	ldr	r2, [r3, #4]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	697a      	ldr	r2, [r7, #20]
 8009666:	621a      	str	r2, [r3, #32]
}
 8009668:	bf00      	nop
 800966a:	371c      	adds	r7, #28
 800966c:	46bd      	mov	sp, r7
 800966e:	bc80      	pop	{r7}
 8009670:	4770      	bx	lr

08009672 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009672:	b480      	push	{r7}
 8009674:	b087      	sub	sp, #28
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
 800967a:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a1b      	ldr	r3, [r3, #32]
 8009680:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a1b      	ldr	r3, [r3, #32]
 8009686:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	69db      	ldr	r3, [r3, #28]
 8009698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096a0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096a8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	021b      	lsls	r3, r3, #8
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80096bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	031b      	lsls	r3, r3, #12
 80096c4:	697a      	ldr	r2, [r7, #20]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	685a      	ldr	r2, [r3, #4]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	697a      	ldr	r2, [r7, #20]
 80096e2:	621a      	str	r2, [r3, #32]
}
 80096e4:	bf00      	nop
 80096e6:	371c      	adds	r7, #28
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bc80      	pop	{r7}
 80096ec:	4770      	bx	lr

080096ee <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b087      	sub	sp, #28
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	60f8      	str	r0, [r7, #12]
 80096f6:	60b9      	str	r1, [r7, #8]
 80096f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6a1b      	ldr	r3, [r3, #32]
 8009704:	f023 0201 	bic.w	r2, r3, #1
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	699b      	ldr	r3, [r3, #24]
 8009710:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009718:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	011b      	lsls	r3, r3, #4
 800971e:	693a      	ldr	r2, [r7, #16]
 8009720:	4313      	orrs	r3, r2
 8009722:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	f023 030a 	bic.w	r3, r3, #10
 800972a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800972c:	697a      	ldr	r2, [r7, #20]
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	4313      	orrs	r3, r2
 8009732:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	693a      	ldr	r2, [r7, #16]
 8009738:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	697a      	ldr	r2, [r7, #20]
 800973e:	621a      	str	r2, [r3, #32]
}
 8009740:	bf00      	nop
 8009742:	371c      	adds	r7, #28
 8009744:	46bd      	mov	sp, r7
 8009746:	bc80      	pop	{r7}
 8009748:	4770      	bx	lr

0800974a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800974a:	b480      	push	{r7}
 800974c:	b087      	sub	sp, #28
 800974e:	af00      	add	r7, sp, #0
 8009750:	60f8      	str	r0, [r7, #12]
 8009752:	60b9      	str	r1, [r7, #8]
 8009754:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6a1b      	ldr	r3, [r3, #32]
 800975a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6a1b      	ldr	r3, [r3, #32]
 8009760:	f023 0210 	bic.w	r2, r3, #16
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009774:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	031b      	lsls	r3, r3, #12
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	4313      	orrs	r3, r2
 800977e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009786:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	011b      	lsls	r3, r3, #4
 800978c:	697a      	ldr	r2, [r7, #20]
 800978e:	4313      	orrs	r3, r2
 8009790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	693a      	ldr	r2, [r7, #16]
 8009796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	621a      	str	r2, [r3, #32]
}
 800979e:	bf00      	nop
 80097a0:	371c      	adds	r7, #28
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bc80      	pop	{r7}
 80097a6:	4770      	bx	lr

080097a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80097c0:	683a      	ldr	r2, [r7, #0]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	f043 0307 	orr.w	r3, r3, #7
 80097ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	68fa      	ldr	r2, [r7, #12]
 80097d0:	609a      	str	r2, [r3, #8]
}
 80097d2:	bf00      	nop
 80097d4:	3714      	adds	r7, #20
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bc80      	pop	{r7}
 80097da:	4770      	bx	lr

080097dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80097dc:	b480      	push	{r7}
 80097de:	b087      	sub	sp, #28
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
 80097e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80097f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	021a      	lsls	r2, r3, #8
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	431a      	orrs	r2, r3
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	4313      	orrs	r3, r2
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	4313      	orrs	r3, r2
 8009808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	697a      	ldr	r2, [r7, #20]
 800980e:	609a      	str	r2, [r3, #8]
}
 8009810:	bf00      	nop
 8009812:	371c      	adds	r7, #28
 8009814:	46bd      	mov	sp, r7
 8009816:	bc80      	pop	{r7}
 8009818:	4770      	bx	lr

0800981a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800981a:	b480      	push	{r7}
 800981c:	b087      	sub	sp, #28
 800981e:	af00      	add	r7, sp, #0
 8009820:	60f8      	str	r0, [r7, #12]
 8009822:	60b9      	str	r1, [r7, #8]
 8009824:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	f003 031f 	and.w	r3, r3, #31
 800982c:	2201      	movs	r2, #1
 800982e:	fa02 f303 	lsl.w	r3, r2, r3
 8009832:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6a1a      	ldr	r2, [r3, #32]
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	43db      	mvns	r3, r3
 800983c:	401a      	ands	r2, r3
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6a1a      	ldr	r2, [r3, #32]
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	f003 031f 	and.w	r3, r3, #31
 800984c:	6879      	ldr	r1, [r7, #4]
 800984e:	fa01 f303 	lsl.w	r3, r1, r3
 8009852:	431a      	orrs	r2, r3
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	621a      	str	r2, [r3, #32]
}
 8009858:	bf00      	nop
 800985a:	371c      	adds	r7, #28
 800985c:	46bd      	mov	sp, r7
 800985e:	bc80      	pop	{r7}
 8009860:	4770      	bx	lr
	...

08009864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009874:	2b01      	cmp	r3, #1
 8009876:	d101      	bne.n	800987c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009878:	2302      	movs	r3, #2
 800987a:	e046      	b.n	800990a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2202      	movs	r2, #2
 8009888:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	4313      	orrs	r3, r2
 80098ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098be:	d00e      	beq.n	80098de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a13      	ldr	r2, [pc, #76]	@ (8009914 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d009      	beq.n	80098de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a12      	ldr	r2, [pc, #72]	@ (8009918 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d004      	beq.n	80098de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a10      	ldr	r2, [pc, #64]	@ (800991c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d10c      	bne.n	80098f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8009908:	2300      	movs	r3, #0
}
 800990a:	4618      	mov	r0, r3
 800990c:	3714      	adds	r7, #20
 800990e:	46bd      	mov	sp, r7
 8009910:	bc80      	pop	{r7}
 8009912:	4770      	bx	lr
 8009914:	40000400 	.word	0x40000400
 8009918:	40000800 	.word	0x40000800
 800991c:	40010800 	.word	0x40010800

08009920 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d101      	bne.n	8009932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e042      	b.n	80099b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009938:	b2db      	uxtb	r3, r3
 800993a:	2b00      	cmp	r3, #0
 800993c:	d106      	bne.n	800994c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f7f8 f9c6 	bl	8001cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2224      	movs	r2, #36	@ 0x24
 8009950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68da      	ldr	r2, [r3, #12]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009962:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 f91d 	bl	8009ba4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	691a      	ldr	r2, [r3, #16]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009978:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	695a      	ldr	r2, [r3, #20]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009988:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68da      	ldr	r2, [r3, #12]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009998:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2220      	movs	r2, #32
 80099a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2220      	movs	r2, #32
 80099ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3708      	adds	r7, #8
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b08a      	sub	sp, #40	@ 0x28
 80099c4:	af02      	add	r7, sp, #8
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	603b      	str	r3, [r7, #0]
 80099cc:	4613      	mov	r3, r2
 80099ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80099d0:	2300      	movs	r3, #0
 80099d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	2b20      	cmp	r3, #32
 80099de:	d16d      	bne.n	8009abc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d002      	beq.n	80099ec <HAL_UART_Transmit+0x2c>
 80099e6:	88fb      	ldrh	r3, [r7, #6]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d101      	bne.n	80099f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	e066      	b.n	8009abe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2200      	movs	r2, #0
 80099f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2221      	movs	r2, #33	@ 0x21
 80099fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80099fe:	f7fb fcbb 	bl	8005378 <HAL_GetTick>
 8009a02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	88fa      	ldrh	r2, [r7, #6]
 8009a08:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	88fa      	ldrh	r2, [r7, #6]
 8009a0e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a18:	d108      	bne.n	8009a2c <HAL_UART_Transmit+0x6c>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d104      	bne.n	8009a2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009a22:	2300      	movs	r3, #0
 8009a24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	61bb      	str	r3, [r7, #24]
 8009a2a:	e003      	b.n	8009a34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a30:	2300      	movs	r3, #0
 8009a32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009a34:	e02a      	b.n	8009a8c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	2180      	movs	r1, #128	@ 0x80
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f000 f840 	bl	8009ac6 <UART_WaitOnFlagUntilTimeout>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d001      	beq.n	8009a50 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8009a4c:	2303      	movs	r3, #3
 8009a4e:	e036      	b.n	8009abe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d10b      	bne.n	8009a6e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	881b      	ldrh	r3, [r3, #0]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	3302      	adds	r3, #2
 8009a6a:	61bb      	str	r3, [r7, #24]
 8009a6c:	e007      	b.n	8009a7e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	781a      	ldrb	r2, [r3, #0]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	3b01      	subs	r3, #1
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1cf      	bne.n	8009a36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	9300      	str	r3, [sp, #0]
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	2140      	movs	r1, #64	@ 0x40
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f000 f810 	bl	8009ac6 <UART_WaitOnFlagUntilTimeout>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d001      	beq.n	8009ab0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8009aac:	2303      	movs	r3, #3
 8009aae:	e006      	b.n	8009abe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2220      	movs	r2, #32
 8009ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	e000      	b.n	8009abe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009abc:	2302      	movs	r3, #2
  }
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3720      	adds	r7, #32
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b090      	sub	sp, #64	@ 0x40
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	60f8      	str	r0, [r7, #12]
 8009ace:	60b9      	str	r1, [r7, #8]
 8009ad0:	603b      	str	r3, [r7, #0]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ad6:	e050      	b.n	8009b7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ad8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ade:	d04c      	beq.n	8009b7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009ae0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d007      	beq.n	8009af6 <UART_WaitOnFlagUntilTimeout+0x30>
 8009ae6:	f7fb fc47 	bl	8005378 <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d241      	bcs.n	8009b7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	330c      	adds	r3, #12
 8009afc:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b00:	e853 3f00 	ldrex	r3, [r3]
 8009b04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b08:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	330c      	adds	r3, #12
 8009b14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009b16:	637a      	str	r2, [r7, #52]	@ 0x34
 8009b18:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b1e:	e841 2300 	strex	r3, r2, [r1]
 8009b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1e5      	bne.n	8009af6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	3314      	adds	r3, #20
 8009b30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	e853 3f00 	ldrex	r3, [r3]
 8009b38:	613b      	str	r3, [r7, #16]
   return(result);
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	f023 0301 	bic.w	r3, r3, #1
 8009b40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	3314      	adds	r3, #20
 8009b48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b4a:	623a      	str	r2, [r7, #32]
 8009b4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4e:	69f9      	ldr	r1, [r7, #28]
 8009b50:	6a3a      	ldr	r2, [r7, #32]
 8009b52:	e841 2300 	strex	r3, r2, [r1]
 8009b56:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1e5      	bne.n	8009b2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2220      	movs	r2, #32
 8009b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2220      	movs	r2, #32
 8009b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8009b76:	2303      	movs	r3, #3
 8009b78:	e00f      	b.n	8009b9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	4013      	ands	r3, r2
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	bf0c      	ite	eq
 8009b8a:	2301      	moveq	r3, #1
 8009b8c:	2300      	movne	r3, #0
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	461a      	mov	r2, r3
 8009b92:	79fb      	ldrb	r3, [r7, #7]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d09f      	beq.n	8009ad8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3740      	adds	r7, #64	@ 0x40
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
	...

08009ba4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	68da      	ldr	r2, [r3, #12]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	430a      	orrs	r2, r1
 8009bc0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	689a      	ldr	r2, [r3, #8]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	691b      	ldr	r3, [r3, #16]
 8009bca:	431a      	orrs	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	695b      	ldr	r3, [r3, #20]
 8009bd0:	431a      	orrs	r2, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	69db      	ldr	r3, [r3, #28]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8009be4:	f023 030c 	bic.w	r3, r3, #12
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	6812      	ldr	r2, [r2, #0]
 8009bec:	68b9      	ldr	r1, [r7, #8]
 8009bee:	430b      	orrs	r3, r1
 8009bf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	695b      	ldr	r3, [r3, #20]
 8009bf8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	699a      	ldr	r2, [r3, #24]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	430a      	orrs	r2, r1
 8009c06:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a55      	ldr	r2, [pc, #340]	@ (8009d64 <UART_SetConfig+0x1c0>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d103      	bne.n	8009c1a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009c12:	f7fe fb8d 	bl	8008330 <HAL_RCC_GetPCLK2Freq>
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	e002      	b.n	8009c20 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009c1a:	f7fe fb75 	bl	8008308 <HAL_RCC_GetPCLK1Freq>
 8009c1e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	69db      	ldr	r3, [r3, #28]
 8009c24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c28:	d14c      	bne.n	8009cc4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4413      	add	r3, r2
 8009c32:	009a      	lsls	r2, r3, #2
 8009c34:	441a      	add	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	005b      	lsls	r3, r3, #1
 8009c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c40:	4a49      	ldr	r2, [pc, #292]	@ (8009d68 <UART_SetConfig+0x1c4>)
 8009c42:	fba2 2303 	umull	r2, r3, r2, r3
 8009c46:	095b      	lsrs	r3, r3, #5
 8009c48:	0119      	lsls	r1, r3, #4
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4413      	add	r3, r2
 8009c52:	009a      	lsls	r2, r3, #2
 8009c54:	441a      	add	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	005b      	lsls	r3, r3, #1
 8009c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c60:	4b41      	ldr	r3, [pc, #260]	@ (8009d68 <UART_SetConfig+0x1c4>)
 8009c62:	fba3 0302 	umull	r0, r3, r3, r2
 8009c66:	095b      	lsrs	r3, r3, #5
 8009c68:	2064      	movs	r0, #100	@ 0x64
 8009c6a:	fb00 f303 	mul.w	r3, r0, r3
 8009c6e:	1ad3      	subs	r3, r2, r3
 8009c70:	00db      	lsls	r3, r3, #3
 8009c72:	3332      	adds	r3, #50	@ 0x32
 8009c74:	4a3c      	ldr	r2, [pc, #240]	@ (8009d68 <UART_SetConfig+0x1c4>)
 8009c76:	fba2 2303 	umull	r2, r3, r2, r3
 8009c7a:	095b      	lsrs	r3, r3, #5
 8009c7c:	005b      	lsls	r3, r3, #1
 8009c7e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009c82:	4419      	add	r1, r3
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	4613      	mov	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	009a      	lsls	r2, r3, #2
 8009c8e:	441a      	add	r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	005b      	lsls	r3, r3, #1
 8009c96:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c9a:	4b33      	ldr	r3, [pc, #204]	@ (8009d68 <UART_SetConfig+0x1c4>)
 8009c9c:	fba3 0302 	umull	r0, r3, r3, r2
 8009ca0:	095b      	lsrs	r3, r3, #5
 8009ca2:	2064      	movs	r0, #100	@ 0x64
 8009ca4:	fb00 f303 	mul.w	r3, r0, r3
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	00db      	lsls	r3, r3, #3
 8009cac:	3332      	adds	r3, #50	@ 0x32
 8009cae:	4a2e      	ldr	r2, [pc, #184]	@ (8009d68 <UART_SetConfig+0x1c4>)
 8009cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8009cb4:	095b      	lsrs	r3, r3, #5
 8009cb6:	f003 0207 	and.w	r2, r3, #7
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	440a      	add	r2, r1
 8009cc0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009cc2:	e04a      	b.n	8009d5a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	4413      	add	r3, r2
 8009ccc:	009a      	lsls	r2, r3, #2
 8009cce:	441a      	add	r2, r3
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cda:	4a23      	ldr	r2, [pc, #140]	@ (8009d68 <UART_SetConfig+0x1c4>)
 8009cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ce0:	095b      	lsrs	r3, r3, #5
 8009ce2:	0119      	lsls	r1, r3, #4
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	4413      	add	r3, r2
 8009cec:	009a      	lsls	r2, r3, #2
 8009cee:	441a      	add	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	fbb2 f2f3 	udiv	r2, r2, r3
 8009cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8009d68 <UART_SetConfig+0x1c4>)
 8009cfc:	fba3 0302 	umull	r0, r3, r3, r2
 8009d00:	095b      	lsrs	r3, r3, #5
 8009d02:	2064      	movs	r0, #100	@ 0x64
 8009d04:	fb00 f303 	mul.w	r3, r0, r3
 8009d08:	1ad3      	subs	r3, r2, r3
 8009d0a:	011b      	lsls	r3, r3, #4
 8009d0c:	3332      	adds	r3, #50	@ 0x32
 8009d0e:	4a16      	ldr	r2, [pc, #88]	@ (8009d68 <UART_SetConfig+0x1c4>)
 8009d10:	fba2 2303 	umull	r2, r3, r2, r3
 8009d14:	095b      	lsrs	r3, r3, #5
 8009d16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009d1a:	4419      	add	r1, r3
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	4613      	mov	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	4413      	add	r3, r2
 8009d24:	009a      	lsls	r2, r3, #2
 8009d26:	441a      	add	r2, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d32:	4b0d      	ldr	r3, [pc, #52]	@ (8009d68 <UART_SetConfig+0x1c4>)
 8009d34:	fba3 0302 	umull	r0, r3, r3, r2
 8009d38:	095b      	lsrs	r3, r3, #5
 8009d3a:	2064      	movs	r0, #100	@ 0x64
 8009d3c:	fb00 f303 	mul.w	r3, r0, r3
 8009d40:	1ad3      	subs	r3, r2, r3
 8009d42:	011b      	lsls	r3, r3, #4
 8009d44:	3332      	adds	r3, #50	@ 0x32
 8009d46:	4a08      	ldr	r2, [pc, #32]	@ (8009d68 <UART_SetConfig+0x1c4>)
 8009d48:	fba2 2303 	umull	r2, r3, r2, r3
 8009d4c:	095b      	lsrs	r3, r3, #5
 8009d4e:	f003 020f 	and.w	r2, r3, #15
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	440a      	add	r2, r1
 8009d58:	609a      	str	r2, [r3, #8]
}
 8009d5a:	bf00      	nop
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	40013800 	.word	0x40013800
 8009d68:	51eb851f 	.word	0x51eb851f

08009d6c <SPI_CS_High>:
#define LOAD_0()      SPI_CS_High()
#define LOAD_1()      SPI_CS_Low()


 void SPI_CS_High()
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8009d70:	2201      	movs	r2, #1
 8009d72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009d76:	4802      	ldr	r0, [pc, #8]	@ (8009d80 <SPI_CS_High+0x14>)
 8009d78:	f7fc fc9c 	bl	80066b4 <HAL_GPIO_WritePin>
}
 8009d7c:	bf00      	nop
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	40020000 	.word	0x40020000

08009d84 <SPI_CS_Low>:

 void SPI_CS_Low()
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009d8e:	4802      	ldr	r0, [pc, #8]	@ (8009d98 <SPI_CS_Low+0x14>)
 8009d90:	f7fc fc90 	bl	80066b4 <HAL_GPIO_WritePin>
}
 8009d94:	bf00      	nop
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	40020000 	.word	0x40020000

08009d9c <MAX7219_Init>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Init (void)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	af00      	add	r7, sp, #0
  //DATA_DDR |= DATA_BIT;                               // configure "DATA" as output
  //CLK_DDR  |= CLK_BIT;                                // configure "CLK"  as output
  //LOAD_DDR |= LOAD_BIT;                               // configure "LOAD" as output

  MAX7219_Write(REG_SCAN_LIMIT, 7);                   // set up to scan all eight digits
 8009da0:	2107      	movs	r1, #7
 8009da2:	200b      	movs	r0, #11
 8009da4:	f000 f88c 	bl	8009ec0 <MAX7219_Write>
  MAX7219_Write(REG_DECODE, 0x00);                    // set to "no decode" for all digits
 8009da8:	2100      	movs	r1, #0
 8009daa:	2009      	movs	r0, #9
 8009dac:	f000 f888 	bl	8009ec0 <MAX7219_Write>
  MAX7219_ShutdownStop();                             // select normal operation (i.e. not shutdown)
 8009db0:	f000 f809 	bl	8009dc6 <MAX7219_ShutdownStop>
  MAX7219_DisplayTestStop();                          // select normal operation (i.e. not test mode)
 8009db4:	f000 f817 	bl	8009de6 <MAX7219_DisplayTestStop>
  MAX7219_Clear();                                    // clear all digits
 8009db8:	f000 f82f 	bl	8009e1a <MAX7219_Clear>
  MAX7219_SetBrightness(INTENSITY_MAX);               // set to maximum intensity
 8009dbc:	200f      	movs	r0, #15
 8009dbe:	f000 f81a 	bl	8009df6 <MAX7219_SetBrightness>
}
 8009dc2:	bf00      	nop
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <MAX7219_ShutdownStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_ShutdownStop (void)
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_SHUTDOWN, 1);                     // put MAX7219 into "normal" mode
 8009dca:	2101      	movs	r1, #1
 8009dcc:	200c      	movs	r0, #12
 8009dce:	f000 f877 	bl	8009ec0 <MAX7219_Write>
}
 8009dd2:	bf00      	nop
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <MAX7219_DisplayTestStart>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStart (void)
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 1);                 // put MAX7219 into "display test" mode
 8009dda:	2101      	movs	r1, #1
 8009ddc:	200f      	movs	r0, #15
 8009dde:	f000 f86f 	bl	8009ec0 <MAX7219_Write>
}
 8009de2:	bf00      	nop
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <MAX7219_DisplayTestStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStop (void)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 0);                 // put MAX7219 into "normal" mode
 8009dea:	2100      	movs	r1, #0
 8009dec:	200f      	movs	r0, #15
 8009dee:	f000 f867 	bl	8009ec0 <MAX7219_Write>
}
 8009df2:	bf00      	nop
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <MAX7219_SetBrightness>:
* Arguments  : brightness (0-15)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_SetBrightness (char brightness)
{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b082      	sub	sp, #8
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	71fb      	strb	r3, [r7, #7]
  brightness &= 0x0f;                                 // mask off extra bits
 8009e00:	79fb      	ldrb	r3, [r7, #7]
 8009e02:	f003 030f 	and.w	r3, r3, #15
 8009e06:	71fb      	strb	r3, [r7, #7]
  MAX7219_Write(REG_INTENSITY, brightness);           // set brightness
 8009e08:	79fb      	ldrb	r3, [r7, #7]
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	200a      	movs	r0, #10
 8009e0e:	f000 f857 	bl	8009ec0 <MAX7219_Write>
}
 8009e12:	bf00      	nop
 8009e14:	3708      	adds	r7, #8
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <MAX7219_Clear>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Clear (void)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b082      	sub	sp, #8
 8009e1e:	af00      	add	r7, sp, #0
  char i;
  for (i=0; i < 8; i++)
 8009e20:	2300      	movs	r3, #0
 8009e22:	71fb      	strb	r3, [r7, #7]
 8009e24:	e007      	b.n	8009e36 <MAX7219_Clear+0x1c>
    MAX7219_Write(i, 0x00);                           // turn all segments off
 8009e26:	79fb      	ldrb	r3, [r7, #7]
 8009e28:	2100      	movs	r1, #0
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f000 f848 	bl	8009ec0 <MAX7219_Write>
  for (i=0; i < 8; i++)
 8009e30:	79fb      	ldrb	r3, [r7, #7]
 8009e32:	3301      	adds	r3, #1
 8009e34:	71fb      	strb	r3, [r7, #7]
 8009e36:	79fb      	ldrb	r3, [r7, #7]
 8009e38:	2b07      	cmp	r3, #7
 8009e3a:	d9f4      	bls.n	8009e26 <MAX7219_Clear+0xc>
}
 8009e3c:	bf00      	nop
 8009e3e:	bf00      	nop
 8009e40:	3708      	adds	r7, #8
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <MAX7219_DisplayChar>:
*              character = character to display (0-9, A-Z)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayChar (char digit, char character)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b082      	sub	sp, #8
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	460a      	mov	r2, r1
 8009e50:	71fb      	strb	r3, [r7, #7]
 8009e52:	4613      	mov	r3, r2
 8009e54:	71bb      	strb	r3, [r7, #6]
  MAX7219_Write(digit, MAX7219_LookupCode(character));
 8009e56:	79bb      	ldrb	r3, [r7, #6]
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f000 f80b 	bl	8009e74 <MAX7219_LookupCode>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	461a      	mov	r2, r3
 8009e62:	79fb      	ldrb	r3, [r7, #7]
 8009e64:	4611      	mov	r1, r2
 8009e66:	4618      	mov	r0, r3
 8009e68:	f000 f82a 	bl	8009ec0 <MAX7219_Write>
}
 8009e6c:	bf00      	nop
 8009e6e:	3708      	adds	r7, #8
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <MAX7219_LookupCode>:
* Arguments  : character to display
* Returns    : segment code
*********************************************************************************************************
*/
static unsigned char MAX7219_LookupCode (char character)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 8009e7e:	2300      	movs	r3, #0
 8009e80:	60fb      	str	r3, [r7, #12]
 8009e82:	e00f      	b.n	8009ea4 <MAX7219_LookupCode+0x30>
    if (character == MAX7219_Font[i].ascii)
 8009e84:	4a0d      	ldr	r2, [pc, #52]	@ (8009ebc <MAX7219_LookupCode+0x48>)
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8009e8c:	79fa      	ldrb	r2, [r7, #7]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d105      	bne.n	8009e9e <MAX7219_LookupCode+0x2a>
      return MAX7219_Font[i].segs;                    // return segments code
 8009e92:	4a0a      	ldr	r2, [pc, #40]	@ (8009ebc <MAX7219_LookupCode+0x48>)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	005b      	lsls	r3, r3, #1
 8009e98:	4413      	add	r3, r2
 8009e9a:	785b      	ldrb	r3, [r3, #1]
 8009e9c:	e009      	b.n	8009eb2 <MAX7219_LookupCode+0x3e>
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	60fb      	str	r3, [r7, #12]
 8009ea4:	4a05      	ldr	r2, [pc, #20]	@ (8009ebc <MAX7219_LookupCode+0x48>)
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d1e9      	bne.n	8009e84 <MAX7219_LookupCode+0x10>
  return 0;                                           // code not found, return null (blank)
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3714      	adds	r7, #20
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bc80      	pop	{r7}
 8009eba:	4770      	bx	lr
 8009ebc:	0800cfa8 	.word	0x0800cfa8

08009ec0 <MAX7219_Write>:
*              dataout = data to write to MAX7219
* Returns    : none
*********************************************************************************************************
*/
static void MAX7219_Write (unsigned char reg_number, unsigned char dataout)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	460a      	mov	r2, r1
 8009eca:	71fb      	strb	r3, [r7, #7]
 8009ecc:	4613      	mov	r3, r2
 8009ece:	71bb      	strb	r3, [r7, #6]
  LOAD_1();                                           // take LOAD high to begin
 8009ed0:	f7ff ff58 	bl	8009d84 <SPI_CS_Low>
  MAX7219_SendByte(reg_number);                       // write register number to MAX7219
 8009ed4:	79fb      	ldrb	r3, [r7, #7]
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f000 f80c 	bl	8009ef4 <MAX7219_SendByte>
  MAX7219_SendByte(dataout);                          // write data to MAX7219
 8009edc:	79bb      	ldrb	r3, [r7, #6]
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f000 f808 	bl	8009ef4 <MAX7219_SendByte>
  LOAD_0();                                           // take LOAD low to latch in data
 8009ee4:	f7ff ff42 	bl	8009d6c <SPI_CS_High>
  LOAD_1();                                           // take LOAD high to end
 8009ee8:	f7ff ff4c 	bl	8009d84 <SPI_CS_Low>
}
 8009eec:	bf00      	nop
 8009eee:	3708      	adds	r7, #8
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <MAX7219_SendByte>:
      DATA_0();                                       //  "0"
    CLK_1();                                          // bring CLK high
	}
}*/
static void MAX7219_SendByte (unsigned char dataout)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	4603      	mov	r3, r0
 8009efc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &dataout, 1, 1000);
 8009efe:	1df9      	adds	r1, r7, #7
 8009f00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009f04:	2201      	movs	r2, #1
 8009f06:	4803      	ldr	r0, [pc, #12]	@ (8009f14 <MAX7219_SendByte+0x20>)
 8009f08:	f7fe fb0f 	bl	800852a <HAL_SPI_Transmit>
}
 8009f0c:	bf00      	nop
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	20000340 	.word	0x20000340

08009f18 <__cvt>:
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f1e:	461d      	mov	r5, r3
 8009f20:	bfbb      	ittet	lt
 8009f22:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009f26:	461d      	movlt	r5, r3
 8009f28:	2300      	movge	r3, #0
 8009f2a:	232d      	movlt	r3, #45	@ 0x2d
 8009f2c:	b088      	sub	sp, #32
 8009f2e:	4614      	mov	r4, r2
 8009f30:	bfb8      	it	lt
 8009f32:	4614      	movlt	r4, r2
 8009f34:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009f36:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009f38:	7013      	strb	r3, [r2, #0]
 8009f3a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009f3c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009f40:	f023 0820 	bic.w	r8, r3, #32
 8009f44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f48:	d005      	beq.n	8009f56 <__cvt+0x3e>
 8009f4a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009f4e:	d100      	bne.n	8009f52 <__cvt+0x3a>
 8009f50:	3601      	adds	r6, #1
 8009f52:	2302      	movs	r3, #2
 8009f54:	e000      	b.n	8009f58 <__cvt+0x40>
 8009f56:	2303      	movs	r3, #3
 8009f58:	aa07      	add	r2, sp, #28
 8009f5a:	9204      	str	r2, [sp, #16]
 8009f5c:	aa06      	add	r2, sp, #24
 8009f5e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009f62:	e9cd 3600 	strd	r3, r6, [sp]
 8009f66:	4622      	mov	r2, r4
 8009f68:	462b      	mov	r3, r5
 8009f6a:	f000 ff85 	bl	800ae78 <_dtoa_r>
 8009f6e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009f72:	4607      	mov	r7, r0
 8009f74:	d119      	bne.n	8009faa <__cvt+0x92>
 8009f76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009f78:	07db      	lsls	r3, r3, #31
 8009f7a:	d50e      	bpl.n	8009f9a <__cvt+0x82>
 8009f7c:	eb00 0906 	add.w	r9, r0, r6
 8009f80:	2200      	movs	r2, #0
 8009f82:	2300      	movs	r3, #0
 8009f84:	4620      	mov	r0, r4
 8009f86:	4629      	mov	r1, r5
 8009f88:	f7f6 fd26 	bl	80009d8 <__aeabi_dcmpeq>
 8009f8c:	b108      	cbz	r0, 8009f92 <__cvt+0x7a>
 8009f8e:	f8cd 901c 	str.w	r9, [sp, #28]
 8009f92:	2230      	movs	r2, #48	@ 0x30
 8009f94:	9b07      	ldr	r3, [sp, #28]
 8009f96:	454b      	cmp	r3, r9
 8009f98:	d31e      	bcc.n	8009fd8 <__cvt+0xc0>
 8009f9a:	4638      	mov	r0, r7
 8009f9c:	9b07      	ldr	r3, [sp, #28]
 8009f9e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009fa0:	1bdb      	subs	r3, r3, r7
 8009fa2:	6013      	str	r3, [r2, #0]
 8009fa4:	b008      	add	sp, #32
 8009fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009faa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009fae:	eb00 0906 	add.w	r9, r0, r6
 8009fb2:	d1e5      	bne.n	8009f80 <__cvt+0x68>
 8009fb4:	7803      	ldrb	r3, [r0, #0]
 8009fb6:	2b30      	cmp	r3, #48	@ 0x30
 8009fb8:	d10a      	bne.n	8009fd0 <__cvt+0xb8>
 8009fba:	2200      	movs	r2, #0
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	f7f6 fd09 	bl	80009d8 <__aeabi_dcmpeq>
 8009fc6:	b918      	cbnz	r0, 8009fd0 <__cvt+0xb8>
 8009fc8:	f1c6 0601 	rsb	r6, r6, #1
 8009fcc:	f8ca 6000 	str.w	r6, [sl]
 8009fd0:	f8da 3000 	ldr.w	r3, [sl]
 8009fd4:	4499      	add	r9, r3
 8009fd6:	e7d3      	b.n	8009f80 <__cvt+0x68>
 8009fd8:	1c59      	adds	r1, r3, #1
 8009fda:	9107      	str	r1, [sp, #28]
 8009fdc:	701a      	strb	r2, [r3, #0]
 8009fde:	e7d9      	b.n	8009f94 <__cvt+0x7c>

08009fe0 <__exponent>:
 8009fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fe2:	2900      	cmp	r1, #0
 8009fe4:	bfb6      	itet	lt
 8009fe6:	232d      	movlt	r3, #45	@ 0x2d
 8009fe8:	232b      	movge	r3, #43	@ 0x2b
 8009fea:	4249      	neglt	r1, r1
 8009fec:	2909      	cmp	r1, #9
 8009fee:	7002      	strb	r2, [r0, #0]
 8009ff0:	7043      	strb	r3, [r0, #1]
 8009ff2:	dd29      	ble.n	800a048 <__exponent+0x68>
 8009ff4:	f10d 0307 	add.w	r3, sp, #7
 8009ff8:	461d      	mov	r5, r3
 8009ffa:	270a      	movs	r7, #10
 8009ffc:	fbb1 f6f7 	udiv	r6, r1, r7
 800a000:	461a      	mov	r2, r3
 800a002:	fb07 1416 	mls	r4, r7, r6, r1
 800a006:	3430      	adds	r4, #48	@ 0x30
 800a008:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a00c:	460c      	mov	r4, r1
 800a00e:	2c63      	cmp	r4, #99	@ 0x63
 800a010:	4631      	mov	r1, r6
 800a012:	f103 33ff 	add.w	r3, r3, #4294967295
 800a016:	dcf1      	bgt.n	8009ffc <__exponent+0x1c>
 800a018:	3130      	adds	r1, #48	@ 0x30
 800a01a:	1e94      	subs	r4, r2, #2
 800a01c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a020:	4623      	mov	r3, r4
 800a022:	1c41      	adds	r1, r0, #1
 800a024:	42ab      	cmp	r3, r5
 800a026:	d30a      	bcc.n	800a03e <__exponent+0x5e>
 800a028:	f10d 0309 	add.w	r3, sp, #9
 800a02c:	1a9b      	subs	r3, r3, r2
 800a02e:	42ac      	cmp	r4, r5
 800a030:	bf88      	it	hi
 800a032:	2300      	movhi	r3, #0
 800a034:	3302      	adds	r3, #2
 800a036:	4403      	add	r3, r0
 800a038:	1a18      	subs	r0, r3, r0
 800a03a:	b003      	add	sp, #12
 800a03c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a03e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a042:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a046:	e7ed      	b.n	800a024 <__exponent+0x44>
 800a048:	2330      	movs	r3, #48	@ 0x30
 800a04a:	3130      	adds	r1, #48	@ 0x30
 800a04c:	7083      	strb	r3, [r0, #2]
 800a04e:	70c1      	strb	r1, [r0, #3]
 800a050:	1d03      	adds	r3, r0, #4
 800a052:	e7f1      	b.n	800a038 <__exponent+0x58>

0800a054 <_printf_float>:
 800a054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a058:	b091      	sub	sp, #68	@ 0x44
 800a05a:	460c      	mov	r4, r1
 800a05c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800a060:	4616      	mov	r6, r2
 800a062:	461f      	mov	r7, r3
 800a064:	4605      	mov	r5, r0
 800a066:	f000 fdf9 	bl	800ac5c <_localeconv_r>
 800a06a:	6803      	ldr	r3, [r0, #0]
 800a06c:	4618      	mov	r0, r3
 800a06e:	9308      	str	r3, [sp, #32]
 800a070:	f7f6 f886 	bl	8000180 <strlen>
 800a074:	2300      	movs	r3, #0
 800a076:	930e      	str	r3, [sp, #56]	@ 0x38
 800a078:	f8d8 3000 	ldr.w	r3, [r8]
 800a07c:	9009      	str	r0, [sp, #36]	@ 0x24
 800a07e:	3307      	adds	r3, #7
 800a080:	f023 0307 	bic.w	r3, r3, #7
 800a084:	f103 0208 	add.w	r2, r3, #8
 800a088:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a08c:	f8d4 b000 	ldr.w	fp, [r4]
 800a090:	f8c8 2000 	str.w	r2, [r8]
 800a094:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a098:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a09c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a09e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a0a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a0a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a0aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a0ae:	4b9c      	ldr	r3, [pc, #624]	@ (800a320 <_printf_float+0x2cc>)
 800a0b0:	f7f6 fcc4 	bl	8000a3c <__aeabi_dcmpun>
 800a0b4:	bb70      	cbnz	r0, 800a114 <_printf_float+0xc0>
 800a0b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a0ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a0be:	4b98      	ldr	r3, [pc, #608]	@ (800a320 <_printf_float+0x2cc>)
 800a0c0:	f7f6 fc9e 	bl	8000a00 <__aeabi_dcmple>
 800a0c4:	bb30      	cbnz	r0, 800a114 <_printf_float+0xc0>
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	4640      	mov	r0, r8
 800a0cc:	4649      	mov	r1, r9
 800a0ce:	f7f6 fc8d 	bl	80009ec <__aeabi_dcmplt>
 800a0d2:	b110      	cbz	r0, 800a0da <_printf_float+0x86>
 800a0d4:	232d      	movs	r3, #45	@ 0x2d
 800a0d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0da:	4a92      	ldr	r2, [pc, #584]	@ (800a324 <_printf_float+0x2d0>)
 800a0dc:	4b92      	ldr	r3, [pc, #584]	@ (800a328 <_printf_float+0x2d4>)
 800a0de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a0e2:	bf94      	ite	ls
 800a0e4:	4690      	movls	r8, r2
 800a0e6:	4698      	movhi	r8, r3
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	f04f 0900 	mov.w	r9, #0
 800a0ee:	6123      	str	r3, [r4, #16]
 800a0f0:	f02b 0304 	bic.w	r3, fp, #4
 800a0f4:	6023      	str	r3, [r4, #0]
 800a0f6:	4633      	mov	r3, r6
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	4628      	mov	r0, r5
 800a0fc:	9700      	str	r7, [sp, #0]
 800a0fe:	aa0f      	add	r2, sp, #60	@ 0x3c
 800a100:	f000 f9d4 	bl	800a4ac <_printf_common>
 800a104:	3001      	adds	r0, #1
 800a106:	f040 8090 	bne.w	800a22a <_printf_float+0x1d6>
 800a10a:	f04f 30ff 	mov.w	r0, #4294967295
 800a10e:	b011      	add	sp, #68	@ 0x44
 800a110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a114:	4642      	mov	r2, r8
 800a116:	464b      	mov	r3, r9
 800a118:	4640      	mov	r0, r8
 800a11a:	4649      	mov	r1, r9
 800a11c:	f7f6 fc8e 	bl	8000a3c <__aeabi_dcmpun>
 800a120:	b148      	cbz	r0, 800a136 <_printf_float+0xe2>
 800a122:	464b      	mov	r3, r9
 800a124:	2b00      	cmp	r3, #0
 800a126:	bfb8      	it	lt
 800a128:	232d      	movlt	r3, #45	@ 0x2d
 800a12a:	4a80      	ldr	r2, [pc, #512]	@ (800a32c <_printf_float+0x2d8>)
 800a12c:	bfb8      	it	lt
 800a12e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a132:	4b7f      	ldr	r3, [pc, #508]	@ (800a330 <_printf_float+0x2dc>)
 800a134:	e7d3      	b.n	800a0de <_printf_float+0x8a>
 800a136:	6863      	ldr	r3, [r4, #4]
 800a138:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800a13c:	1c5a      	adds	r2, r3, #1
 800a13e:	d13f      	bne.n	800a1c0 <_printf_float+0x16c>
 800a140:	2306      	movs	r3, #6
 800a142:	6063      	str	r3, [r4, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800a14a:	6023      	str	r3, [r4, #0]
 800a14c:	9206      	str	r2, [sp, #24]
 800a14e:	aa0e      	add	r2, sp, #56	@ 0x38
 800a150:	e9cd a204 	strd	sl, r2, [sp, #16]
 800a154:	aa0d      	add	r2, sp, #52	@ 0x34
 800a156:	9203      	str	r2, [sp, #12]
 800a158:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800a15c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a160:	6863      	ldr	r3, [r4, #4]
 800a162:	4642      	mov	r2, r8
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	4628      	mov	r0, r5
 800a168:	464b      	mov	r3, r9
 800a16a:	910a      	str	r1, [sp, #40]	@ 0x28
 800a16c:	f7ff fed4 	bl	8009f18 <__cvt>
 800a170:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a172:	4680      	mov	r8, r0
 800a174:	2947      	cmp	r1, #71	@ 0x47
 800a176:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a178:	d128      	bne.n	800a1cc <_printf_float+0x178>
 800a17a:	1cc8      	adds	r0, r1, #3
 800a17c:	db02      	blt.n	800a184 <_printf_float+0x130>
 800a17e:	6863      	ldr	r3, [r4, #4]
 800a180:	4299      	cmp	r1, r3
 800a182:	dd40      	ble.n	800a206 <_printf_float+0x1b2>
 800a184:	f1aa 0a02 	sub.w	sl, sl, #2
 800a188:	fa5f fa8a 	uxtb.w	sl, sl
 800a18c:	4652      	mov	r2, sl
 800a18e:	3901      	subs	r1, #1
 800a190:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a194:	910d      	str	r1, [sp, #52]	@ 0x34
 800a196:	f7ff ff23 	bl	8009fe0 <__exponent>
 800a19a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a19c:	4681      	mov	r9, r0
 800a19e:	1813      	adds	r3, r2, r0
 800a1a0:	2a01      	cmp	r2, #1
 800a1a2:	6123      	str	r3, [r4, #16]
 800a1a4:	dc02      	bgt.n	800a1ac <_printf_float+0x158>
 800a1a6:	6822      	ldr	r2, [r4, #0]
 800a1a8:	07d2      	lsls	r2, r2, #31
 800a1aa:	d501      	bpl.n	800a1b0 <_printf_float+0x15c>
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	6123      	str	r3, [r4, #16]
 800a1b0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d09e      	beq.n	800a0f6 <_printf_float+0xa2>
 800a1b8:	232d      	movs	r3, #45	@ 0x2d
 800a1ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1be:	e79a      	b.n	800a0f6 <_printf_float+0xa2>
 800a1c0:	2947      	cmp	r1, #71	@ 0x47
 800a1c2:	d1bf      	bne.n	800a144 <_printf_float+0xf0>
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1bd      	bne.n	800a144 <_printf_float+0xf0>
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	e7ba      	b.n	800a142 <_printf_float+0xee>
 800a1cc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a1d0:	d9dc      	bls.n	800a18c <_printf_float+0x138>
 800a1d2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a1d6:	d118      	bne.n	800a20a <_printf_float+0x1b6>
 800a1d8:	2900      	cmp	r1, #0
 800a1da:	6863      	ldr	r3, [r4, #4]
 800a1dc:	dd0b      	ble.n	800a1f6 <_printf_float+0x1a2>
 800a1de:	6121      	str	r1, [r4, #16]
 800a1e0:	b913      	cbnz	r3, 800a1e8 <_printf_float+0x194>
 800a1e2:	6822      	ldr	r2, [r4, #0]
 800a1e4:	07d0      	lsls	r0, r2, #31
 800a1e6:	d502      	bpl.n	800a1ee <_printf_float+0x19a>
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	440b      	add	r3, r1
 800a1ec:	6123      	str	r3, [r4, #16]
 800a1ee:	f04f 0900 	mov.w	r9, #0
 800a1f2:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a1f4:	e7dc      	b.n	800a1b0 <_printf_float+0x15c>
 800a1f6:	b913      	cbnz	r3, 800a1fe <_printf_float+0x1aa>
 800a1f8:	6822      	ldr	r2, [r4, #0]
 800a1fa:	07d2      	lsls	r2, r2, #31
 800a1fc:	d501      	bpl.n	800a202 <_printf_float+0x1ae>
 800a1fe:	3302      	adds	r3, #2
 800a200:	e7f4      	b.n	800a1ec <_printf_float+0x198>
 800a202:	2301      	movs	r3, #1
 800a204:	e7f2      	b.n	800a1ec <_printf_float+0x198>
 800a206:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a20a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a20c:	4299      	cmp	r1, r3
 800a20e:	db05      	blt.n	800a21c <_printf_float+0x1c8>
 800a210:	6823      	ldr	r3, [r4, #0]
 800a212:	6121      	str	r1, [r4, #16]
 800a214:	07d8      	lsls	r0, r3, #31
 800a216:	d5ea      	bpl.n	800a1ee <_printf_float+0x19a>
 800a218:	1c4b      	adds	r3, r1, #1
 800a21a:	e7e7      	b.n	800a1ec <_printf_float+0x198>
 800a21c:	2900      	cmp	r1, #0
 800a21e:	bfcc      	ite	gt
 800a220:	2201      	movgt	r2, #1
 800a222:	f1c1 0202 	rsble	r2, r1, #2
 800a226:	4413      	add	r3, r2
 800a228:	e7e0      	b.n	800a1ec <_printf_float+0x198>
 800a22a:	6823      	ldr	r3, [r4, #0]
 800a22c:	055a      	lsls	r2, r3, #21
 800a22e:	d407      	bmi.n	800a240 <_printf_float+0x1ec>
 800a230:	6923      	ldr	r3, [r4, #16]
 800a232:	4642      	mov	r2, r8
 800a234:	4631      	mov	r1, r6
 800a236:	4628      	mov	r0, r5
 800a238:	47b8      	blx	r7
 800a23a:	3001      	adds	r0, #1
 800a23c:	d12b      	bne.n	800a296 <_printf_float+0x242>
 800a23e:	e764      	b.n	800a10a <_printf_float+0xb6>
 800a240:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a244:	f240 80dc 	bls.w	800a400 <_printf_float+0x3ac>
 800a248:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a24c:	2200      	movs	r2, #0
 800a24e:	2300      	movs	r3, #0
 800a250:	f7f6 fbc2 	bl	80009d8 <__aeabi_dcmpeq>
 800a254:	2800      	cmp	r0, #0
 800a256:	d033      	beq.n	800a2c0 <_printf_float+0x26c>
 800a258:	2301      	movs	r3, #1
 800a25a:	4631      	mov	r1, r6
 800a25c:	4628      	mov	r0, r5
 800a25e:	4a35      	ldr	r2, [pc, #212]	@ (800a334 <_printf_float+0x2e0>)
 800a260:	47b8      	blx	r7
 800a262:	3001      	adds	r0, #1
 800a264:	f43f af51 	beq.w	800a10a <_printf_float+0xb6>
 800a268:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800a26c:	4543      	cmp	r3, r8
 800a26e:	db02      	blt.n	800a276 <_printf_float+0x222>
 800a270:	6823      	ldr	r3, [r4, #0]
 800a272:	07d8      	lsls	r0, r3, #31
 800a274:	d50f      	bpl.n	800a296 <_printf_float+0x242>
 800a276:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a27a:	4631      	mov	r1, r6
 800a27c:	4628      	mov	r0, r5
 800a27e:	47b8      	blx	r7
 800a280:	3001      	adds	r0, #1
 800a282:	f43f af42 	beq.w	800a10a <_printf_float+0xb6>
 800a286:	f04f 0900 	mov.w	r9, #0
 800a28a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a28e:	f104 0a1a 	add.w	sl, r4, #26
 800a292:	45c8      	cmp	r8, r9
 800a294:	dc09      	bgt.n	800a2aa <_printf_float+0x256>
 800a296:	6823      	ldr	r3, [r4, #0]
 800a298:	079b      	lsls	r3, r3, #30
 800a29a:	f100 8102 	bmi.w	800a4a2 <_printf_float+0x44e>
 800a29e:	68e0      	ldr	r0, [r4, #12]
 800a2a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2a2:	4298      	cmp	r0, r3
 800a2a4:	bfb8      	it	lt
 800a2a6:	4618      	movlt	r0, r3
 800a2a8:	e731      	b.n	800a10e <_printf_float+0xba>
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	4652      	mov	r2, sl
 800a2ae:	4631      	mov	r1, r6
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	47b8      	blx	r7
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	f43f af28 	beq.w	800a10a <_printf_float+0xb6>
 800a2ba:	f109 0901 	add.w	r9, r9, #1
 800a2be:	e7e8      	b.n	800a292 <_printf_float+0x23e>
 800a2c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	dc38      	bgt.n	800a338 <_printf_float+0x2e4>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	4631      	mov	r1, r6
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	4a19      	ldr	r2, [pc, #100]	@ (800a334 <_printf_float+0x2e0>)
 800a2ce:	47b8      	blx	r7
 800a2d0:	3001      	adds	r0, #1
 800a2d2:	f43f af1a 	beq.w	800a10a <_printf_float+0xb6>
 800a2d6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800a2da:	ea59 0303 	orrs.w	r3, r9, r3
 800a2de:	d102      	bne.n	800a2e6 <_printf_float+0x292>
 800a2e0:	6823      	ldr	r3, [r4, #0]
 800a2e2:	07d9      	lsls	r1, r3, #31
 800a2e4:	d5d7      	bpl.n	800a296 <_printf_float+0x242>
 800a2e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a2ea:	4631      	mov	r1, r6
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	47b8      	blx	r7
 800a2f0:	3001      	adds	r0, #1
 800a2f2:	f43f af0a 	beq.w	800a10a <_printf_float+0xb6>
 800a2f6:	f04f 0a00 	mov.w	sl, #0
 800a2fa:	f104 0b1a 	add.w	fp, r4, #26
 800a2fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a300:	425b      	negs	r3, r3
 800a302:	4553      	cmp	r3, sl
 800a304:	dc01      	bgt.n	800a30a <_printf_float+0x2b6>
 800a306:	464b      	mov	r3, r9
 800a308:	e793      	b.n	800a232 <_printf_float+0x1de>
 800a30a:	2301      	movs	r3, #1
 800a30c:	465a      	mov	r2, fp
 800a30e:	4631      	mov	r1, r6
 800a310:	4628      	mov	r0, r5
 800a312:	47b8      	blx	r7
 800a314:	3001      	adds	r0, #1
 800a316:	f43f aef8 	beq.w	800a10a <_printf_float+0xb6>
 800a31a:	f10a 0a01 	add.w	sl, sl, #1
 800a31e:	e7ee      	b.n	800a2fe <_printf_float+0x2aa>
 800a320:	7fefffff 	.word	0x7fefffff
 800a324:	0800cfe2 	.word	0x0800cfe2
 800a328:	0800cfe6 	.word	0x0800cfe6
 800a32c:	0800cfea 	.word	0x0800cfea
 800a330:	0800cfee 	.word	0x0800cfee
 800a334:	0800cff2 	.word	0x0800cff2
 800a338:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a33a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a33e:	4553      	cmp	r3, sl
 800a340:	bfa8      	it	ge
 800a342:	4653      	movge	r3, sl
 800a344:	2b00      	cmp	r3, #0
 800a346:	4699      	mov	r9, r3
 800a348:	dc36      	bgt.n	800a3b8 <_printf_float+0x364>
 800a34a:	f04f 0b00 	mov.w	fp, #0
 800a34e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a352:	f104 021a 	add.w	r2, r4, #26
 800a356:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a358:	930a      	str	r3, [sp, #40]	@ 0x28
 800a35a:	eba3 0309 	sub.w	r3, r3, r9
 800a35e:	455b      	cmp	r3, fp
 800a360:	dc31      	bgt.n	800a3c6 <_printf_float+0x372>
 800a362:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a364:	459a      	cmp	sl, r3
 800a366:	dc3a      	bgt.n	800a3de <_printf_float+0x38a>
 800a368:	6823      	ldr	r3, [r4, #0]
 800a36a:	07da      	lsls	r2, r3, #31
 800a36c:	d437      	bmi.n	800a3de <_printf_float+0x38a>
 800a36e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a370:	ebaa 0903 	sub.w	r9, sl, r3
 800a374:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a376:	ebaa 0303 	sub.w	r3, sl, r3
 800a37a:	4599      	cmp	r9, r3
 800a37c:	bfa8      	it	ge
 800a37e:	4699      	movge	r9, r3
 800a380:	f1b9 0f00 	cmp.w	r9, #0
 800a384:	dc33      	bgt.n	800a3ee <_printf_float+0x39a>
 800a386:	f04f 0800 	mov.w	r8, #0
 800a38a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a38e:	f104 0b1a 	add.w	fp, r4, #26
 800a392:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a394:	ebaa 0303 	sub.w	r3, sl, r3
 800a398:	eba3 0309 	sub.w	r3, r3, r9
 800a39c:	4543      	cmp	r3, r8
 800a39e:	f77f af7a 	ble.w	800a296 <_printf_float+0x242>
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	465a      	mov	r2, fp
 800a3a6:	4631      	mov	r1, r6
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	47b8      	blx	r7
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	f43f aeac 	beq.w	800a10a <_printf_float+0xb6>
 800a3b2:	f108 0801 	add.w	r8, r8, #1
 800a3b6:	e7ec      	b.n	800a392 <_printf_float+0x33e>
 800a3b8:	4642      	mov	r2, r8
 800a3ba:	4631      	mov	r1, r6
 800a3bc:	4628      	mov	r0, r5
 800a3be:	47b8      	blx	r7
 800a3c0:	3001      	adds	r0, #1
 800a3c2:	d1c2      	bne.n	800a34a <_printf_float+0x2f6>
 800a3c4:	e6a1      	b.n	800a10a <_printf_float+0xb6>
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	4631      	mov	r1, r6
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	920a      	str	r2, [sp, #40]	@ 0x28
 800a3ce:	47b8      	blx	r7
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	f43f ae9a 	beq.w	800a10a <_printf_float+0xb6>
 800a3d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a3d8:	f10b 0b01 	add.w	fp, fp, #1
 800a3dc:	e7bb      	b.n	800a356 <_printf_float+0x302>
 800a3de:	4631      	mov	r1, r6
 800a3e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	47b8      	blx	r7
 800a3e8:	3001      	adds	r0, #1
 800a3ea:	d1c0      	bne.n	800a36e <_printf_float+0x31a>
 800a3ec:	e68d      	b.n	800a10a <_printf_float+0xb6>
 800a3ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a3f0:	464b      	mov	r3, r9
 800a3f2:	4631      	mov	r1, r6
 800a3f4:	4628      	mov	r0, r5
 800a3f6:	4442      	add	r2, r8
 800a3f8:	47b8      	blx	r7
 800a3fa:	3001      	adds	r0, #1
 800a3fc:	d1c3      	bne.n	800a386 <_printf_float+0x332>
 800a3fe:	e684      	b.n	800a10a <_printf_float+0xb6>
 800a400:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a404:	f1ba 0f01 	cmp.w	sl, #1
 800a408:	dc01      	bgt.n	800a40e <_printf_float+0x3ba>
 800a40a:	07db      	lsls	r3, r3, #31
 800a40c:	d536      	bpl.n	800a47c <_printf_float+0x428>
 800a40e:	2301      	movs	r3, #1
 800a410:	4642      	mov	r2, r8
 800a412:	4631      	mov	r1, r6
 800a414:	4628      	mov	r0, r5
 800a416:	47b8      	blx	r7
 800a418:	3001      	adds	r0, #1
 800a41a:	f43f ae76 	beq.w	800a10a <_printf_float+0xb6>
 800a41e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a422:	4631      	mov	r1, r6
 800a424:	4628      	mov	r0, r5
 800a426:	47b8      	blx	r7
 800a428:	3001      	adds	r0, #1
 800a42a:	f43f ae6e 	beq.w	800a10a <_printf_float+0xb6>
 800a42e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a432:	2200      	movs	r2, #0
 800a434:	2300      	movs	r3, #0
 800a436:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a43a:	f7f6 facd 	bl	80009d8 <__aeabi_dcmpeq>
 800a43e:	b9c0      	cbnz	r0, 800a472 <_printf_float+0x41e>
 800a440:	4653      	mov	r3, sl
 800a442:	f108 0201 	add.w	r2, r8, #1
 800a446:	4631      	mov	r1, r6
 800a448:	4628      	mov	r0, r5
 800a44a:	47b8      	blx	r7
 800a44c:	3001      	adds	r0, #1
 800a44e:	d10c      	bne.n	800a46a <_printf_float+0x416>
 800a450:	e65b      	b.n	800a10a <_printf_float+0xb6>
 800a452:	2301      	movs	r3, #1
 800a454:	465a      	mov	r2, fp
 800a456:	4631      	mov	r1, r6
 800a458:	4628      	mov	r0, r5
 800a45a:	47b8      	blx	r7
 800a45c:	3001      	adds	r0, #1
 800a45e:	f43f ae54 	beq.w	800a10a <_printf_float+0xb6>
 800a462:	f108 0801 	add.w	r8, r8, #1
 800a466:	45d0      	cmp	r8, sl
 800a468:	dbf3      	blt.n	800a452 <_printf_float+0x3fe>
 800a46a:	464b      	mov	r3, r9
 800a46c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a470:	e6e0      	b.n	800a234 <_printf_float+0x1e0>
 800a472:	f04f 0800 	mov.w	r8, #0
 800a476:	f104 0b1a 	add.w	fp, r4, #26
 800a47a:	e7f4      	b.n	800a466 <_printf_float+0x412>
 800a47c:	2301      	movs	r3, #1
 800a47e:	4642      	mov	r2, r8
 800a480:	e7e1      	b.n	800a446 <_printf_float+0x3f2>
 800a482:	2301      	movs	r3, #1
 800a484:	464a      	mov	r2, r9
 800a486:	4631      	mov	r1, r6
 800a488:	4628      	mov	r0, r5
 800a48a:	47b8      	blx	r7
 800a48c:	3001      	adds	r0, #1
 800a48e:	f43f ae3c 	beq.w	800a10a <_printf_float+0xb6>
 800a492:	f108 0801 	add.w	r8, r8, #1
 800a496:	68e3      	ldr	r3, [r4, #12]
 800a498:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a49a:	1a5b      	subs	r3, r3, r1
 800a49c:	4543      	cmp	r3, r8
 800a49e:	dcf0      	bgt.n	800a482 <_printf_float+0x42e>
 800a4a0:	e6fd      	b.n	800a29e <_printf_float+0x24a>
 800a4a2:	f04f 0800 	mov.w	r8, #0
 800a4a6:	f104 0919 	add.w	r9, r4, #25
 800a4aa:	e7f4      	b.n	800a496 <_printf_float+0x442>

0800a4ac <_printf_common>:
 800a4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4b0:	4616      	mov	r6, r2
 800a4b2:	4698      	mov	r8, r3
 800a4b4:	688a      	ldr	r2, [r1, #8]
 800a4b6:	690b      	ldr	r3, [r1, #16]
 800a4b8:	4607      	mov	r7, r0
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	bfb8      	it	lt
 800a4be:	4613      	movlt	r3, r2
 800a4c0:	6033      	str	r3, [r6, #0]
 800a4c2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a4c6:	460c      	mov	r4, r1
 800a4c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a4cc:	b10a      	cbz	r2, 800a4d2 <_printf_common+0x26>
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	6033      	str	r3, [r6, #0]
 800a4d2:	6823      	ldr	r3, [r4, #0]
 800a4d4:	0699      	lsls	r1, r3, #26
 800a4d6:	bf42      	ittt	mi
 800a4d8:	6833      	ldrmi	r3, [r6, #0]
 800a4da:	3302      	addmi	r3, #2
 800a4dc:	6033      	strmi	r3, [r6, #0]
 800a4de:	6825      	ldr	r5, [r4, #0]
 800a4e0:	f015 0506 	ands.w	r5, r5, #6
 800a4e4:	d106      	bne.n	800a4f4 <_printf_common+0x48>
 800a4e6:	f104 0a19 	add.w	sl, r4, #25
 800a4ea:	68e3      	ldr	r3, [r4, #12]
 800a4ec:	6832      	ldr	r2, [r6, #0]
 800a4ee:	1a9b      	subs	r3, r3, r2
 800a4f0:	42ab      	cmp	r3, r5
 800a4f2:	dc2b      	bgt.n	800a54c <_printf_common+0xa0>
 800a4f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a4f8:	6822      	ldr	r2, [r4, #0]
 800a4fa:	3b00      	subs	r3, #0
 800a4fc:	bf18      	it	ne
 800a4fe:	2301      	movne	r3, #1
 800a500:	0692      	lsls	r2, r2, #26
 800a502:	d430      	bmi.n	800a566 <_printf_common+0xba>
 800a504:	4641      	mov	r1, r8
 800a506:	4638      	mov	r0, r7
 800a508:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a50c:	47c8      	blx	r9
 800a50e:	3001      	adds	r0, #1
 800a510:	d023      	beq.n	800a55a <_printf_common+0xae>
 800a512:	6823      	ldr	r3, [r4, #0]
 800a514:	6922      	ldr	r2, [r4, #16]
 800a516:	f003 0306 	and.w	r3, r3, #6
 800a51a:	2b04      	cmp	r3, #4
 800a51c:	bf14      	ite	ne
 800a51e:	2500      	movne	r5, #0
 800a520:	6833      	ldreq	r3, [r6, #0]
 800a522:	f04f 0600 	mov.w	r6, #0
 800a526:	bf08      	it	eq
 800a528:	68e5      	ldreq	r5, [r4, #12]
 800a52a:	f104 041a 	add.w	r4, r4, #26
 800a52e:	bf08      	it	eq
 800a530:	1aed      	subeq	r5, r5, r3
 800a532:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a536:	bf08      	it	eq
 800a538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a53c:	4293      	cmp	r3, r2
 800a53e:	bfc4      	itt	gt
 800a540:	1a9b      	subgt	r3, r3, r2
 800a542:	18ed      	addgt	r5, r5, r3
 800a544:	42b5      	cmp	r5, r6
 800a546:	d11a      	bne.n	800a57e <_printf_common+0xd2>
 800a548:	2000      	movs	r0, #0
 800a54a:	e008      	b.n	800a55e <_printf_common+0xb2>
 800a54c:	2301      	movs	r3, #1
 800a54e:	4652      	mov	r2, sl
 800a550:	4641      	mov	r1, r8
 800a552:	4638      	mov	r0, r7
 800a554:	47c8      	blx	r9
 800a556:	3001      	adds	r0, #1
 800a558:	d103      	bne.n	800a562 <_printf_common+0xb6>
 800a55a:	f04f 30ff 	mov.w	r0, #4294967295
 800a55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a562:	3501      	adds	r5, #1
 800a564:	e7c1      	b.n	800a4ea <_printf_common+0x3e>
 800a566:	2030      	movs	r0, #48	@ 0x30
 800a568:	18e1      	adds	r1, r4, r3
 800a56a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a56e:	1c5a      	adds	r2, r3, #1
 800a570:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a574:	4422      	add	r2, r4
 800a576:	3302      	adds	r3, #2
 800a578:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a57c:	e7c2      	b.n	800a504 <_printf_common+0x58>
 800a57e:	2301      	movs	r3, #1
 800a580:	4622      	mov	r2, r4
 800a582:	4641      	mov	r1, r8
 800a584:	4638      	mov	r0, r7
 800a586:	47c8      	blx	r9
 800a588:	3001      	adds	r0, #1
 800a58a:	d0e6      	beq.n	800a55a <_printf_common+0xae>
 800a58c:	3601      	adds	r6, #1
 800a58e:	e7d9      	b.n	800a544 <_printf_common+0x98>

0800a590 <_printf_i>:
 800a590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a594:	7e0f      	ldrb	r7, [r1, #24]
 800a596:	4691      	mov	r9, r2
 800a598:	2f78      	cmp	r7, #120	@ 0x78
 800a59a:	4680      	mov	r8, r0
 800a59c:	460c      	mov	r4, r1
 800a59e:	469a      	mov	sl, r3
 800a5a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a5a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a5a6:	d807      	bhi.n	800a5b8 <_printf_i+0x28>
 800a5a8:	2f62      	cmp	r7, #98	@ 0x62
 800a5aa:	d80a      	bhi.n	800a5c2 <_printf_i+0x32>
 800a5ac:	2f00      	cmp	r7, #0
 800a5ae:	f000 80d3 	beq.w	800a758 <_printf_i+0x1c8>
 800a5b2:	2f58      	cmp	r7, #88	@ 0x58
 800a5b4:	f000 80ba 	beq.w	800a72c <_printf_i+0x19c>
 800a5b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a5c0:	e03a      	b.n	800a638 <_printf_i+0xa8>
 800a5c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a5c6:	2b15      	cmp	r3, #21
 800a5c8:	d8f6      	bhi.n	800a5b8 <_printf_i+0x28>
 800a5ca:	a101      	add	r1, pc, #4	@ (adr r1, 800a5d0 <_printf_i+0x40>)
 800a5cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5d0:	0800a629 	.word	0x0800a629
 800a5d4:	0800a63d 	.word	0x0800a63d
 800a5d8:	0800a5b9 	.word	0x0800a5b9
 800a5dc:	0800a5b9 	.word	0x0800a5b9
 800a5e0:	0800a5b9 	.word	0x0800a5b9
 800a5e4:	0800a5b9 	.word	0x0800a5b9
 800a5e8:	0800a63d 	.word	0x0800a63d
 800a5ec:	0800a5b9 	.word	0x0800a5b9
 800a5f0:	0800a5b9 	.word	0x0800a5b9
 800a5f4:	0800a5b9 	.word	0x0800a5b9
 800a5f8:	0800a5b9 	.word	0x0800a5b9
 800a5fc:	0800a73f 	.word	0x0800a73f
 800a600:	0800a667 	.word	0x0800a667
 800a604:	0800a6f9 	.word	0x0800a6f9
 800a608:	0800a5b9 	.word	0x0800a5b9
 800a60c:	0800a5b9 	.word	0x0800a5b9
 800a610:	0800a761 	.word	0x0800a761
 800a614:	0800a5b9 	.word	0x0800a5b9
 800a618:	0800a667 	.word	0x0800a667
 800a61c:	0800a5b9 	.word	0x0800a5b9
 800a620:	0800a5b9 	.word	0x0800a5b9
 800a624:	0800a701 	.word	0x0800a701
 800a628:	6833      	ldr	r3, [r6, #0]
 800a62a:	1d1a      	adds	r2, r3, #4
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	6032      	str	r2, [r6, #0]
 800a630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a634:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a638:	2301      	movs	r3, #1
 800a63a:	e09e      	b.n	800a77a <_printf_i+0x1ea>
 800a63c:	6833      	ldr	r3, [r6, #0]
 800a63e:	6820      	ldr	r0, [r4, #0]
 800a640:	1d19      	adds	r1, r3, #4
 800a642:	6031      	str	r1, [r6, #0]
 800a644:	0606      	lsls	r6, r0, #24
 800a646:	d501      	bpl.n	800a64c <_printf_i+0xbc>
 800a648:	681d      	ldr	r5, [r3, #0]
 800a64a:	e003      	b.n	800a654 <_printf_i+0xc4>
 800a64c:	0645      	lsls	r5, r0, #25
 800a64e:	d5fb      	bpl.n	800a648 <_printf_i+0xb8>
 800a650:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a654:	2d00      	cmp	r5, #0
 800a656:	da03      	bge.n	800a660 <_printf_i+0xd0>
 800a658:	232d      	movs	r3, #45	@ 0x2d
 800a65a:	426d      	negs	r5, r5
 800a65c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a660:	230a      	movs	r3, #10
 800a662:	4859      	ldr	r0, [pc, #356]	@ (800a7c8 <_printf_i+0x238>)
 800a664:	e011      	b.n	800a68a <_printf_i+0xfa>
 800a666:	6821      	ldr	r1, [r4, #0]
 800a668:	6833      	ldr	r3, [r6, #0]
 800a66a:	0608      	lsls	r0, r1, #24
 800a66c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a670:	d402      	bmi.n	800a678 <_printf_i+0xe8>
 800a672:	0649      	lsls	r1, r1, #25
 800a674:	bf48      	it	mi
 800a676:	b2ad      	uxthmi	r5, r5
 800a678:	2f6f      	cmp	r7, #111	@ 0x6f
 800a67a:	6033      	str	r3, [r6, #0]
 800a67c:	bf14      	ite	ne
 800a67e:	230a      	movne	r3, #10
 800a680:	2308      	moveq	r3, #8
 800a682:	4851      	ldr	r0, [pc, #324]	@ (800a7c8 <_printf_i+0x238>)
 800a684:	2100      	movs	r1, #0
 800a686:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a68a:	6866      	ldr	r6, [r4, #4]
 800a68c:	2e00      	cmp	r6, #0
 800a68e:	bfa8      	it	ge
 800a690:	6821      	ldrge	r1, [r4, #0]
 800a692:	60a6      	str	r6, [r4, #8]
 800a694:	bfa4      	itt	ge
 800a696:	f021 0104 	bicge.w	r1, r1, #4
 800a69a:	6021      	strge	r1, [r4, #0]
 800a69c:	b90d      	cbnz	r5, 800a6a2 <_printf_i+0x112>
 800a69e:	2e00      	cmp	r6, #0
 800a6a0:	d04b      	beq.n	800a73a <_printf_i+0x1aa>
 800a6a2:	4616      	mov	r6, r2
 800a6a4:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6a8:	fb03 5711 	mls	r7, r3, r1, r5
 800a6ac:	5dc7      	ldrb	r7, [r0, r7]
 800a6ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a6b2:	462f      	mov	r7, r5
 800a6b4:	42bb      	cmp	r3, r7
 800a6b6:	460d      	mov	r5, r1
 800a6b8:	d9f4      	bls.n	800a6a4 <_printf_i+0x114>
 800a6ba:	2b08      	cmp	r3, #8
 800a6bc:	d10b      	bne.n	800a6d6 <_printf_i+0x146>
 800a6be:	6823      	ldr	r3, [r4, #0]
 800a6c0:	07df      	lsls	r7, r3, #31
 800a6c2:	d508      	bpl.n	800a6d6 <_printf_i+0x146>
 800a6c4:	6923      	ldr	r3, [r4, #16]
 800a6c6:	6861      	ldr	r1, [r4, #4]
 800a6c8:	4299      	cmp	r1, r3
 800a6ca:	bfde      	ittt	le
 800a6cc:	2330      	movle	r3, #48	@ 0x30
 800a6ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a6d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a6d6:	1b92      	subs	r2, r2, r6
 800a6d8:	6122      	str	r2, [r4, #16]
 800a6da:	464b      	mov	r3, r9
 800a6dc:	4621      	mov	r1, r4
 800a6de:	4640      	mov	r0, r8
 800a6e0:	f8cd a000 	str.w	sl, [sp]
 800a6e4:	aa03      	add	r2, sp, #12
 800a6e6:	f7ff fee1 	bl	800a4ac <_printf_common>
 800a6ea:	3001      	adds	r0, #1
 800a6ec:	d14a      	bne.n	800a784 <_printf_i+0x1f4>
 800a6ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f2:	b004      	add	sp, #16
 800a6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6f8:	6823      	ldr	r3, [r4, #0]
 800a6fa:	f043 0320 	orr.w	r3, r3, #32
 800a6fe:	6023      	str	r3, [r4, #0]
 800a700:	2778      	movs	r7, #120	@ 0x78
 800a702:	4832      	ldr	r0, [pc, #200]	@ (800a7cc <_printf_i+0x23c>)
 800a704:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a708:	6823      	ldr	r3, [r4, #0]
 800a70a:	6831      	ldr	r1, [r6, #0]
 800a70c:	061f      	lsls	r7, r3, #24
 800a70e:	f851 5b04 	ldr.w	r5, [r1], #4
 800a712:	d402      	bmi.n	800a71a <_printf_i+0x18a>
 800a714:	065f      	lsls	r7, r3, #25
 800a716:	bf48      	it	mi
 800a718:	b2ad      	uxthmi	r5, r5
 800a71a:	6031      	str	r1, [r6, #0]
 800a71c:	07d9      	lsls	r1, r3, #31
 800a71e:	bf44      	itt	mi
 800a720:	f043 0320 	orrmi.w	r3, r3, #32
 800a724:	6023      	strmi	r3, [r4, #0]
 800a726:	b11d      	cbz	r5, 800a730 <_printf_i+0x1a0>
 800a728:	2310      	movs	r3, #16
 800a72a:	e7ab      	b.n	800a684 <_printf_i+0xf4>
 800a72c:	4826      	ldr	r0, [pc, #152]	@ (800a7c8 <_printf_i+0x238>)
 800a72e:	e7e9      	b.n	800a704 <_printf_i+0x174>
 800a730:	6823      	ldr	r3, [r4, #0]
 800a732:	f023 0320 	bic.w	r3, r3, #32
 800a736:	6023      	str	r3, [r4, #0]
 800a738:	e7f6      	b.n	800a728 <_printf_i+0x198>
 800a73a:	4616      	mov	r6, r2
 800a73c:	e7bd      	b.n	800a6ba <_printf_i+0x12a>
 800a73e:	6833      	ldr	r3, [r6, #0]
 800a740:	6825      	ldr	r5, [r4, #0]
 800a742:	1d18      	adds	r0, r3, #4
 800a744:	6961      	ldr	r1, [r4, #20]
 800a746:	6030      	str	r0, [r6, #0]
 800a748:	062e      	lsls	r6, r5, #24
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	d501      	bpl.n	800a752 <_printf_i+0x1c2>
 800a74e:	6019      	str	r1, [r3, #0]
 800a750:	e002      	b.n	800a758 <_printf_i+0x1c8>
 800a752:	0668      	lsls	r0, r5, #25
 800a754:	d5fb      	bpl.n	800a74e <_printf_i+0x1be>
 800a756:	8019      	strh	r1, [r3, #0]
 800a758:	2300      	movs	r3, #0
 800a75a:	4616      	mov	r6, r2
 800a75c:	6123      	str	r3, [r4, #16]
 800a75e:	e7bc      	b.n	800a6da <_printf_i+0x14a>
 800a760:	6833      	ldr	r3, [r6, #0]
 800a762:	2100      	movs	r1, #0
 800a764:	1d1a      	adds	r2, r3, #4
 800a766:	6032      	str	r2, [r6, #0]
 800a768:	681e      	ldr	r6, [r3, #0]
 800a76a:	6862      	ldr	r2, [r4, #4]
 800a76c:	4630      	mov	r0, r6
 800a76e:	f000 faec 	bl	800ad4a <memchr>
 800a772:	b108      	cbz	r0, 800a778 <_printf_i+0x1e8>
 800a774:	1b80      	subs	r0, r0, r6
 800a776:	6060      	str	r0, [r4, #4]
 800a778:	6863      	ldr	r3, [r4, #4]
 800a77a:	6123      	str	r3, [r4, #16]
 800a77c:	2300      	movs	r3, #0
 800a77e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a782:	e7aa      	b.n	800a6da <_printf_i+0x14a>
 800a784:	4632      	mov	r2, r6
 800a786:	4649      	mov	r1, r9
 800a788:	4640      	mov	r0, r8
 800a78a:	6923      	ldr	r3, [r4, #16]
 800a78c:	47d0      	blx	sl
 800a78e:	3001      	adds	r0, #1
 800a790:	d0ad      	beq.n	800a6ee <_printf_i+0x15e>
 800a792:	6823      	ldr	r3, [r4, #0]
 800a794:	079b      	lsls	r3, r3, #30
 800a796:	d413      	bmi.n	800a7c0 <_printf_i+0x230>
 800a798:	68e0      	ldr	r0, [r4, #12]
 800a79a:	9b03      	ldr	r3, [sp, #12]
 800a79c:	4298      	cmp	r0, r3
 800a79e:	bfb8      	it	lt
 800a7a0:	4618      	movlt	r0, r3
 800a7a2:	e7a6      	b.n	800a6f2 <_printf_i+0x162>
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	4632      	mov	r2, r6
 800a7a8:	4649      	mov	r1, r9
 800a7aa:	4640      	mov	r0, r8
 800a7ac:	47d0      	blx	sl
 800a7ae:	3001      	adds	r0, #1
 800a7b0:	d09d      	beq.n	800a6ee <_printf_i+0x15e>
 800a7b2:	3501      	adds	r5, #1
 800a7b4:	68e3      	ldr	r3, [r4, #12]
 800a7b6:	9903      	ldr	r1, [sp, #12]
 800a7b8:	1a5b      	subs	r3, r3, r1
 800a7ba:	42ab      	cmp	r3, r5
 800a7bc:	dcf2      	bgt.n	800a7a4 <_printf_i+0x214>
 800a7be:	e7eb      	b.n	800a798 <_printf_i+0x208>
 800a7c0:	2500      	movs	r5, #0
 800a7c2:	f104 0619 	add.w	r6, r4, #25
 800a7c6:	e7f5      	b.n	800a7b4 <_printf_i+0x224>
 800a7c8:	0800cff4 	.word	0x0800cff4
 800a7cc:	0800d005 	.word	0x0800d005

0800a7d0 <std>:
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	b510      	push	{r4, lr}
 800a7d4:	4604      	mov	r4, r0
 800a7d6:	e9c0 3300 	strd	r3, r3, [r0]
 800a7da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7de:	6083      	str	r3, [r0, #8]
 800a7e0:	8181      	strh	r1, [r0, #12]
 800a7e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a7e4:	81c2      	strh	r2, [r0, #14]
 800a7e6:	6183      	str	r3, [r0, #24]
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	2208      	movs	r2, #8
 800a7ec:	305c      	adds	r0, #92	@ 0x5c
 800a7ee:	f000 fa2d 	bl	800ac4c <memset>
 800a7f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a828 <std+0x58>)
 800a7f4:	6224      	str	r4, [r4, #32]
 800a7f6:	6263      	str	r3, [r4, #36]	@ 0x24
 800a7f8:	4b0c      	ldr	r3, [pc, #48]	@ (800a82c <std+0x5c>)
 800a7fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a7fc:	4b0c      	ldr	r3, [pc, #48]	@ (800a830 <std+0x60>)
 800a7fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a800:	4b0c      	ldr	r3, [pc, #48]	@ (800a834 <std+0x64>)
 800a802:	6323      	str	r3, [r4, #48]	@ 0x30
 800a804:	4b0c      	ldr	r3, [pc, #48]	@ (800a838 <std+0x68>)
 800a806:	429c      	cmp	r4, r3
 800a808:	d006      	beq.n	800a818 <std+0x48>
 800a80a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a80e:	4294      	cmp	r4, r2
 800a810:	d002      	beq.n	800a818 <std+0x48>
 800a812:	33d0      	adds	r3, #208	@ 0xd0
 800a814:	429c      	cmp	r4, r3
 800a816:	d105      	bne.n	800a824 <std+0x54>
 800a818:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a820:	f000 ba90 	b.w	800ad44 <__retarget_lock_init_recursive>
 800a824:	bd10      	pop	{r4, pc}
 800a826:	bf00      	nop
 800a828:	0800aa9d 	.word	0x0800aa9d
 800a82c:	0800aabf 	.word	0x0800aabf
 800a830:	0800aaf7 	.word	0x0800aaf7
 800a834:	0800ab1b 	.word	0x0800ab1b
 800a838:	200005c0 	.word	0x200005c0

0800a83c <stdio_exit_handler>:
 800a83c:	4a02      	ldr	r2, [pc, #8]	@ (800a848 <stdio_exit_handler+0xc>)
 800a83e:	4903      	ldr	r1, [pc, #12]	@ (800a84c <stdio_exit_handler+0x10>)
 800a840:	4803      	ldr	r0, [pc, #12]	@ (800a850 <stdio_exit_handler+0x14>)
 800a842:	f000 b869 	b.w	800a918 <_fwalk_sglue>
 800a846:	bf00      	nop
 800a848:	20000108 	.word	0x20000108
 800a84c:	0800c935 	.word	0x0800c935
 800a850:	20000118 	.word	0x20000118

0800a854 <cleanup_stdio>:
 800a854:	6841      	ldr	r1, [r0, #4]
 800a856:	4b0c      	ldr	r3, [pc, #48]	@ (800a888 <cleanup_stdio+0x34>)
 800a858:	b510      	push	{r4, lr}
 800a85a:	4299      	cmp	r1, r3
 800a85c:	4604      	mov	r4, r0
 800a85e:	d001      	beq.n	800a864 <cleanup_stdio+0x10>
 800a860:	f002 f868 	bl	800c934 <_fflush_r>
 800a864:	68a1      	ldr	r1, [r4, #8]
 800a866:	4b09      	ldr	r3, [pc, #36]	@ (800a88c <cleanup_stdio+0x38>)
 800a868:	4299      	cmp	r1, r3
 800a86a:	d002      	beq.n	800a872 <cleanup_stdio+0x1e>
 800a86c:	4620      	mov	r0, r4
 800a86e:	f002 f861 	bl	800c934 <_fflush_r>
 800a872:	68e1      	ldr	r1, [r4, #12]
 800a874:	4b06      	ldr	r3, [pc, #24]	@ (800a890 <cleanup_stdio+0x3c>)
 800a876:	4299      	cmp	r1, r3
 800a878:	d004      	beq.n	800a884 <cleanup_stdio+0x30>
 800a87a:	4620      	mov	r0, r4
 800a87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a880:	f002 b858 	b.w	800c934 <_fflush_r>
 800a884:	bd10      	pop	{r4, pc}
 800a886:	bf00      	nop
 800a888:	200005c0 	.word	0x200005c0
 800a88c:	20000628 	.word	0x20000628
 800a890:	20000690 	.word	0x20000690

0800a894 <global_stdio_init.part.0>:
 800a894:	b510      	push	{r4, lr}
 800a896:	4b0b      	ldr	r3, [pc, #44]	@ (800a8c4 <global_stdio_init.part.0+0x30>)
 800a898:	4c0b      	ldr	r4, [pc, #44]	@ (800a8c8 <global_stdio_init.part.0+0x34>)
 800a89a:	4a0c      	ldr	r2, [pc, #48]	@ (800a8cc <global_stdio_init.part.0+0x38>)
 800a89c:	4620      	mov	r0, r4
 800a89e:	601a      	str	r2, [r3, #0]
 800a8a0:	2104      	movs	r1, #4
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f7ff ff94 	bl	800a7d0 <std>
 800a8a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	2109      	movs	r1, #9
 800a8b0:	f7ff ff8e 	bl	800a7d0 <std>
 800a8b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a8b8:	2202      	movs	r2, #2
 800a8ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8be:	2112      	movs	r1, #18
 800a8c0:	f7ff bf86 	b.w	800a7d0 <std>
 800a8c4:	200006f8 	.word	0x200006f8
 800a8c8:	200005c0 	.word	0x200005c0
 800a8cc:	0800a83d 	.word	0x0800a83d

0800a8d0 <__sfp_lock_acquire>:
 800a8d0:	4801      	ldr	r0, [pc, #4]	@ (800a8d8 <__sfp_lock_acquire+0x8>)
 800a8d2:	f000 ba38 	b.w	800ad46 <__retarget_lock_acquire_recursive>
 800a8d6:	bf00      	nop
 800a8d8:	20000701 	.word	0x20000701

0800a8dc <__sfp_lock_release>:
 800a8dc:	4801      	ldr	r0, [pc, #4]	@ (800a8e4 <__sfp_lock_release+0x8>)
 800a8de:	f000 ba33 	b.w	800ad48 <__retarget_lock_release_recursive>
 800a8e2:	bf00      	nop
 800a8e4:	20000701 	.word	0x20000701

0800a8e8 <__sinit>:
 800a8e8:	b510      	push	{r4, lr}
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	f7ff fff0 	bl	800a8d0 <__sfp_lock_acquire>
 800a8f0:	6a23      	ldr	r3, [r4, #32]
 800a8f2:	b11b      	cbz	r3, 800a8fc <__sinit+0x14>
 800a8f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8f8:	f7ff bff0 	b.w	800a8dc <__sfp_lock_release>
 800a8fc:	4b04      	ldr	r3, [pc, #16]	@ (800a910 <__sinit+0x28>)
 800a8fe:	6223      	str	r3, [r4, #32]
 800a900:	4b04      	ldr	r3, [pc, #16]	@ (800a914 <__sinit+0x2c>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d1f5      	bne.n	800a8f4 <__sinit+0xc>
 800a908:	f7ff ffc4 	bl	800a894 <global_stdio_init.part.0>
 800a90c:	e7f2      	b.n	800a8f4 <__sinit+0xc>
 800a90e:	bf00      	nop
 800a910:	0800a855 	.word	0x0800a855
 800a914:	200006f8 	.word	0x200006f8

0800a918 <_fwalk_sglue>:
 800a918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a91c:	4607      	mov	r7, r0
 800a91e:	4688      	mov	r8, r1
 800a920:	4614      	mov	r4, r2
 800a922:	2600      	movs	r6, #0
 800a924:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a928:	f1b9 0901 	subs.w	r9, r9, #1
 800a92c:	d505      	bpl.n	800a93a <_fwalk_sglue+0x22>
 800a92e:	6824      	ldr	r4, [r4, #0]
 800a930:	2c00      	cmp	r4, #0
 800a932:	d1f7      	bne.n	800a924 <_fwalk_sglue+0xc>
 800a934:	4630      	mov	r0, r6
 800a936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a93a:	89ab      	ldrh	r3, [r5, #12]
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d907      	bls.n	800a950 <_fwalk_sglue+0x38>
 800a940:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a944:	3301      	adds	r3, #1
 800a946:	d003      	beq.n	800a950 <_fwalk_sglue+0x38>
 800a948:	4629      	mov	r1, r5
 800a94a:	4638      	mov	r0, r7
 800a94c:	47c0      	blx	r8
 800a94e:	4306      	orrs	r6, r0
 800a950:	3568      	adds	r5, #104	@ 0x68
 800a952:	e7e9      	b.n	800a928 <_fwalk_sglue+0x10>

0800a954 <iprintf>:
 800a954:	b40f      	push	{r0, r1, r2, r3}
 800a956:	b507      	push	{r0, r1, r2, lr}
 800a958:	4906      	ldr	r1, [pc, #24]	@ (800a974 <iprintf+0x20>)
 800a95a:	ab04      	add	r3, sp, #16
 800a95c:	6808      	ldr	r0, [r1, #0]
 800a95e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a962:	6881      	ldr	r1, [r0, #8]
 800a964:	9301      	str	r3, [sp, #4]
 800a966:	f001 fe4d 	bl	800c604 <_vfiprintf_r>
 800a96a:	b003      	add	sp, #12
 800a96c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a970:	b004      	add	sp, #16
 800a972:	4770      	bx	lr
 800a974:	20000114 	.word	0x20000114

0800a978 <_puts_r>:
 800a978:	6a03      	ldr	r3, [r0, #32]
 800a97a:	b570      	push	{r4, r5, r6, lr}
 800a97c:	4605      	mov	r5, r0
 800a97e:	460e      	mov	r6, r1
 800a980:	6884      	ldr	r4, [r0, #8]
 800a982:	b90b      	cbnz	r3, 800a988 <_puts_r+0x10>
 800a984:	f7ff ffb0 	bl	800a8e8 <__sinit>
 800a988:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a98a:	07db      	lsls	r3, r3, #31
 800a98c:	d405      	bmi.n	800a99a <_puts_r+0x22>
 800a98e:	89a3      	ldrh	r3, [r4, #12]
 800a990:	0598      	lsls	r0, r3, #22
 800a992:	d402      	bmi.n	800a99a <_puts_r+0x22>
 800a994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a996:	f000 f9d6 	bl	800ad46 <__retarget_lock_acquire_recursive>
 800a99a:	89a3      	ldrh	r3, [r4, #12]
 800a99c:	0719      	lsls	r1, r3, #28
 800a99e:	d502      	bpl.n	800a9a6 <_puts_r+0x2e>
 800a9a0:	6923      	ldr	r3, [r4, #16]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d135      	bne.n	800aa12 <_puts_r+0x9a>
 800a9a6:	4621      	mov	r1, r4
 800a9a8:	4628      	mov	r0, r5
 800a9aa:	f000 f8f9 	bl	800aba0 <__swsetup_r>
 800a9ae:	b380      	cbz	r0, 800aa12 <_puts_r+0x9a>
 800a9b0:	f04f 35ff 	mov.w	r5, #4294967295
 800a9b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9b6:	07da      	lsls	r2, r3, #31
 800a9b8:	d405      	bmi.n	800a9c6 <_puts_r+0x4e>
 800a9ba:	89a3      	ldrh	r3, [r4, #12]
 800a9bc:	059b      	lsls	r3, r3, #22
 800a9be:	d402      	bmi.n	800a9c6 <_puts_r+0x4e>
 800a9c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9c2:	f000 f9c1 	bl	800ad48 <__retarget_lock_release_recursive>
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	bd70      	pop	{r4, r5, r6, pc}
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	da04      	bge.n	800a9d8 <_puts_r+0x60>
 800a9ce:	69a2      	ldr	r2, [r4, #24]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	dc17      	bgt.n	800aa04 <_puts_r+0x8c>
 800a9d4:	290a      	cmp	r1, #10
 800a9d6:	d015      	beq.n	800aa04 <_puts_r+0x8c>
 800a9d8:	6823      	ldr	r3, [r4, #0]
 800a9da:	1c5a      	adds	r2, r3, #1
 800a9dc:	6022      	str	r2, [r4, #0]
 800a9de:	7019      	strb	r1, [r3, #0]
 800a9e0:	68a3      	ldr	r3, [r4, #8]
 800a9e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a9e6:	3b01      	subs	r3, #1
 800a9e8:	60a3      	str	r3, [r4, #8]
 800a9ea:	2900      	cmp	r1, #0
 800a9ec:	d1ed      	bne.n	800a9ca <_puts_r+0x52>
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	da11      	bge.n	800aa16 <_puts_r+0x9e>
 800a9f2:	4622      	mov	r2, r4
 800a9f4:	210a      	movs	r1, #10
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	f000 f893 	bl	800ab22 <__swbuf_r>
 800a9fc:	3001      	adds	r0, #1
 800a9fe:	d0d7      	beq.n	800a9b0 <_puts_r+0x38>
 800aa00:	250a      	movs	r5, #10
 800aa02:	e7d7      	b.n	800a9b4 <_puts_r+0x3c>
 800aa04:	4622      	mov	r2, r4
 800aa06:	4628      	mov	r0, r5
 800aa08:	f000 f88b 	bl	800ab22 <__swbuf_r>
 800aa0c:	3001      	adds	r0, #1
 800aa0e:	d1e7      	bne.n	800a9e0 <_puts_r+0x68>
 800aa10:	e7ce      	b.n	800a9b0 <_puts_r+0x38>
 800aa12:	3e01      	subs	r6, #1
 800aa14:	e7e4      	b.n	800a9e0 <_puts_r+0x68>
 800aa16:	6823      	ldr	r3, [r4, #0]
 800aa18:	1c5a      	adds	r2, r3, #1
 800aa1a:	6022      	str	r2, [r4, #0]
 800aa1c:	220a      	movs	r2, #10
 800aa1e:	701a      	strb	r2, [r3, #0]
 800aa20:	e7ee      	b.n	800aa00 <_puts_r+0x88>
	...

0800aa24 <puts>:
 800aa24:	4b02      	ldr	r3, [pc, #8]	@ (800aa30 <puts+0xc>)
 800aa26:	4601      	mov	r1, r0
 800aa28:	6818      	ldr	r0, [r3, #0]
 800aa2a:	f7ff bfa5 	b.w	800a978 <_puts_r>
 800aa2e:	bf00      	nop
 800aa30:	20000114 	.word	0x20000114

0800aa34 <sniprintf>:
 800aa34:	b40c      	push	{r2, r3}
 800aa36:	b530      	push	{r4, r5, lr}
 800aa38:	4b17      	ldr	r3, [pc, #92]	@ (800aa98 <sniprintf+0x64>)
 800aa3a:	1e0c      	subs	r4, r1, #0
 800aa3c:	681d      	ldr	r5, [r3, #0]
 800aa3e:	b09d      	sub	sp, #116	@ 0x74
 800aa40:	da08      	bge.n	800aa54 <sniprintf+0x20>
 800aa42:	238b      	movs	r3, #139	@ 0x8b
 800aa44:	f04f 30ff 	mov.w	r0, #4294967295
 800aa48:	602b      	str	r3, [r5, #0]
 800aa4a:	b01d      	add	sp, #116	@ 0x74
 800aa4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa50:	b002      	add	sp, #8
 800aa52:	4770      	bx	lr
 800aa54:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800aa58:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aa5c:	bf0c      	ite	eq
 800aa5e:	4623      	moveq	r3, r4
 800aa60:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aa64:	9304      	str	r3, [sp, #16]
 800aa66:	9307      	str	r3, [sp, #28]
 800aa68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800aa6c:	9002      	str	r0, [sp, #8]
 800aa6e:	9006      	str	r0, [sp, #24]
 800aa70:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aa74:	4628      	mov	r0, r5
 800aa76:	ab21      	add	r3, sp, #132	@ 0x84
 800aa78:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800aa7a:	a902      	add	r1, sp, #8
 800aa7c:	9301      	str	r3, [sp, #4]
 800aa7e:	f001 fc9d 	bl	800c3bc <_svfiprintf_r>
 800aa82:	1c43      	adds	r3, r0, #1
 800aa84:	bfbc      	itt	lt
 800aa86:	238b      	movlt	r3, #139	@ 0x8b
 800aa88:	602b      	strlt	r3, [r5, #0]
 800aa8a:	2c00      	cmp	r4, #0
 800aa8c:	d0dd      	beq.n	800aa4a <sniprintf+0x16>
 800aa8e:	2200      	movs	r2, #0
 800aa90:	9b02      	ldr	r3, [sp, #8]
 800aa92:	701a      	strb	r2, [r3, #0]
 800aa94:	e7d9      	b.n	800aa4a <sniprintf+0x16>
 800aa96:	bf00      	nop
 800aa98:	20000114 	.word	0x20000114

0800aa9c <__sread>:
 800aa9c:	b510      	push	{r4, lr}
 800aa9e:	460c      	mov	r4, r1
 800aaa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaa4:	f000 f900 	bl	800aca8 <_read_r>
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	bfab      	itete	ge
 800aaac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aaae:	89a3      	ldrhlt	r3, [r4, #12]
 800aab0:	181b      	addge	r3, r3, r0
 800aab2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aab6:	bfac      	ite	ge
 800aab8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aaba:	81a3      	strhlt	r3, [r4, #12]
 800aabc:	bd10      	pop	{r4, pc}

0800aabe <__swrite>:
 800aabe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aac2:	461f      	mov	r7, r3
 800aac4:	898b      	ldrh	r3, [r1, #12]
 800aac6:	4605      	mov	r5, r0
 800aac8:	05db      	lsls	r3, r3, #23
 800aaca:	460c      	mov	r4, r1
 800aacc:	4616      	mov	r6, r2
 800aace:	d505      	bpl.n	800aadc <__swrite+0x1e>
 800aad0:	2302      	movs	r3, #2
 800aad2:	2200      	movs	r2, #0
 800aad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aad8:	f000 f8d4 	bl	800ac84 <_lseek_r>
 800aadc:	89a3      	ldrh	r3, [r4, #12]
 800aade:	4632      	mov	r2, r6
 800aae0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aae4:	81a3      	strh	r3, [r4, #12]
 800aae6:	4628      	mov	r0, r5
 800aae8:	463b      	mov	r3, r7
 800aaea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aaee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf2:	f000 b8eb 	b.w	800accc <_write_r>

0800aaf6 <__sseek>:
 800aaf6:	b510      	push	{r4, lr}
 800aaf8:	460c      	mov	r4, r1
 800aafa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aafe:	f000 f8c1 	bl	800ac84 <_lseek_r>
 800ab02:	1c43      	adds	r3, r0, #1
 800ab04:	89a3      	ldrh	r3, [r4, #12]
 800ab06:	bf15      	itete	ne
 800ab08:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ab0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ab0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ab12:	81a3      	strheq	r3, [r4, #12]
 800ab14:	bf18      	it	ne
 800ab16:	81a3      	strhne	r3, [r4, #12]
 800ab18:	bd10      	pop	{r4, pc}

0800ab1a <__sclose>:
 800ab1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab1e:	f000 b8a1 	b.w	800ac64 <_close_r>

0800ab22 <__swbuf_r>:
 800ab22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab24:	460e      	mov	r6, r1
 800ab26:	4614      	mov	r4, r2
 800ab28:	4605      	mov	r5, r0
 800ab2a:	b118      	cbz	r0, 800ab34 <__swbuf_r+0x12>
 800ab2c:	6a03      	ldr	r3, [r0, #32]
 800ab2e:	b90b      	cbnz	r3, 800ab34 <__swbuf_r+0x12>
 800ab30:	f7ff feda 	bl	800a8e8 <__sinit>
 800ab34:	69a3      	ldr	r3, [r4, #24]
 800ab36:	60a3      	str	r3, [r4, #8]
 800ab38:	89a3      	ldrh	r3, [r4, #12]
 800ab3a:	071a      	lsls	r2, r3, #28
 800ab3c:	d501      	bpl.n	800ab42 <__swbuf_r+0x20>
 800ab3e:	6923      	ldr	r3, [r4, #16]
 800ab40:	b943      	cbnz	r3, 800ab54 <__swbuf_r+0x32>
 800ab42:	4621      	mov	r1, r4
 800ab44:	4628      	mov	r0, r5
 800ab46:	f000 f82b 	bl	800aba0 <__swsetup_r>
 800ab4a:	b118      	cbz	r0, 800ab54 <__swbuf_r+0x32>
 800ab4c:	f04f 37ff 	mov.w	r7, #4294967295
 800ab50:	4638      	mov	r0, r7
 800ab52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab54:	6823      	ldr	r3, [r4, #0]
 800ab56:	6922      	ldr	r2, [r4, #16]
 800ab58:	b2f6      	uxtb	r6, r6
 800ab5a:	1a98      	subs	r0, r3, r2
 800ab5c:	6963      	ldr	r3, [r4, #20]
 800ab5e:	4637      	mov	r7, r6
 800ab60:	4283      	cmp	r3, r0
 800ab62:	dc05      	bgt.n	800ab70 <__swbuf_r+0x4e>
 800ab64:	4621      	mov	r1, r4
 800ab66:	4628      	mov	r0, r5
 800ab68:	f001 fee4 	bl	800c934 <_fflush_r>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	d1ed      	bne.n	800ab4c <__swbuf_r+0x2a>
 800ab70:	68a3      	ldr	r3, [r4, #8]
 800ab72:	3b01      	subs	r3, #1
 800ab74:	60a3      	str	r3, [r4, #8]
 800ab76:	6823      	ldr	r3, [r4, #0]
 800ab78:	1c5a      	adds	r2, r3, #1
 800ab7a:	6022      	str	r2, [r4, #0]
 800ab7c:	701e      	strb	r6, [r3, #0]
 800ab7e:	6962      	ldr	r2, [r4, #20]
 800ab80:	1c43      	adds	r3, r0, #1
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d004      	beq.n	800ab90 <__swbuf_r+0x6e>
 800ab86:	89a3      	ldrh	r3, [r4, #12]
 800ab88:	07db      	lsls	r3, r3, #31
 800ab8a:	d5e1      	bpl.n	800ab50 <__swbuf_r+0x2e>
 800ab8c:	2e0a      	cmp	r6, #10
 800ab8e:	d1df      	bne.n	800ab50 <__swbuf_r+0x2e>
 800ab90:	4621      	mov	r1, r4
 800ab92:	4628      	mov	r0, r5
 800ab94:	f001 fece 	bl	800c934 <_fflush_r>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d0d9      	beq.n	800ab50 <__swbuf_r+0x2e>
 800ab9c:	e7d6      	b.n	800ab4c <__swbuf_r+0x2a>
	...

0800aba0 <__swsetup_r>:
 800aba0:	b538      	push	{r3, r4, r5, lr}
 800aba2:	4b29      	ldr	r3, [pc, #164]	@ (800ac48 <__swsetup_r+0xa8>)
 800aba4:	4605      	mov	r5, r0
 800aba6:	6818      	ldr	r0, [r3, #0]
 800aba8:	460c      	mov	r4, r1
 800abaa:	b118      	cbz	r0, 800abb4 <__swsetup_r+0x14>
 800abac:	6a03      	ldr	r3, [r0, #32]
 800abae:	b90b      	cbnz	r3, 800abb4 <__swsetup_r+0x14>
 800abb0:	f7ff fe9a 	bl	800a8e8 <__sinit>
 800abb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abb8:	0719      	lsls	r1, r3, #28
 800abba:	d422      	bmi.n	800ac02 <__swsetup_r+0x62>
 800abbc:	06da      	lsls	r2, r3, #27
 800abbe:	d407      	bmi.n	800abd0 <__swsetup_r+0x30>
 800abc0:	2209      	movs	r2, #9
 800abc2:	602a      	str	r2, [r5, #0]
 800abc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abc8:	f04f 30ff 	mov.w	r0, #4294967295
 800abcc:	81a3      	strh	r3, [r4, #12]
 800abce:	e033      	b.n	800ac38 <__swsetup_r+0x98>
 800abd0:	0758      	lsls	r0, r3, #29
 800abd2:	d512      	bpl.n	800abfa <__swsetup_r+0x5a>
 800abd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abd6:	b141      	cbz	r1, 800abea <__swsetup_r+0x4a>
 800abd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800abdc:	4299      	cmp	r1, r3
 800abde:	d002      	beq.n	800abe6 <__swsetup_r+0x46>
 800abe0:	4628      	mov	r0, r5
 800abe2:	f000 ff11 	bl	800ba08 <_free_r>
 800abe6:	2300      	movs	r3, #0
 800abe8:	6363      	str	r3, [r4, #52]	@ 0x34
 800abea:	89a3      	ldrh	r3, [r4, #12]
 800abec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800abf0:	81a3      	strh	r3, [r4, #12]
 800abf2:	2300      	movs	r3, #0
 800abf4:	6063      	str	r3, [r4, #4]
 800abf6:	6923      	ldr	r3, [r4, #16]
 800abf8:	6023      	str	r3, [r4, #0]
 800abfa:	89a3      	ldrh	r3, [r4, #12]
 800abfc:	f043 0308 	orr.w	r3, r3, #8
 800ac00:	81a3      	strh	r3, [r4, #12]
 800ac02:	6923      	ldr	r3, [r4, #16]
 800ac04:	b94b      	cbnz	r3, 800ac1a <__swsetup_r+0x7a>
 800ac06:	89a3      	ldrh	r3, [r4, #12]
 800ac08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ac0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac10:	d003      	beq.n	800ac1a <__swsetup_r+0x7a>
 800ac12:	4621      	mov	r1, r4
 800ac14:	4628      	mov	r0, r5
 800ac16:	f001 feda 	bl	800c9ce <__smakebuf_r>
 800ac1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac1e:	f013 0201 	ands.w	r2, r3, #1
 800ac22:	d00a      	beq.n	800ac3a <__swsetup_r+0x9a>
 800ac24:	2200      	movs	r2, #0
 800ac26:	60a2      	str	r2, [r4, #8]
 800ac28:	6962      	ldr	r2, [r4, #20]
 800ac2a:	4252      	negs	r2, r2
 800ac2c:	61a2      	str	r2, [r4, #24]
 800ac2e:	6922      	ldr	r2, [r4, #16]
 800ac30:	b942      	cbnz	r2, 800ac44 <__swsetup_r+0xa4>
 800ac32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ac36:	d1c5      	bne.n	800abc4 <__swsetup_r+0x24>
 800ac38:	bd38      	pop	{r3, r4, r5, pc}
 800ac3a:	0799      	lsls	r1, r3, #30
 800ac3c:	bf58      	it	pl
 800ac3e:	6962      	ldrpl	r2, [r4, #20]
 800ac40:	60a2      	str	r2, [r4, #8]
 800ac42:	e7f4      	b.n	800ac2e <__swsetup_r+0x8e>
 800ac44:	2000      	movs	r0, #0
 800ac46:	e7f7      	b.n	800ac38 <__swsetup_r+0x98>
 800ac48:	20000114 	.word	0x20000114

0800ac4c <memset>:
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	4402      	add	r2, r0
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d100      	bne.n	800ac56 <memset+0xa>
 800ac54:	4770      	bx	lr
 800ac56:	f803 1b01 	strb.w	r1, [r3], #1
 800ac5a:	e7f9      	b.n	800ac50 <memset+0x4>

0800ac5c <_localeconv_r>:
 800ac5c:	4800      	ldr	r0, [pc, #0]	@ (800ac60 <_localeconv_r+0x4>)
 800ac5e:	4770      	bx	lr
 800ac60:	20000254 	.word	0x20000254

0800ac64 <_close_r>:
 800ac64:	b538      	push	{r3, r4, r5, lr}
 800ac66:	2300      	movs	r3, #0
 800ac68:	4d05      	ldr	r5, [pc, #20]	@ (800ac80 <_close_r+0x1c>)
 800ac6a:	4604      	mov	r4, r0
 800ac6c:	4608      	mov	r0, r1
 800ac6e:	602b      	str	r3, [r5, #0]
 800ac70:	f7f7 fdb5 	bl	80027de <_close>
 800ac74:	1c43      	adds	r3, r0, #1
 800ac76:	d102      	bne.n	800ac7e <_close_r+0x1a>
 800ac78:	682b      	ldr	r3, [r5, #0]
 800ac7a:	b103      	cbz	r3, 800ac7e <_close_r+0x1a>
 800ac7c:	6023      	str	r3, [r4, #0]
 800ac7e:	bd38      	pop	{r3, r4, r5, pc}
 800ac80:	200006fc 	.word	0x200006fc

0800ac84 <_lseek_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	4604      	mov	r4, r0
 800ac88:	4608      	mov	r0, r1
 800ac8a:	4611      	mov	r1, r2
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	4d05      	ldr	r5, [pc, #20]	@ (800aca4 <_lseek_r+0x20>)
 800ac90:	602a      	str	r2, [r5, #0]
 800ac92:	461a      	mov	r2, r3
 800ac94:	f7f7 fdc7 	bl	8002826 <_lseek>
 800ac98:	1c43      	adds	r3, r0, #1
 800ac9a:	d102      	bne.n	800aca2 <_lseek_r+0x1e>
 800ac9c:	682b      	ldr	r3, [r5, #0]
 800ac9e:	b103      	cbz	r3, 800aca2 <_lseek_r+0x1e>
 800aca0:	6023      	str	r3, [r4, #0]
 800aca2:	bd38      	pop	{r3, r4, r5, pc}
 800aca4:	200006fc 	.word	0x200006fc

0800aca8 <_read_r>:
 800aca8:	b538      	push	{r3, r4, r5, lr}
 800acaa:	4604      	mov	r4, r0
 800acac:	4608      	mov	r0, r1
 800acae:	4611      	mov	r1, r2
 800acb0:	2200      	movs	r2, #0
 800acb2:	4d05      	ldr	r5, [pc, #20]	@ (800acc8 <_read_r+0x20>)
 800acb4:	602a      	str	r2, [r5, #0]
 800acb6:	461a      	mov	r2, r3
 800acb8:	f7f7 fd58 	bl	800276c <_read>
 800acbc:	1c43      	adds	r3, r0, #1
 800acbe:	d102      	bne.n	800acc6 <_read_r+0x1e>
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	b103      	cbz	r3, 800acc6 <_read_r+0x1e>
 800acc4:	6023      	str	r3, [r4, #0]
 800acc6:	bd38      	pop	{r3, r4, r5, pc}
 800acc8:	200006fc 	.word	0x200006fc

0800accc <_write_r>:
 800accc:	b538      	push	{r3, r4, r5, lr}
 800acce:	4604      	mov	r4, r0
 800acd0:	4608      	mov	r0, r1
 800acd2:	4611      	mov	r1, r2
 800acd4:	2200      	movs	r2, #0
 800acd6:	4d05      	ldr	r5, [pc, #20]	@ (800acec <_write_r+0x20>)
 800acd8:	602a      	str	r2, [r5, #0]
 800acda:	461a      	mov	r2, r3
 800acdc:	f7f7 fd63 	bl	80027a6 <_write>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	d102      	bne.n	800acea <_write_r+0x1e>
 800ace4:	682b      	ldr	r3, [r5, #0]
 800ace6:	b103      	cbz	r3, 800acea <_write_r+0x1e>
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	bd38      	pop	{r3, r4, r5, pc}
 800acec:	200006fc 	.word	0x200006fc

0800acf0 <__errno>:
 800acf0:	4b01      	ldr	r3, [pc, #4]	@ (800acf8 <__errno+0x8>)
 800acf2:	6818      	ldr	r0, [r3, #0]
 800acf4:	4770      	bx	lr
 800acf6:	bf00      	nop
 800acf8:	20000114 	.word	0x20000114

0800acfc <__libc_init_array>:
 800acfc:	b570      	push	{r4, r5, r6, lr}
 800acfe:	2600      	movs	r6, #0
 800ad00:	4d0c      	ldr	r5, [pc, #48]	@ (800ad34 <__libc_init_array+0x38>)
 800ad02:	4c0d      	ldr	r4, [pc, #52]	@ (800ad38 <__libc_init_array+0x3c>)
 800ad04:	1b64      	subs	r4, r4, r5
 800ad06:	10a4      	asrs	r4, r4, #2
 800ad08:	42a6      	cmp	r6, r4
 800ad0a:	d109      	bne.n	800ad20 <__libc_init_array+0x24>
 800ad0c:	f001 ffdc 	bl	800ccc8 <_init>
 800ad10:	2600      	movs	r6, #0
 800ad12:	4d0a      	ldr	r5, [pc, #40]	@ (800ad3c <__libc_init_array+0x40>)
 800ad14:	4c0a      	ldr	r4, [pc, #40]	@ (800ad40 <__libc_init_array+0x44>)
 800ad16:	1b64      	subs	r4, r4, r5
 800ad18:	10a4      	asrs	r4, r4, #2
 800ad1a:	42a6      	cmp	r6, r4
 800ad1c:	d105      	bne.n	800ad2a <__libc_init_array+0x2e>
 800ad1e:	bd70      	pop	{r4, r5, r6, pc}
 800ad20:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad24:	4798      	blx	r3
 800ad26:	3601      	adds	r6, #1
 800ad28:	e7ee      	b.n	800ad08 <__libc_init_array+0xc>
 800ad2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad2e:	4798      	blx	r3
 800ad30:	3601      	adds	r6, #1
 800ad32:	e7f2      	b.n	800ad1a <__libc_init_array+0x1e>
 800ad34:	0800d358 	.word	0x0800d358
 800ad38:	0800d358 	.word	0x0800d358
 800ad3c:	0800d358 	.word	0x0800d358
 800ad40:	0800d35c 	.word	0x0800d35c

0800ad44 <__retarget_lock_init_recursive>:
 800ad44:	4770      	bx	lr

0800ad46 <__retarget_lock_acquire_recursive>:
 800ad46:	4770      	bx	lr

0800ad48 <__retarget_lock_release_recursive>:
 800ad48:	4770      	bx	lr

0800ad4a <memchr>:
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	b510      	push	{r4, lr}
 800ad4e:	b2c9      	uxtb	r1, r1
 800ad50:	4402      	add	r2, r0
 800ad52:	4293      	cmp	r3, r2
 800ad54:	4618      	mov	r0, r3
 800ad56:	d101      	bne.n	800ad5c <memchr+0x12>
 800ad58:	2000      	movs	r0, #0
 800ad5a:	e003      	b.n	800ad64 <memchr+0x1a>
 800ad5c:	7804      	ldrb	r4, [r0, #0]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	428c      	cmp	r4, r1
 800ad62:	d1f6      	bne.n	800ad52 <memchr+0x8>
 800ad64:	bd10      	pop	{r4, pc}

0800ad66 <quorem>:
 800ad66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6a:	6903      	ldr	r3, [r0, #16]
 800ad6c:	690c      	ldr	r4, [r1, #16]
 800ad6e:	4607      	mov	r7, r0
 800ad70:	42a3      	cmp	r3, r4
 800ad72:	db7e      	blt.n	800ae72 <quorem+0x10c>
 800ad74:	3c01      	subs	r4, #1
 800ad76:	00a3      	lsls	r3, r4, #2
 800ad78:	f100 0514 	add.w	r5, r0, #20
 800ad7c:	f101 0814 	add.w	r8, r1, #20
 800ad80:	9300      	str	r3, [sp, #0]
 800ad82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad86:	9301      	str	r3, [sp, #4]
 800ad88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad90:	3301      	adds	r3, #1
 800ad92:	429a      	cmp	r2, r3
 800ad94:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad9c:	d32e      	bcc.n	800adfc <quorem+0x96>
 800ad9e:	f04f 0a00 	mov.w	sl, #0
 800ada2:	46c4      	mov	ip, r8
 800ada4:	46ae      	mov	lr, r5
 800ada6:	46d3      	mov	fp, sl
 800ada8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800adac:	b298      	uxth	r0, r3
 800adae:	fb06 a000 	mla	r0, r6, r0, sl
 800adb2:	0c1b      	lsrs	r3, r3, #16
 800adb4:	0c02      	lsrs	r2, r0, #16
 800adb6:	fb06 2303 	mla	r3, r6, r3, r2
 800adba:	f8de 2000 	ldr.w	r2, [lr]
 800adbe:	b280      	uxth	r0, r0
 800adc0:	b292      	uxth	r2, r2
 800adc2:	1a12      	subs	r2, r2, r0
 800adc4:	445a      	add	r2, fp
 800adc6:	f8de 0000 	ldr.w	r0, [lr]
 800adca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800adce:	b29b      	uxth	r3, r3
 800add0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800add4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800add8:	b292      	uxth	r2, r2
 800adda:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800adde:	45e1      	cmp	r9, ip
 800ade0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ade4:	f84e 2b04 	str.w	r2, [lr], #4
 800ade8:	d2de      	bcs.n	800ada8 <quorem+0x42>
 800adea:	9b00      	ldr	r3, [sp, #0]
 800adec:	58eb      	ldr	r3, [r5, r3]
 800adee:	b92b      	cbnz	r3, 800adfc <quorem+0x96>
 800adf0:	9b01      	ldr	r3, [sp, #4]
 800adf2:	3b04      	subs	r3, #4
 800adf4:	429d      	cmp	r5, r3
 800adf6:	461a      	mov	r2, r3
 800adf8:	d32f      	bcc.n	800ae5a <quorem+0xf4>
 800adfa:	613c      	str	r4, [r7, #16]
 800adfc:	4638      	mov	r0, r7
 800adfe:	f001 f979 	bl	800c0f4 <__mcmp>
 800ae02:	2800      	cmp	r0, #0
 800ae04:	db25      	blt.n	800ae52 <quorem+0xec>
 800ae06:	4629      	mov	r1, r5
 800ae08:	2000      	movs	r0, #0
 800ae0a:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae0e:	f8d1 c000 	ldr.w	ip, [r1]
 800ae12:	fa1f fe82 	uxth.w	lr, r2
 800ae16:	fa1f f38c 	uxth.w	r3, ip
 800ae1a:	eba3 030e 	sub.w	r3, r3, lr
 800ae1e:	4403      	add	r3, r0
 800ae20:	0c12      	lsrs	r2, r2, #16
 800ae22:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ae26:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae30:	45c1      	cmp	r9, r8
 800ae32:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ae36:	f841 3b04 	str.w	r3, [r1], #4
 800ae3a:	d2e6      	bcs.n	800ae0a <quorem+0xa4>
 800ae3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae44:	b922      	cbnz	r2, 800ae50 <quorem+0xea>
 800ae46:	3b04      	subs	r3, #4
 800ae48:	429d      	cmp	r5, r3
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	d30b      	bcc.n	800ae66 <quorem+0x100>
 800ae4e:	613c      	str	r4, [r7, #16]
 800ae50:	3601      	adds	r6, #1
 800ae52:	4630      	mov	r0, r6
 800ae54:	b003      	add	sp, #12
 800ae56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae5a:	6812      	ldr	r2, [r2, #0]
 800ae5c:	3b04      	subs	r3, #4
 800ae5e:	2a00      	cmp	r2, #0
 800ae60:	d1cb      	bne.n	800adfa <quorem+0x94>
 800ae62:	3c01      	subs	r4, #1
 800ae64:	e7c6      	b.n	800adf4 <quorem+0x8e>
 800ae66:	6812      	ldr	r2, [r2, #0]
 800ae68:	3b04      	subs	r3, #4
 800ae6a:	2a00      	cmp	r2, #0
 800ae6c:	d1ef      	bne.n	800ae4e <quorem+0xe8>
 800ae6e:	3c01      	subs	r4, #1
 800ae70:	e7ea      	b.n	800ae48 <quorem+0xe2>
 800ae72:	2000      	movs	r0, #0
 800ae74:	e7ee      	b.n	800ae54 <quorem+0xee>
	...

0800ae78 <_dtoa_r>:
 800ae78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae7c:	4614      	mov	r4, r2
 800ae7e:	461d      	mov	r5, r3
 800ae80:	69c7      	ldr	r7, [r0, #28]
 800ae82:	b097      	sub	sp, #92	@ 0x5c
 800ae84:	4683      	mov	fp, r0
 800ae86:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ae8a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800ae8c:	b97f      	cbnz	r7, 800aeae <_dtoa_r+0x36>
 800ae8e:	2010      	movs	r0, #16
 800ae90:	f000 fe02 	bl	800ba98 <malloc>
 800ae94:	4602      	mov	r2, r0
 800ae96:	f8cb 001c 	str.w	r0, [fp, #28]
 800ae9a:	b920      	cbnz	r0, 800aea6 <_dtoa_r+0x2e>
 800ae9c:	21ef      	movs	r1, #239	@ 0xef
 800ae9e:	4ba8      	ldr	r3, [pc, #672]	@ (800b140 <_dtoa_r+0x2c8>)
 800aea0:	48a8      	ldr	r0, [pc, #672]	@ (800b144 <_dtoa_r+0x2cc>)
 800aea2:	f001 fe2b 	bl	800cafc <__assert_func>
 800aea6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aeaa:	6007      	str	r7, [r0, #0]
 800aeac:	60c7      	str	r7, [r0, #12]
 800aeae:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aeb2:	6819      	ldr	r1, [r3, #0]
 800aeb4:	b159      	cbz	r1, 800aece <_dtoa_r+0x56>
 800aeb6:	685a      	ldr	r2, [r3, #4]
 800aeb8:	2301      	movs	r3, #1
 800aeba:	4093      	lsls	r3, r2
 800aebc:	604a      	str	r2, [r1, #4]
 800aebe:	608b      	str	r3, [r1, #8]
 800aec0:	4658      	mov	r0, fp
 800aec2:	f000 fedf 	bl	800bc84 <_Bfree>
 800aec6:	2200      	movs	r2, #0
 800aec8:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aecc:	601a      	str	r2, [r3, #0]
 800aece:	1e2b      	subs	r3, r5, #0
 800aed0:	bfaf      	iteee	ge
 800aed2:	2300      	movge	r3, #0
 800aed4:	2201      	movlt	r2, #1
 800aed6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aeda:	9303      	strlt	r3, [sp, #12]
 800aedc:	bfa8      	it	ge
 800aede:	6033      	strge	r3, [r6, #0]
 800aee0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800aee4:	4b98      	ldr	r3, [pc, #608]	@ (800b148 <_dtoa_r+0x2d0>)
 800aee6:	bfb8      	it	lt
 800aee8:	6032      	strlt	r2, [r6, #0]
 800aeea:	ea33 0308 	bics.w	r3, r3, r8
 800aeee:	d112      	bne.n	800af16 <_dtoa_r+0x9e>
 800aef0:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aef4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800aef6:	6013      	str	r3, [r2, #0]
 800aef8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800aefc:	4323      	orrs	r3, r4
 800aefe:	f000 8550 	beq.w	800b9a2 <_dtoa_r+0xb2a>
 800af02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800af04:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800b14c <_dtoa_r+0x2d4>
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f000 8552 	beq.w	800b9b2 <_dtoa_r+0xb3a>
 800af0e:	f10a 0303 	add.w	r3, sl, #3
 800af12:	f000 bd4c 	b.w	800b9ae <_dtoa_r+0xb36>
 800af16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af1a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800af1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af22:	2200      	movs	r2, #0
 800af24:	2300      	movs	r3, #0
 800af26:	f7f5 fd57 	bl	80009d8 <__aeabi_dcmpeq>
 800af2a:	4607      	mov	r7, r0
 800af2c:	b158      	cbz	r0, 800af46 <_dtoa_r+0xce>
 800af2e:	2301      	movs	r3, #1
 800af30:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800af32:	6013      	str	r3, [r2, #0]
 800af34:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800af36:	b113      	cbz	r3, 800af3e <_dtoa_r+0xc6>
 800af38:	4b85      	ldr	r3, [pc, #532]	@ (800b150 <_dtoa_r+0x2d8>)
 800af3a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800af3c:	6013      	str	r3, [r2, #0]
 800af3e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800b154 <_dtoa_r+0x2dc>
 800af42:	f000 bd36 	b.w	800b9b2 <_dtoa_r+0xb3a>
 800af46:	ab14      	add	r3, sp, #80	@ 0x50
 800af48:	9301      	str	r3, [sp, #4]
 800af4a:	ab15      	add	r3, sp, #84	@ 0x54
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	4658      	mov	r0, fp
 800af50:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800af54:	f001 f97e 	bl	800c254 <__d2b>
 800af58:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800af5c:	4681      	mov	r9, r0
 800af5e:	2e00      	cmp	r6, #0
 800af60:	d077      	beq.n	800b052 <_dtoa_r+0x1da>
 800af62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af68:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800af6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af70:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800af74:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800af78:	9712      	str	r7, [sp, #72]	@ 0x48
 800af7a:	4619      	mov	r1, r3
 800af7c:	2200      	movs	r2, #0
 800af7e:	4b76      	ldr	r3, [pc, #472]	@ (800b158 <_dtoa_r+0x2e0>)
 800af80:	f7f5 f90a 	bl	8000198 <__aeabi_dsub>
 800af84:	a368      	add	r3, pc, #416	@ (adr r3, 800b128 <_dtoa_r+0x2b0>)
 800af86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8a:	f7f5 fabd 	bl	8000508 <__aeabi_dmul>
 800af8e:	a368      	add	r3, pc, #416	@ (adr r3, 800b130 <_dtoa_r+0x2b8>)
 800af90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af94:	f7f5 f902 	bl	800019c <__adddf3>
 800af98:	4604      	mov	r4, r0
 800af9a:	4630      	mov	r0, r6
 800af9c:	460d      	mov	r5, r1
 800af9e:	f7f5 fa49 	bl	8000434 <__aeabi_i2d>
 800afa2:	a365      	add	r3, pc, #404	@ (adr r3, 800b138 <_dtoa_r+0x2c0>)
 800afa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa8:	f7f5 faae 	bl	8000508 <__aeabi_dmul>
 800afac:	4602      	mov	r2, r0
 800afae:	460b      	mov	r3, r1
 800afb0:	4620      	mov	r0, r4
 800afb2:	4629      	mov	r1, r5
 800afb4:	f7f5 f8f2 	bl	800019c <__adddf3>
 800afb8:	4604      	mov	r4, r0
 800afba:	460d      	mov	r5, r1
 800afbc:	f7f5 fd54 	bl	8000a68 <__aeabi_d2iz>
 800afc0:	2200      	movs	r2, #0
 800afc2:	4607      	mov	r7, r0
 800afc4:	2300      	movs	r3, #0
 800afc6:	4620      	mov	r0, r4
 800afc8:	4629      	mov	r1, r5
 800afca:	f7f5 fd0f 	bl	80009ec <__aeabi_dcmplt>
 800afce:	b140      	cbz	r0, 800afe2 <_dtoa_r+0x16a>
 800afd0:	4638      	mov	r0, r7
 800afd2:	f7f5 fa2f 	bl	8000434 <__aeabi_i2d>
 800afd6:	4622      	mov	r2, r4
 800afd8:	462b      	mov	r3, r5
 800afda:	f7f5 fcfd 	bl	80009d8 <__aeabi_dcmpeq>
 800afde:	b900      	cbnz	r0, 800afe2 <_dtoa_r+0x16a>
 800afe0:	3f01      	subs	r7, #1
 800afe2:	2f16      	cmp	r7, #22
 800afe4:	d853      	bhi.n	800b08e <_dtoa_r+0x216>
 800afe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800afea:	4b5c      	ldr	r3, [pc, #368]	@ (800b15c <_dtoa_r+0x2e4>)
 800afec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff4:	f7f5 fcfa 	bl	80009ec <__aeabi_dcmplt>
 800aff8:	2800      	cmp	r0, #0
 800affa:	d04a      	beq.n	800b092 <_dtoa_r+0x21a>
 800affc:	2300      	movs	r3, #0
 800affe:	3f01      	subs	r7, #1
 800b000:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b002:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b004:	1b9b      	subs	r3, r3, r6
 800b006:	1e5a      	subs	r2, r3, #1
 800b008:	bf46      	itte	mi
 800b00a:	f1c3 0801 	rsbmi	r8, r3, #1
 800b00e:	2300      	movmi	r3, #0
 800b010:	f04f 0800 	movpl.w	r8, #0
 800b014:	9209      	str	r2, [sp, #36]	@ 0x24
 800b016:	bf48      	it	mi
 800b018:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800b01a:	2f00      	cmp	r7, #0
 800b01c:	db3b      	blt.n	800b096 <_dtoa_r+0x21e>
 800b01e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b020:	970e      	str	r7, [sp, #56]	@ 0x38
 800b022:	443b      	add	r3, r7
 800b024:	9309      	str	r3, [sp, #36]	@ 0x24
 800b026:	2300      	movs	r3, #0
 800b028:	930a      	str	r3, [sp, #40]	@ 0x28
 800b02a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b02c:	2b09      	cmp	r3, #9
 800b02e:	d866      	bhi.n	800b0fe <_dtoa_r+0x286>
 800b030:	2b05      	cmp	r3, #5
 800b032:	bfc4      	itt	gt
 800b034:	3b04      	subgt	r3, #4
 800b036:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800b038:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b03a:	bfc8      	it	gt
 800b03c:	2400      	movgt	r4, #0
 800b03e:	f1a3 0302 	sub.w	r3, r3, #2
 800b042:	bfd8      	it	le
 800b044:	2401      	movle	r4, #1
 800b046:	2b03      	cmp	r3, #3
 800b048:	d864      	bhi.n	800b114 <_dtoa_r+0x29c>
 800b04a:	e8df f003 	tbb	[pc, r3]
 800b04e:	382b      	.short	0x382b
 800b050:	5636      	.short	0x5636
 800b052:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b056:	441e      	add	r6, r3
 800b058:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b05c:	2b20      	cmp	r3, #32
 800b05e:	bfc1      	itttt	gt
 800b060:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b064:	fa08 f803 	lslgt.w	r8, r8, r3
 800b068:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b06c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b070:	bfd6      	itet	le
 800b072:	f1c3 0320 	rsble	r3, r3, #32
 800b076:	ea48 0003 	orrgt.w	r0, r8, r3
 800b07a:	fa04 f003 	lslle.w	r0, r4, r3
 800b07e:	f7f5 f9c9 	bl	8000414 <__aeabi_ui2d>
 800b082:	2201      	movs	r2, #1
 800b084:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b088:	3e01      	subs	r6, #1
 800b08a:	9212      	str	r2, [sp, #72]	@ 0x48
 800b08c:	e775      	b.n	800af7a <_dtoa_r+0x102>
 800b08e:	2301      	movs	r3, #1
 800b090:	e7b6      	b.n	800b000 <_dtoa_r+0x188>
 800b092:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b094:	e7b5      	b.n	800b002 <_dtoa_r+0x18a>
 800b096:	427b      	negs	r3, r7
 800b098:	930a      	str	r3, [sp, #40]	@ 0x28
 800b09a:	2300      	movs	r3, #0
 800b09c:	eba8 0807 	sub.w	r8, r8, r7
 800b0a0:	930e      	str	r3, [sp, #56]	@ 0x38
 800b0a2:	e7c2      	b.n	800b02a <_dtoa_r+0x1b2>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	dc35      	bgt.n	800b11a <_dtoa_r+0x2a2>
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b0b6:	9221      	str	r2, [sp, #132]	@ 0x84
 800b0b8:	e00b      	b.n	800b0d2 <_dtoa_r+0x25a>
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	e7f3      	b.n	800b0a6 <_dtoa_r+0x22e>
 800b0be:	2300      	movs	r3, #0
 800b0c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b0c4:	18fb      	adds	r3, r7, r3
 800b0c6:	9308      	str	r3, [sp, #32]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	9307      	str	r3, [sp, #28]
 800b0ce:	bfb8      	it	lt
 800b0d0:	2301      	movlt	r3, #1
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	2204      	movs	r2, #4
 800b0d6:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b0da:	f102 0514 	add.w	r5, r2, #20
 800b0de:	429d      	cmp	r5, r3
 800b0e0:	d91f      	bls.n	800b122 <_dtoa_r+0x2aa>
 800b0e2:	6041      	str	r1, [r0, #4]
 800b0e4:	4658      	mov	r0, fp
 800b0e6:	f000 fd8d 	bl	800bc04 <_Balloc>
 800b0ea:	4682      	mov	sl, r0
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	d139      	bne.n	800b164 <_dtoa_r+0x2ec>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	f240 11af 	movw	r1, #431	@ 0x1af
 800b0f6:	4b1a      	ldr	r3, [pc, #104]	@ (800b160 <_dtoa_r+0x2e8>)
 800b0f8:	e6d2      	b.n	800aea0 <_dtoa_r+0x28>
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e7e0      	b.n	800b0c0 <_dtoa_r+0x248>
 800b0fe:	2401      	movs	r4, #1
 800b100:	2300      	movs	r3, #0
 800b102:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b104:	9320      	str	r3, [sp, #128]	@ 0x80
 800b106:	f04f 33ff 	mov.w	r3, #4294967295
 800b10a:	2200      	movs	r2, #0
 800b10c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b110:	2312      	movs	r3, #18
 800b112:	e7d0      	b.n	800b0b6 <_dtoa_r+0x23e>
 800b114:	2301      	movs	r3, #1
 800b116:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b118:	e7f5      	b.n	800b106 <_dtoa_r+0x28e>
 800b11a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b11c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b120:	e7d7      	b.n	800b0d2 <_dtoa_r+0x25a>
 800b122:	3101      	adds	r1, #1
 800b124:	0052      	lsls	r2, r2, #1
 800b126:	e7d8      	b.n	800b0da <_dtoa_r+0x262>
 800b128:	636f4361 	.word	0x636f4361
 800b12c:	3fd287a7 	.word	0x3fd287a7
 800b130:	8b60c8b3 	.word	0x8b60c8b3
 800b134:	3fc68a28 	.word	0x3fc68a28
 800b138:	509f79fb 	.word	0x509f79fb
 800b13c:	3fd34413 	.word	0x3fd34413
 800b140:	0800d023 	.word	0x0800d023
 800b144:	0800d03a 	.word	0x0800d03a
 800b148:	7ff00000 	.word	0x7ff00000
 800b14c:	0800d01f 	.word	0x0800d01f
 800b150:	0800cff3 	.word	0x0800cff3
 800b154:	0800cff2 	.word	0x0800cff2
 800b158:	3ff80000 	.word	0x3ff80000
 800b15c:	0800d130 	.word	0x0800d130
 800b160:	0800d092 	.word	0x0800d092
 800b164:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b168:	6018      	str	r0, [r3, #0]
 800b16a:	9b07      	ldr	r3, [sp, #28]
 800b16c:	2b0e      	cmp	r3, #14
 800b16e:	f200 80a4 	bhi.w	800b2ba <_dtoa_r+0x442>
 800b172:	2c00      	cmp	r4, #0
 800b174:	f000 80a1 	beq.w	800b2ba <_dtoa_r+0x442>
 800b178:	2f00      	cmp	r7, #0
 800b17a:	dd33      	ble.n	800b1e4 <_dtoa_r+0x36c>
 800b17c:	4b86      	ldr	r3, [pc, #536]	@ (800b398 <_dtoa_r+0x520>)
 800b17e:	f007 020f 	and.w	r2, r7, #15
 800b182:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b186:	05f8      	lsls	r0, r7, #23
 800b188:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b18c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b190:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b194:	d516      	bpl.n	800b1c4 <_dtoa_r+0x34c>
 800b196:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b19a:	4b80      	ldr	r3, [pc, #512]	@ (800b39c <_dtoa_r+0x524>)
 800b19c:	2603      	movs	r6, #3
 800b19e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b1a2:	f7f5 fadb 	bl	800075c <__aeabi_ddiv>
 800b1a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1aa:	f004 040f 	and.w	r4, r4, #15
 800b1ae:	4d7b      	ldr	r5, [pc, #492]	@ (800b39c <_dtoa_r+0x524>)
 800b1b0:	b954      	cbnz	r4, 800b1c8 <_dtoa_r+0x350>
 800b1b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1ba:	f7f5 facf 	bl	800075c <__aeabi_ddiv>
 800b1be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1c2:	e028      	b.n	800b216 <_dtoa_r+0x39e>
 800b1c4:	2602      	movs	r6, #2
 800b1c6:	e7f2      	b.n	800b1ae <_dtoa_r+0x336>
 800b1c8:	07e1      	lsls	r1, r4, #31
 800b1ca:	d508      	bpl.n	800b1de <_dtoa_r+0x366>
 800b1cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b1d4:	f7f5 f998 	bl	8000508 <__aeabi_dmul>
 800b1d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1dc:	3601      	adds	r6, #1
 800b1de:	1064      	asrs	r4, r4, #1
 800b1e0:	3508      	adds	r5, #8
 800b1e2:	e7e5      	b.n	800b1b0 <_dtoa_r+0x338>
 800b1e4:	f000 80d2 	beq.w	800b38c <_dtoa_r+0x514>
 800b1e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1ec:	427c      	negs	r4, r7
 800b1ee:	4b6a      	ldr	r3, [pc, #424]	@ (800b398 <_dtoa_r+0x520>)
 800b1f0:	f004 020f 	and.w	r2, r4, #15
 800b1f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fc:	f7f5 f984 	bl	8000508 <__aeabi_dmul>
 800b200:	2602      	movs	r6, #2
 800b202:	2300      	movs	r3, #0
 800b204:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b208:	4d64      	ldr	r5, [pc, #400]	@ (800b39c <_dtoa_r+0x524>)
 800b20a:	1124      	asrs	r4, r4, #4
 800b20c:	2c00      	cmp	r4, #0
 800b20e:	f040 80b2 	bne.w	800b376 <_dtoa_r+0x4fe>
 800b212:	2b00      	cmp	r3, #0
 800b214:	d1d3      	bne.n	800b1be <_dtoa_r+0x346>
 800b216:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b21a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f000 80b7 	beq.w	800b390 <_dtoa_r+0x518>
 800b222:	2200      	movs	r2, #0
 800b224:	4620      	mov	r0, r4
 800b226:	4629      	mov	r1, r5
 800b228:	4b5d      	ldr	r3, [pc, #372]	@ (800b3a0 <_dtoa_r+0x528>)
 800b22a:	f7f5 fbdf 	bl	80009ec <__aeabi_dcmplt>
 800b22e:	2800      	cmp	r0, #0
 800b230:	f000 80ae 	beq.w	800b390 <_dtoa_r+0x518>
 800b234:	9b07      	ldr	r3, [sp, #28]
 800b236:	2b00      	cmp	r3, #0
 800b238:	f000 80aa 	beq.w	800b390 <_dtoa_r+0x518>
 800b23c:	9b08      	ldr	r3, [sp, #32]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	dd37      	ble.n	800b2b2 <_dtoa_r+0x43a>
 800b242:	1e7b      	subs	r3, r7, #1
 800b244:	4620      	mov	r0, r4
 800b246:	9304      	str	r3, [sp, #16]
 800b248:	2200      	movs	r2, #0
 800b24a:	4629      	mov	r1, r5
 800b24c:	4b55      	ldr	r3, [pc, #340]	@ (800b3a4 <_dtoa_r+0x52c>)
 800b24e:	f7f5 f95b 	bl	8000508 <__aeabi_dmul>
 800b252:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b256:	9c08      	ldr	r4, [sp, #32]
 800b258:	3601      	adds	r6, #1
 800b25a:	4630      	mov	r0, r6
 800b25c:	f7f5 f8ea 	bl	8000434 <__aeabi_i2d>
 800b260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b264:	f7f5 f950 	bl	8000508 <__aeabi_dmul>
 800b268:	2200      	movs	r2, #0
 800b26a:	4b4f      	ldr	r3, [pc, #316]	@ (800b3a8 <_dtoa_r+0x530>)
 800b26c:	f7f4 ff96 	bl	800019c <__adddf3>
 800b270:	4605      	mov	r5, r0
 800b272:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b276:	2c00      	cmp	r4, #0
 800b278:	f040 809a 	bne.w	800b3b0 <_dtoa_r+0x538>
 800b27c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b280:	2200      	movs	r2, #0
 800b282:	4b4a      	ldr	r3, [pc, #296]	@ (800b3ac <_dtoa_r+0x534>)
 800b284:	f7f4 ff88 	bl	8000198 <__aeabi_dsub>
 800b288:	4602      	mov	r2, r0
 800b28a:	460b      	mov	r3, r1
 800b28c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b290:	462a      	mov	r2, r5
 800b292:	4633      	mov	r3, r6
 800b294:	f7f5 fbc8 	bl	8000a28 <__aeabi_dcmpgt>
 800b298:	2800      	cmp	r0, #0
 800b29a:	f040 828e 	bne.w	800b7ba <_dtoa_r+0x942>
 800b29e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2a2:	462a      	mov	r2, r5
 800b2a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b2a8:	f7f5 fba0 	bl	80009ec <__aeabi_dcmplt>
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	f040 8127 	bne.w	800b500 <_dtoa_r+0x688>
 800b2b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b2b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b2ba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	f2c0 8163 	blt.w	800b588 <_dtoa_r+0x710>
 800b2c2:	2f0e      	cmp	r7, #14
 800b2c4:	f300 8160 	bgt.w	800b588 <_dtoa_r+0x710>
 800b2c8:	4b33      	ldr	r3, [pc, #204]	@ (800b398 <_dtoa_r+0x520>)
 800b2ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b2ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b2d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b2d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	da03      	bge.n	800b2e4 <_dtoa_r+0x46c>
 800b2dc:	9b07      	ldr	r3, [sp, #28]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	f340 8100 	ble.w	800b4e4 <_dtoa_r+0x66c>
 800b2e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b2e8:	4656      	mov	r6, sl
 800b2ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	4629      	mov	r1, r5
 800b2f2:	f7f5 fa33 	bl	800075c <__aeabi_ddiv>
 800b2f6:	f7f5 fbb7 	bl	8000a68 <__aeabi_d2iz>
 800b2fa:	4680      	mov	r8, r0
 800b2fc:	f7f5 f89a 	bl	8000434 <__aeabi_i2d>
 800b300:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b304:	f7f5 f900 	bl	8000508 <__aeabi_dmul>
 800b308:	4602      	mov	r2, r0
 800b30a:	460b      	mov	r3, r1
 800b30c:	4620      	mov	r0, r4
 800b30e:	4629      	mov	r1, r5
 800b310:	f7f4 ff42 	bl	8000198 <__aeabi_dsub>
 800b314:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b318:	9d07      	ldr	r5, [sp, #28]
 800b31a:	f806 4b01 	strb.w	r4, [r6], #1
 800b31e:	eba6 040a 	sub.w	r4, r6, sl
 800b322:	42a5      	cmp	r5, r4
 800b324:	4602      	mov	r2, r0
 800b326:	460b      	mov	r3, r1
 800b328:	f040 8116 	bne.w	800b558 <_dtoa_r+0x6e0>
 800b32c:	f7f4 ff36 	bl	800019c <__adddf3>
 800b330:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b334:	4604      	mov	r4, r0
 800b336:	460d      	mov	r5, r1
 800b338:	f7f5 fb76 	bl	8000a28 <__aeabi_dcmpgt>
 800b33c:	2800      	cmp	r0, #0
 800b33e:	f040 80f8 	bne.w	800b532 <_dtoa_r+0x6ba>
 800b342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b346:	4620      	mov	r0, r4
 800b348:	4629      	mov	r1, r5
 800b34a:	f7f5 fb45 	bl	80009d8 <__aeabi_dcmpeq>
 800b34e:	b118      	cbz	r0, 800b358 <_dtoa_r+0x4e0>
 800b350:	f018 0f01 	tst.w	r8, #1
 800b354:	f040 80ed 	bne.w	800b532 <_dtoa_r+0x6ba>
 800b358:	4649      	mov	r1, r9
 800b35a:	4658      	mov	r0, fp
 800b35c:	f000 fc92 	bl	800bc84 <_Bfree>
 800b360:	2300      	movs	r3, #0
 800b362:	7033      	strb	r3, [r6, #0]
 800b364:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b366:	3701      	adds	r7, #1
 800b368:	601f      	str	r7, [r3, #0]
 800b36a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f000 8320 	beq.w	800b9b2 <_dtoa_r+0xb3a>
 800b372:	601e      	str	r6, [r3, #0]
 800b374:	e31d      	b.n	800b9b2 <_dtoa_r+0xb3a>
 800b376:	07e2      	lsls	r2, r4, #31
 800b378:	d505      	bpl.n	800b386 <_dtoa_r+0x50e>
 800b37a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b37e:	f7f5 f8c3 	bl	8000508 <__aeabi_dmul>
 800b382:	2301      	movs	r3, #1
 800b384:	3601      	adds	r6, #1
 800b386:	1064      	asrs	r4, r4, #1
 800b388:	3508      	adds	r5, #8
 800b38a:	e73f      	b.n	800b20c <_dtoa_r+0x394>
 800b38c:	2602      	movs	r6, #2
 800b38e:	e742      	b.n	800b216 <_dtoa_r+0x39e>
 800b390:	9c07      	ldr	r4, [sp, #28]
 800b392:	9704      	str	r7, [sp, #16]
 800b394:	e761      	b.n	800b25a <_dtoa_r+0x3e2>
 800b396:	bf00      	nop
 800b398:	0800d130 	.word	0x0800d130
 800b39c:	0800d108 	.word	0x0800d108
 800b3a0:	3ff00000 	.word	0x3ff00000
 800b3a4:	40240000 	.word	0x40240000
 800b3a8:	401c0000 	.word	0x401c0000
 800b3ac:	40140000 	.word	0x40140000
 800b3b0:	4b70      	ldr	r3, [pc, #448]	@ (800b574 <_dtoa_r+0x6fc>)
 800b3b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b3b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b3b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b3bc:	4454      	add	r4, sl
 800b3be:	2900      	cmp	r1, #0
 800b3c0:	d045      	beq.n	800b44e <_dtoa_r+0x5d6>
 800b3c2:	2000      	movs	r0, #0
 800b3c4:	496c      	ldr	r1, [pc, #432]	@ (800b578 <_dtoa_r+0x700>)
 800b3c6:	f7f5 f9c9 	bl	800075c <__aeabi_ddiv>
 800b3ca:	4633      	mov	r3, r6
 800b3cc:	462a      	mov	r2, r5
 800b3ce:	f7f4 fee3 	bl	8000198 <__aeabi_dsub>
 800b3d2:	4656      	mov	r6, sl
 800b3d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b3d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3dc:	f7f5 fb44 	bl	8000a68 <__aeabi_d2iz>
 800b3e0:	4605      	mov	r5, r0
 800b3e2:	f7f5 f827 	bl	8000434 <__aeabi_i2d>
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3ee:	f7f4 fed3 	bl	8000198 <__aeabi_dsub>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	3530      	adds	r5, #48	@ 0x30
 800b3f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b400:	f806 5b01 	strb.w	r5, [r6], #1
 800b404:	f7f5 faf2 	bl	80009ec <__aeabi_dcmplt>
 800b408:	2800      	cmp	r0, #0
 800b40a:	d163      	bne.n	800b4d4 <_dtoa_r+0x65c>
 800b40c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b410:	2000      	movs	r0, #0
 800b412:	495a      	ldr	r1, [pc, #360]	@ (800b57c <_dtoa_r+0x704>)
 800b414:	f7f4 fec0 	bl	8000198 <__aeabi_dsub>
 800b418:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b41c:	f7f5 fae6 	bl	80009ec <__aeabi_dcmplt>
 800b420:	2800      	cmp	r0, #0
 800b422:	f040 8087 	bne.w	800b534 <_dtoa_r+0x6bc>
 800b426:	42a6      	cmp	r6, r4
 800b428:	f43f af43 	beq.w	800b2b2 <_dtoa_r+0x43a>
 800b42c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b430:	2200      	movs	r2, #0
 800b432:	4b53      	ldr	r3, [pc, #332]	@ (800b580 <_dtoa_r+0x708>)
 800b434:	f7f5 f868 	bl	8000508 <__aeabi_dmul>
 800b438:	2200      	movs	r2, #0
 800b43a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b43e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b442:	4b4f      	ldr	r3, [pc, #316]	@ (800b580 <_dtoa_r+0x708>)
 800b444:	f7f5 f860 	bl	8000508 <__aeabi_dmul>
 800b448:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b44c:	e7c4      	b.n	800b3d8 <_dtoa_r+0x560>
 800b44e:	4631      	mov	r1, r6
 800b450:	4628      	mov	r0, r5
 800b452:	f7f5 f859 	bl	8000508 <__aeabi_dmul>
 800b456:	4656      	mov	r6, sl
 800b458:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b45c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b45e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b462:	f7f5 fb01 	bl	8000a68 <__aeabi_d2iz>
 800b466:	4605      	mov	r5, r0
 800b468:	f7f4 ffe4 	bl	8000434 <__aeabi_i2d>
 800b46c:	4602      	mov	r2, r0
 800b46e:	460b      	mov	r3, r1
 800b470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b474:	f7f4 fe90 	bl	8000198 <__aeabi_dsub>
 800b478:	4602      	mov	r2, r0
 800b47a:	460b      	mov	r3, r1
 800b47c:	3530      	adds	r5, #48	@ 0x30
 800b47e:	f806 5b01 	strb.w	r5, [r6], #1
 800b482:	42a6      	cmp	r6, r4
 800b484:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b488:	f04f 0200 	mov.w	r2, #0
 800b48c:	d124      	bne.n	800b4d8 <_dtoa_r+0x660>
 800b48e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b492:	4b39      	ldr	r3, [pc, #228]	@ (800b578 <_dtoa_r+0x700>)
 800b494:	f7f4 fe82 	bl	800019c <__adddf3>
 800b498:	4602      	mov	r2, r0
 800b49a:	460b      	mov	r3, r1
 800b49c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4a0:	f7f5 fac2 	bl	8000a28 <__aeabi_dcmpgt>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d145      	bne.n	800b534 <_dtoa_r+0x6bc>
 800b4a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b4ac:	2000      	movs	r0, #0
 800b4ae:	4932      	ldr	r1, [pc, #200]	@ (800b578 <_dtoa_r+0x700>)
 800b4b0:	f7f4 fe72 	bl	8000198 <__aeabi_dsub>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4bc:	f7f5 fa96 	bl	80009ec <__aeabi_dcmplt>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	f43f aef6 	beq.w	800b2b2 <_dtoa_r+0x43a>
 800b4c6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b4c8:	1e73      	subs	r3, r6, #1
 800b4ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b4cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b4d0:	2b30      	cmp	r3, #48	@ 0x30
 800b4d2:	d0f8      	beq.n	800b4c6 <_dtoa_r+0x64e>
 800b4d4:	9f04      	ldr	r7, [sp, #16]
 800b4d6:	e73f      	b.n	800b358 <_dtoa_r+0x4e0>
 800b4d8:	4b29      	ldr	r3, [pc, #164]	@ (800b580 <_dtoa_r+0x708>)
 800b4da:	f7f5 f815 	bl	8000508 <__aeabi_dmul>
 800b4de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4e2:	e7bc      	b.n	800b45e <_dtoa_r+0x5e6>
 800b4e4:	d10c      	bne.n	800b500 <_dtoa_r+0x688>
 800b4e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	4b25      	ldr	r3, [pc, #148]	@ (800b584 <_dtoa_r+0x70c>)
 800b4ee:	f7f5 f80b 	bl	8000508 <__aeabi_dmul>
 800b4f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4f6:	f7f5 fa8d 	bl	8000a14 <__aeabi_dcmpge>
 800b4fa:	2800      	cmp	r0, #0
 800b4fc:	f000 815b 	beq.w	800b7b6 <_dtoa_r+0x93e>
 800b500:	2400      	movs	r4, #0
 800b502:	4625      	mov	r5, r4
 800b504:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b506:	4656      	mov	r6, sl
 800b508:	43db      	mvns	r3, r3
 800b50a:	9304      	str	r3, [sp, #16]
 800b50c:	2700      	movs	r7, #0
 800b50e:	4621      	mov	r1, r4
 800b510:	4658      	mov	r0, fp
 800b512:	f000 fbb7 	bl	800bc84 <_Bfree>
 800b516:	2d00      	cmp	r5, #0
 800b518:	d0dc      	beq.n	800b4d4 <_dtoa_r+0x65c>
 800b51a:	b12f      	cbz	r7, 800b528 <_dtoa_r+0x6b0>
 800b51c:	42af      	cmp	r7, r5
 800b51e:	d003      	beq.n	800b528 <_dtoa_r+0x6b0>
 800b520:	4639      	mov	r1, r7
 800b522:	4658      	mov	r0, fp
 800b524:	f000 fbae 	bl	800bc84 <_Bfree>
 800b528:	4629      	mov	r1, r5
 800b52a:	4658      	mov	r0, fp
 800b52c:	f000 fbaa 	bl	800bc84 <_Bfree>
 800b530:	e7d0      	b.n	800b4d4 <_dtoa_r+0x65c>
 800b532:	9704      	str	r7, [sp, #16]
 800b534:	4633      	mov	r3, r6
 800b536:	461e      	mov	r6, r3
 800b538:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b53c:	2a39      	cmp	r2, #57	@ 0x39
 800b53e:	d107      	bne.n	800b550 <_dtoa_r+0x6d8>
 800b540:	459a      	cmp	sl, r3
 800b542:	d1f8      	bne.n	800b536 <_dtoa_r+0x6be>
 800b544:	9a04      	ldr	r2, [sp, #16]
 800b546:	3201      	adds	r2, #1
 800b548:	9204      	str	r2, [sp, #16]
 800b54a:	2230      	movs	r2, #48	@ 0x30
 800b54c:	f88a 2000 	strb.w	r2, [sl]
 800b550:	781a      	ldrb	r2, [r3, #0]
 800b552:	3201      	adds	r2, #1
 800b554:	701a      	strb	r2, [r3, #0]
 800b556:	e7bd      	b.n	800b4d4 <_dtoa_r+0x65c>
 800b558:	2200      	movs	r2, #0
 800b55a:	4b09      	ldr	r3, [pc, #36]	@ (800b580 <_dtoa_r+0x708>)
 800b55c:	f7f4 ffd4 	bl	8000508 <__aeabi_dmul>
 800b560:	2200      	movs	r2, #0
 800b562:	2300      	movs	r3, #0
 800b564:	4604      	mov	r4, r0
 800b566:	460d      	mov	r5, r1
 800b568:	f7f5 fa36 	bl	80009d8 <__aeabi_dcmpeq>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	f43f aebc 	beq.w	800b2ea <_dtoa_r+0x472>
 800b572:	e6f1      	b.n	800b358 <_dtoa_r+0x4e0>
 800b574:	0800d130 	.word	0x0800d130
 800b578:	3fe00000 	.word	0x3fe00000
 800b57c:	3ff00000 	.word	0x3ff00000
 800b580:	40240000 	.word	0x40240000
 800b584:	40140000 	.word	0x40140000
 800b588:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b58a:	2a00      	cmp	r2, #0
 800b58c:	f000 80db 	beq.w	800b746 <_dtoa_r+0x8ce>
 800b590:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b592:	2a01      	cmp	r2, #1
 800b594:	f300 80bf 	bgt.w	800b716 <_dtoa_r+0x89e>
 800b598:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b59a:	2a00      	cmp	r2, #0
 800b59c:	f000 80b7 	beq.w	800b70e <_dtoa_r+0x896>
 800b5a0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b5a4:	4646      	mov	r6, r8
 800b5a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b5a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5aa:	2101      	movs	r1, #1
 800b5ac:	441a      	add	r2, r3
 800b5ae:	4658      	mov	r0, fp
 800b5b0:	4498      	add	r8, r3
 800b5b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5b4:	f000 fc1a 	bl	800bdec <__i2b>
 800b5b8:	4605      	mov	r5, r0
 800b5ba:	b15e      	cbz	r6, 800b5d4 <_dtoa_r+0x75c>
 800b5bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	dd08      	ble.n	800b5d4 <_dtoa_r+0x75c>
 800b5c2:	42b3      	cmp	r3, r6
 800b5c4:	bfa8      	it	ge
 800b5c6:	4633      	movge	r3, r6
 800b5c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5ca:	eba8 0803 	sub.w	r8, r8, r3
 800b5ce:	1af6      	subs	r6, r6, r3
 800b5d0:	1ad3      	subs	r3, r2, r3
 800b5d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5d6:	b1f3      	cbz	r3, 800b616 <_dtoa_r+0x79e>
 800b5d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f000 80b7 	beq.w	800b74e <_dtoa_r+0x8d6>
 800b5e0:	b18c      	cbz	r4, 800b606 <_dtoa_r+0x78e>
 800b5e2:	4629      	mov	r1, r5
 800b5e4:	4622      	mov	r2, r4
 800b5e6:	4658      	mov	r0, fp
 800b5e8:	f000 fcbe 	bl	800bf68 <__pow5mult>
 800b5ec:	464a      	mov	r2, r9
 800b5ee:	4601      	mov	r1, r0
 800b5f0:	4605      	mov	r5, r0
 800b5f2:	4658      	mov	r0, fp
 800b5f4:	f000 fc10 	bl	800be18 <__multiply>
 800b5f8:	4649      	mov	r1, r9
 800b5fa:	9004      	str	r0, [sp, #16]
 800b5fc:	4658      	mov	r0, fp
 800b5fe:	f000 fb41 	bl	800bc84 <_Bfree>
 800b602:	9b04      	ldr	r3, [sp, #16]
 800b604:	4699      	mov	r9, r3
 800b606:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b608:	1b1a      	subs	r2, r3, r4
 800b60a:	d004      	beq.n	800b616 <_dtoa_r+0x79e>
 800b60c:	4649      	mov	r1, r9
 800b60e:	4658      	mov	r0, fp
 800b610:	f000 fcaa 	bl	800bf68 <__pow5mult>
 800b614:	4681      	mov	r9, r0
 800b616:	2101      	movs	r1, #1
 800b618:	4658      	mov	r0, fp
 800b61a:	f000 fbe7 	bl	800bdec <__i2b>
 800b61e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b620:	4604      	mov	r4, r0
 800b622:	2b00      	cmp	r3, #0
 800b624:	f000 81c9 	beq.w	800b9ba <_dtoa_r+0xb42>
 800b628:	461a      	mov	r2, r3
 800b62a:	4601      	mov	r1, r0
 800b62c:	4658      	mov	r0, fp
 800b62e:	f000 fc9b 	bl	800bf68 <__pow5mult>
 800b632:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b634:	4604      	mov	r4, r0
 800b636:	2b01      	cmp	r3, #1
 800b638:	f300 808f 	bgt.w	800b75a <_dtoa_r+0x8e2>
 800b63c:	9b02      	ldr	r3, [sp, #8]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f040 8087 	bne.w	800b752 <_dtoa_r+0x8da>
 800b644:	9b03      	ldr	r3, [sp, #12]
 800b646:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	f040 8083 	bne.w	800b756 <_dtoa_r+0x8de>
 800b650:	9b03      	ldr	r3, [sp, #12]
 800b652:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b656:	0d1b      	lsrs	r3, r3, #20
 800b658:	051b      	lsls	r3, r3, #20
 800b65a:	b12b      	cbz	r3, 800b668 <_dtoa_r+0x7f0>
 800b65c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b65e:	f108 0801 	add.w	r8, r8, #1
 800b662:	3301      	adds	r3, #1
 800b664:	9309      	str	r3, [sp, #36]	@ 0x24
 800b666:	2301      	movs	r3, #1
 800b668:	930a      	str	r3, [sp, #40]	@ 0x28
 800b66a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f000 81aa 	beq.w	800b9c6 <_dtoa_r+0xb4e>
 800b672:	6923      	ldr	r3, [r4, #16]
 800b674:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b678:	6918      	ldr	r0, [r3, #16]
 800b67a:	f000 fb6b 	bl	800bd54 <__hi0bits>
 800b67e:	f1c0 0020 	rsb	r0, r0, #32
 800b682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b684:	4418      	add	r0, r3
 800b686:	f010 001f 	ands.w	r0, r0, #31
 800b68a:	d071      	beq.n	800b770 <_dtoa_r+0x8f8>
 800b68c:	f1c0 0320 	rsb	r3, r0, #32
 800b690:	2b04      	cmp	r3, #4
 800b692:	dd65      	ble.n	800b760 <_dtoa_r+0x8e8>
 800b694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b696:	f1c0 001c 	rsb	r0, r0, #28
 800b69a:	4403      	add	r3, r0
 800b69c:	4480      	add	r8, r0
 800b69e:	4406      	add	r6, r0
 800b6a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6a2:	f1b8 0f00 	cmp.w	r8, #0
 800b6a6:	dd05      	ble.n	800b6b4 <_dtoa_r+0x83c>
 800b6a8:	4649      	mov	r1, r9
 800b6aa:	4642      	mov	r2, r8
 800b6ac:	4658      	mov	r0, fp
 800b6ae:	f000 fcb5 	bl	800c01c <__lshift>
 800b6b2:	4681      	mov	r9, r0
 800b6b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	dd05      	ble.n	800b6c6 <_dtoa_r+0x84e>
 800b6ba:	4621      	mov	r1, r4
 800b6bc:	461a      	mov	r2, r3
 800b6be:	4658      	mov	r0, fp
 800b6c0:	f000 fcac 	bl	800c01c <__lshift>
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d053      	beq.n	800b774 <_dtoa_r+0x8fc>
 800b6cc:	4621      	mov	r1, r4
 800b6ce:	4648      	mov	r0, r9
 800b6d0:	f000 fd10 	bl	800c0f4 <__mcmp>
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	da4d      	bge.n	800b774 <_dtoa_r+0x8fc>
 800b6d8:	1e7b      	subs	r3, r7, #1
 800b6da:	4649      	mov	r1, r9
 800b6dc:	9304      	str	r3, [sp, #16]
 800b6de:	220a      	movs	r2, #10
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	4658      	mov	r0, fp
 800b6e4:	f000 faf0 	bl	800bcc8 <__multadd>
 800b6e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6ea:	4681      	mov	r9, r0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	f000 816c 	beq.w	800b9ca <_dtoa_r+0xb52>
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	220a      	movs	r2, #10
 800b6f8:	4658      	mov	r0, fp
 800b6fa:	f000 fae5 	bl	800bcc8 <__multadd>
 800b6fe:	9b08      	ldr	r3, [sp, #32]
 800b700:	4605      	mov	r5, r0
 800b702:	2b00      	cmp	r3, #0
 800b704:	dc61      	bgt.n	800b7ca <_dtoa_r+0x952>
 800b706:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b708:	2b02      	cmp	r3, #2
 800b70a:	dc3b      	bgt.n	800b784 <_dtoa_r+0x90c>
 800b70c:	e05d      	b.n	800b7ca <_dtoa_r+0x952>
 800b70e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b710:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b714:	e746      	b.n	800b5a4 <_dtoa_r+0x72c>
 800b716:	9b07      	ldr	r3, [sp, #28]
 800b718:	1e5c      	subs	r4, r3, #1
 800b71a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b71c:	42a3      	cmp	r3, r4
 800b71e:	bfbf      	itttt	lt
 800b720:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b722:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800b724:	1ae3      	sublt	r3, r4, r3
 800b726:	18d2      	addlt	r2, r2, r3
 800b728:	bfa8      	it	ge
 800b72a:	1b1c      	subge	r4, r3, r4
 800b72c:	9b07      	ldr	r3, [sp, #28]
 800b72e:	bfbe      	ittt	lt
 800b730:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b732:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800b734:	2400      	movlt	r4, #0
 800b736:	2b00      	cmp	r3, #0
 800b738:	bfb5      	itete	lt
 800b73a:	eba8 0603 	sublt.w	r6, r8, r3
 800b73e:	4646      	movge	r6, r8
 800b740:	2300      	movlt	r3, #0
 800b742:	9b07      	ldrge	r3, [sp, #28]
 800b744:	e730      	b.n	800b5a8 <_dtoa_r+0x730>
 800b746:	4646      	mov	r6, r8
 800b748:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b74a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b74c:	e735      	b.n	800b5ba <_dtoa_r+0x742>
 800b74e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b750:	e75c      	b.n	800b60c <_dtoa_r+0x794>
 800b752:	2300      	movs	r3, #0
 800b754:	e788      	b.n	800b668 <_dtoa_r+0x7f0>
 800b756:	9b02      	ldr	r3, [sp, #8]
 800b758:	e786      	b.n	800b668 <_dtoa_r+0x7f0>
 800b75a:	2300      	movs	r3, #0
 800b75c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b75e:	e788      	b.n	800b672 <_dtoa_r+0x7fa>
 800b760:	d09f      	beq.n	800b6a2 <_dtoa_r+0x82a>
 800b762:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b764:	331c      	adds	r3, #28
 800b766:	441a      	add	r2, r3
 800b768:	4498      	add	r8, r3
 800b76a:	441e      	add	r6, r3
 800b76c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b76e:	e798      	b.n	800b6a2 <_dtoa_r+0x82a>
 800b770:	4603      	mov	r3, r0
 800b772:	e7f6      	b.n	800b762 <_dtoa_r+0x8ea>
 800b774:	9b07      	ldr	r3, [sp, #28]
 800b776:	9704      	str	r7, [sp, #16]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	dc20      	bgt.n	800b7be <_dtoa_r+0x946>
 800b77c:	9308      	str	r3, [sp, #32]
 800b77e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b780:	2b02      	cmp	r3, #2
 800b782:	dd1e      	ble.n	800b7c2 <_dtoa_r+0x94a>
 800b784:	9b08      	ldr	r3, [sp, #32]
 800b786:	2b00      	cmp	r3, #0
 800b788:	f47f aebc 	bne.w	800b504 <_dtoa_r+0x68c>
 800b78c:	4621      	mov	r1, r4
 800b78e:	2205      	movs	r2, #5
 800b790:	4658      	mov	r0, fp
 800b792:	f000 fa99 	bl	800bcc8 <__multadd>
 800b796:	4601      	mov	r1, r0
 800b798:	4604      	mov	r4, r0
 800b79a:	4648      	mov	r0, r9
 800b79c:	f000 fcaa 	bl	800c0f4 <__mcmp>
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	f77f aeaf 	ble.w	800b504 <_dtoa_r+0x68c>
 800b7a6:	2331      	movs	r3, #49	@ 0x31
 800b7a8:	4656      	mov	r6, sl
 800b7aa:	f806 3b01 	strb.w	r3, [r6], #1
 800b7ae:	9b04      	ldr	r3, [sp, #16]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	9304      	str	r3, [sp, #16]
 800b7b4:	e6aa      	b.n	800b50c <_dtoa_r+0x694>
 800b7b6:	9c07      	ldr	r4, [sp, #28]
 800b7b8:	9704      	str	r7, [sp, #16]
 800b7ba:	4625      	mov	r5, r4
 800b7bc:	e7f3      	b.n	800b7a6 <_dtoa_r+0x92e>
 800b7be:	9b07      	ldr	r3, [sp, #28]
 800b7c0:	9308      	str	r3, [sp, #32]
 800b7c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f000 8104 	beq.w	800b9d2 <_dtoa_r+0xb5a>
 800b7ca:	2e00      	cmp	r6, #0
 800b7cc:	dd05      	ble.n	800b7da <_dtoa_r+0x962>
 800b7ce:	4629      	mov	r1, r5
 800b7d0:	4632      	mov	r2, r6
 800b7d2:	4658      	mov	r0, fp
 800b7d4:	f000 fc22 	bl	800c01c <__lshift>
 800b7d8:	4605      	mov	r5, r0
 800b7da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d05a      	beq.n	800b896 <_dtoa_r+0xa1e>
 800b7e0:	4658      	mov	r0, fp
 800b7e2:	6869      	ldr	r1, [r5, #4]
 800b7e4:	f000 fa0e 	bl	800bc04 <_Balloc>
 800b7e8:	4606      	mov	r6, r0
 800b7ea:	b928      	cbnz	r0, 800b7f8 <_dtoa_r+0x980>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b7f2:	4b83      	ldr	r3, [pc, #524]	@ (800ba00 <_dtoa_r+0xb88>)
 800b7f4:	f7ff bb54 	b.w	800aea0 <_dtoa_r+0x28>
 800b7f8:	692a      	ldr	r2, [r5, #16]
 800b7fa:	f105 010c 	add.w	r1, r5, #12
 800b7fe:	3202      	adds	r2, #2
 800b800:	0092      	lsls	r2, r2, #2
 800b802:	300c      	adds	r0, #12
 800b804:	f001 f96c 	bl	800cae0 <memcpy>
 800b808:	2201      	movs	r2, #1
 800b80a:	4631      	mov	r1, r6
 800b80c:	4658      	mov	r0, fp
 800b80e:	f000 fc05 	bl	800c01c <__lshift>
 800b812:	462f      	mov	r7, r5
 800b814:	4605      	mov	r5, r0
 800b816:	f10a 0301 	add.w	r3, sl, #1
 800b81a:	9307      	str	r3, [sp, #28]
 800b81c:	9b08      	ldr	r3, [sp, #32]
 800b81e:	4453      	add	r3, sl
 800b820:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b822:	9b02      	ldr	r3, [sp, #8]
 800b824:	f003 0301 	and.w	r3, r3, #1
 800b828:	930a      	str	r3, [sp, #40]	@ 0x28
 800b82a:	9b07      	ldr	r3, [sp, #28]
 800b82c:	4621      	mov	r1, r4
 800b82e:	3b01      	subs	r3, #1
 800b830:	4648      	mov	r0, r9
 800b832:	9302      	str	r3, [sp, #8]
 800b834:	f7ff fa97 	bl	800ad66 <quorem>
 800b838:	4639      	mov	r1, r7
 800b83a:	9008      	str	r0, [sp, #32]
 800b83c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b840:	4648      	mov	r0, r9
 800b842:	f000 fc57 	bl	800c0f4 <__mcmp>
 800b846:	462a      	mov	r2, r5
 800b848:	9009      	str	r0, [sp, #36]	@ 0x24
 800b84a:	4621      	mov	r1, r4
 800b84c:	4658      	mov	r0, fp
 800b84e:	f000 fc6d 	bl	800c12c <__mdiff>
 800b852:	68c2      	ldr	r2, [r0, #12]
 800b854:	4606      	mov	r6, r0
 800b856:	bb02      	cbnz	r2, 800b89a <_dtoa_r+0xa22>
 800b858:	4601      	mov	r1, r0
 800b85a:	4648      	mov	r0, r9
 800b85c:	f000 fc4a 	bl	800c0f4 <__mcmp>
 800b860:	4602      	mov	r2, r0
 800b862:	4631      	mov	r1, r6
 800b864:	4658      	mov	r0, fp
 800b866:	920c      	str	r2, [sp, #48]	@ 0x30
 800b868:	f000 fa0c 	bl	800bc84 <_Bfree>
 800b86c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b86e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b870:	9e07      	ldr	r6, [sp, #28]
 800b872:	ea43 0102 	orr.w	r1, r3, r2
 800b876:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b878:	4319      	orrs	r1, r3
 800b87a:	d110      	bne.n	800b89e <_dtoa_r+0xa26>
 800b87c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b880:	d029      	beq.n	800b8d6 <_dtoa_r+0xa5e>
 800b882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b884:	2b00      	cmp	r3, #0
 800b886:	dd02      	ble.n	800b88e <_dtoa_r+0xa16>
 800b888:	9b08      	ldr	r3, [sp, #32]
 800b88a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b88e:	9b02      	ldr	r3, [sp, #8]
 800b890:	f883 8000 	strb.w	r8, [r3]
 800b894:	e63b      	b.n	800b50e <_dtoa_r+0x696>
 800b896:	4628      	mov	r0, r5
 800b898:	e7bb      	b.n	800b812 <_dtoa_r+0x99a>
 800b89a:	2201      	movs	r2, #1
 800b89c:	e7e1      	b.n	800b862 <_dtoa_r+0x9ea>
 800b89e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	db04      	blt.n	800b8ae <_dtoa_r+0xa36>
 800b8a4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800b8a6:	430b      	orrs	r3, r1
 800b8a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b8aa:	430b      	orrs	r3, r1
 800b8ac:	d120      	bne.n	800b8f0 <_dtoa_r+0xa78>
 800b8ae:	2a00      	cmp	r2, #0
 800b8b0:	dded      	ble.n	800b88e <_dtoa_r+0xa16>
 800b8b2:	4649      	mov	r1, r9
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	4658      	mov	r0, fp
 800b8b8:	f000 fbb0 	bl	800c01c <__lshift>
 800b8bc:	4621      	mov	r1, r4
 800b8be:	4681      	mov	r9, r0
 800b8c0:	f000 fc18 	bl	800c0f4 <__mcmp>
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	dc03      	bgt.n	800b8d0 <_dtoa_r+0xa58>
 800b8c8:	d1e1      	bne.n	800b88e <_dtoa_r+0xa16>
 800b8ca:	f018 0f01 	tst.w	r8, #1
 800b8ce:	d0de      	beq.n	800b88e <_dtoa_r+0xa16>
 800b8d0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b8d4:	d1d8      	bne.n	800b888 <_dtoa_r+0xa10>
 800b8d6:	2339      	movs	r3, #57	@ 0x39
 800b8d8:	9a02      	ldr	r2, [sp, #8]
 800b8da:	7013      	strb	r3, [r2, #0]
 800b8dc:	4633      	mov	r3, r6
 800b8de:	461e      	mov	r6, r3
 800b8e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b8e4:	3b01      	subs	r3, #1
 800b8e6:	2a39      	cmp	r2, #57	@ 0x39
 800b8e8:	d052      	beq.n	800b990 <_dtoa_r+0xb18>
 800b8ea:	3201      	adds	r2, #1
 800b8ec:	701a      	strb	r2, [r3, #0]
 800b8ee:	e60e      	b.n	800b50e <_dtoa_r+0x696>
 800b8f0:	2a00      	cmp	r2, #0
 800b8f2:	dd07      	ble.n	800b904 <_dtoa_r+0xa8c>
 800b8f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b8f8:	d0ed      	beq.n	800b8d6 <_dtoa_r+0xa5e>
 800b8fa:	9a02      	ldr	r2, [sp, #8]
 800b8fc:	f108 0301 	add.w	r3, r8, #1
 800b900:	7013      	strb	r3, [r2, #0]
 800b902:	e604      	b.n	800b50e <_dtoa_r+0x696>
 800b904:	9b07      	ldr	r3, [sp, #28]
 800b906:	9a07      	ldr	r2, [sp, #28]
 800b908:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b90c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b90e:	4293      	cmp	r3, r2
 800b910:	d028      	beq.n	800b964 <_dtoa_r+0xaec>
 800b912:	4649      	mov	r1, r9
 800b914:	2300      	movs	r3, #0
 800b916:	220a      	movs	r2, #10
 800b918:	4658      	mov	r0, fp
 800b91a:	f000 f9d5 	bl	800bcc8 <__multadd>
 800b91e:	42af      	cmp	r7, r5
 800b920:	4681      	mov	r9, r0
 800b922:	f04f 0300 	mov.w	r3, #0
 800b926:	f04f 020a 	mov.w	r2, #10
 800b92a:	4639      	mov	r1, r7
 800b92c:	4658      	mov	r0, fp
 800b92e:	d107      	bne.n	800b940 <_dtoa_r+0xac8>
 800b930:	f000 f9ca 	bl	800bcc8 <__multadd>
 800b934:	4607      	mov	r7, r0
 800b936:	4605      	mov	r5, r0
 800b938:	9b07      	ldr	r3, [sp, #28]
 800b93a:	3301      	adds	r3, #1
 800b93c:	9307      	str	r3, [sp, #28]
 800b93e:	e774      	b.n	800b82a <_dtoa_r+0x9b2>
 800b940:	f000 f9c2 	bl	800bcc8 <__multadd>
 800b944:	4629      	mov	r1, r5
 800b946:	4607      	mov	r7, r0
 800b948:	2300      	movs	r3, #0
 800b94a:	220a      	movs	r2, #10
 800b94c:	4658      	mov	r0, fp
 800b94e:	f000 f9bb 	bl	800bcc8 <__multadd>
 800b952:	4605      	mov	r5, r0
 800b954:	e7f0      	b.n	800b938 <_dtoa_r+0xac0>
 800b956:	9b08      	ldr	r3, [sp, #32]
 800b958:	2700      	movs	r7, #0
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	bfcc      	ite	gt
 800b95e:	461e      	movgt	r6, r3
 800b960:	2601      	movle	r6, #1
 800b962:	4456      	add	r6, sl
 800b964:	4649      	mov	r1, r9
 800b966:	2201      	movs	r2, #1
 800b968:	4658      	mov	r0, fp
 800b96a:	f000 fb57 	bl	800c01c <__lshift>
 800b96e:	4621      	mov	r1, r4
 800b970:	4681      	mov	r9, r0
 800b972:	f000 fbbf 	bl	800c0f4 <__mcmp>
 800b976:	2800      	cmp	r0, #0
 800b978:	dcb0      	bgt.n	800b8dc <_dtoa_r+0xa64>
 800b97a:	d102      	bne.n	800b982 <_dtoa_r+0xb0a>
 800b97c:	f018 0f01 	tst.w	r8, #1
 800b980:	d1ac      	bne.n	800b8dc <_dtoa_r+0xa64>
 800b982:	4633      	mov	r3, r6
 800b984:	461e      	mov	r6, r3
 800b986:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b98a:	2a30      	cmp	r2, #48	@ 0x30
 800b98c:	d0fa      	beq.n	800b984 <_dtoa_r+0xb0c>
 800b98e:	e5be      	b.n	800b50e <_dtoa_r+0x696>
 800b990:	459a      	cmp	sl, r3
 800b992:	d1a4      	bne.n	800b8de <_dtoa_r+0xa66>
 800b994:	9b04      	ldr	r3, [sp, #16]
 800b996:	3301      	adds	r3, #1
 800b998:	9304      	str	r3, [sp, #16]
 800b99a:	2331      	movs	r3, #49	@ 0x31
 800b99c:	f88a 3000 	strb.w	r3, [sl]
 800b9a0:	e5b5      	b.n	800b50e <_dtoa_r+0x696>
 800b9a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b9a4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ba04 <_dtoa_r+0xb8c>
 800b9a8:	b11b      	cbz	r3, 800b9b2 <_dtoa_r+0xb3a>
 800b9aa:	f10a 0308 	add.w	r3, sl, #8
 800b9ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b9b0:	6013      	str	r3, [r2, #0]
 800b9b2:	4650      	mov	r0, sl
 800b9b4:	b017      	add	sp, #92	@ 0x5c
 800b9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	f77f ae3d 	ble.w	800b63c <_dtoa_r+0x7c4>
 800b9c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9c4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9c6:	2001      	movs	r0, #1
 800b9c8:	e65b      	b.n	800b682 <_dtoa_r+0x80a>
 800b9ca:	9b08      	ldr	r3, [sp, #32]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f77f aed6 	ble.w	800b77e <_dtoa_r+0x906>
 800b9d2:	4656      	mov	r6, sl
 800b9d4:	4621      	mov	r1, r4
 800b9d6:	4648      	mov	r0, r9
 800b9d8:	f7ff f9c5 	bl	800ad66 <quorem>
 800b9dc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b9e0:	9b08      	ldr	r3, [sp, #32]
 800b9e2:	f806 8b01 	strb.w	r8, [r6], #1
 800b9e6:	eba6 020a 	sub.w	r2, r6, sl
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	ddb3      	ble.n	800b956 <_dtoa_r+0xade>
 800b9ee:	4649      	mov	r1, r9
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	220a      	movs	r2, #10
 800b9f4:	4658      	mov	r0, fp
 800b9f6:	f000 f967 	bl	800bcc8 <__multadd>
 800b9fa:	4681      	mov	r9, r0
 800b9fc:	e7ea      	b.n	800b9d4 <_dtoa_r+0xb5c>
 800b9fe:	bf00      	nop
 800ba00:	0800d092 	.word	0x0800d092
 800ba04:	0800d016 	.word	0x0800d016

0800ba08 <_free_r>:
 800ba08:	b538      	push	{r3, r4, r5, lr}
 800ba0a:	4605      	mov	r5, r0
 800ba0c:	2900      	cmp	r1, #0
 800ba0e:	d040      	beq.n	800ba92 <_free_r+0x8a>
 800ba10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba14:	1f0c      	subs	r4, r1, #4
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	bfb8      	it	lt
 800ba1a:	18e4      	addlt	r4, r4, r3
 800ba1c:	f000 f8e6 	bl	800bbec <__malloc_lock>
 800ba20:	4a1c      	ldr	r2, [pc, #112]	@ (800ba94 <_free_r+0x8c>)
 800ba22:	6813      	ldr	r3, [r2, #0]
 800ba24:	b933      	cbnz	r3, 800ba34 <_free_r+0x2c>
 800ba26:	6063      	str	r3, [r4, #4]
 800ba28:	6014      	str	r4, [r2, #0]
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba30:	f000 b8e2 	b.w	800bbf8 <__malloc_unlock>
 800ba34:	42a3      	cmp	r3, r4
 800ba36:	d908      	bls.n	800ba4a <_free_r+0x42>
 800ba38:	6820      	ldr	r0, [r4, #0]
 800ba3a:	1821      	adds	r1, r4, r0
 800ba3c:	428b      	cmp	r3, r1
 800ba3e:	bf01      	itttt	eq
 800ba40:	6819      	ldreq	r1, [r3, #0]
 800ba42:	685b      	ldreq	r3, [r3, #4]
 800ba44:	1809      	addeq	r1, r1, r0
 800ba46:	6021      	streq	r1, [r4, #0]
 800ba48:	e7ed      	b.n	800ba26 <_free_r+0x1e>
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	b10b      	cbz	r3, 800ba54 <_free_r+0x4c>
 800ba50:	42a3      	cmp	r3, r4
 800ba52:	d9fa      	bls.n	800ba4a <_free_r+0x42>
 800ba54:	6811      	ldr	r1, [r2, #0]
 800ba56:	1850      	adds	r0, r2, r1
 800ba58:	42a0      	cmp	r0, r4
 800ba5a:	d10b      	bne.n	800ba74 <_free_r+0x6c>
 800ba5c:	6820      	ldr	r0, [r4, #0]
 800ba5e:	4401      	add	r1, r0
 800ba60:	1850      	adds	r0, r2, r1
 800ba62:	4283      	cmp	r3, r0
 800ba64:	6011      	str	r1, [r2, #0]
 800ba66:	d1e0      	bne.n	800ba2a <_free_r+0x22>
 800ba68:	6818      	ldr	r0, [r3, #0]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	4408      	add	r0, r1
 800ba6e:	6010      	str	r0, [r2, #0]
 800ba70:	6053      	str	r3, [r2, #4]
 800ba72:	e7da      	b.n	800ba2a <_free_r+0x22>
 800ba74:	d902      	bls.n	800ba7c <_free_r+0x74>
 800ba76:	230c      	movs	r3, #12
 800ba78:	602b      	str	r3, [r5, #0]
 800ba7a:	e7d6      	b.n	800ba2a <_free_r+0x22>
 800ba7c:	6820      	ldr	r0, [r4, #0]
 800ba7e:	1821      	adds	r1, r4, r0
 800ba80:	428b      	cmp	r3, r1
 800ba82:	bf01      	itttt	eq
 800ba84:	6819      	ldreq	r1, [r3, #0]
 800ba86:	685b      	ldreq	r3, [r3, #4]
 800ba88:	1809      	addeq	r1, r1, r0
 800ba8a:	6021      	streq	r1, [r4, #0]
 800ba8c:	6063      	str	r3, [r4, #4]
 800ba8e:	6054      	str	r4, [r2, #4]
 800ba90:	e7cb      	b.n	800ba2a <_free_r+0x22>
 800ba92:	bd38      	pop	{r3, r4, r5, pc}
 800ba94:	20000708 	.word	0x20000708

0800ba98 <malloc>:
 800ba98:	4b02      	ldr	r3, [pc, #8]	@ (800baa4 <malloc+0xc>)
 800ba9a:	4601      	mov	r1, r0
 800ba9c:	6818      	ldr	r0, [r3, #0]
 800ba9e:	f000 b825 	b.w	800baec <_malloc_r>
 800baa2:	bf00      	nop
 800baa4:	20000114 	.word	0x20000114

0800baa8 <sbrk_aligned>:
 800baa8:	b570      	push	{r4, r5, r6, lr}
 800baaa:	4e0f      	ldr	r6, [pc, #60]	@ (800bae8 <sbrk_aligned+0x40>)
 800baac:	460c      	mov	r4, r1
 800baae:	6831      	ldr	r1, [r6, #0]
 800bab0:	4605      	mov	r5, r0
 800bab2:	b911      	cbnz	r1, 800baba <sbrk_aligned+0x12>
 800bab4:	f001 f804 	bl	800cac0 <_sbrk_r>
 800bab8:	6030      	str	r0, [r6, #0]
 800baba:	4621      	mov	r1, r4
 800babc:	4628      	mov	r0, r5
 800babe:	f000 ffff 	bl	800cac0 <_sbrk_r>
 800bac2:	1c43      	adds	r3, r0, #1
 800bac4:	d103      	bne.n	800bace <sbrk_aligned+0x26>
 800bac6:	f04f 34ff 	mov.w	r4, #4294967295
 800baca:	4620      	mov	r0, r4
 800bacc:	bd70      	pop	{r4, r5, r6, pc}
 800bace:	1cc4      	adds	r4, r0, #3
 800bad0:	f024 0403 	bic.w	r4, r4, #3
 800bad4:	42a0      	cmp	r0, r4
 800bad6:	d0f8      	beq.n	800baca <sbrk_aligned+0x22>
 800bad8:	1a21      	subs	r1, r4, r0
 800bada:	4628      	mov	r0, r5
 800badc:	f000 fff0 	bl	800cac0 <_sbrk_r>
 800bae0:	3001      	adds	r0, #1
 800bae2:	d1f2      	bne.n	800baca <sbrk_aligned+0x22>
 800bae4:	e7ef      	b.n	800bac6 <sbrk_aligned+0x1e>
 800bae6:	bf00      	nop
 800bae8:	20000704 	.word	0x20000704

0800baec <_malloc_r>:
 800baec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baf0:	1ccd      	adds	r5, r1, #3
 800baf2:	f025 0503 	bic.w	r5, r5, #3
 800baf6:	3508      	adds	r5, #8
 800baf8:	2d0c      	cmp	r5, #12
 800bafa:	bf38      	it	cc
 800bafc:	250c      	movcc	r5, #12
 800bafe:	2d00      	cmp	r5, #0
 800bb00:	4606      	mov	r6, r0
 800bb02:	db01      	blt.n	800bb08 <_malloc_r+0x1c>
 800bb04:	42a9      	cmp	r1, r5
 800bb06:	d904      	bls.n	800bb12 <_malloc_r+0x26>
 800bb08:	230c      	movs	r3, #12
 800bb0a:	6033      	str	r3, [r6, #0]
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bbe8 <_malloc_r+0xfc>
 800bb16:	f000 f869 	bl	800bbec <__malloc_lock>
 800bb1a:	f8d8 3000 	ldr.w	r3, [r8]
 800bb1e:	461c      	mov	r4, r3
 800bb20:	bb44      	cbnz	r4, 800bb74 <_malloc_r+0x88>
 800bb22:	4629      	mov	r1, r5
 800bb24:	4630      	mov	r0, r6
 800bb26:	f7ff ffbf 	bl	800baa8 <sbrk_aligned>
 800bb2a:	1c43      	adds	r3, r0, #1
 800bb2c:	4604      	mov	r4, r0
 800bb2e:	d158      	bne.n	800bbe2 <_malloc_r+0xf6>
 800bb30:	f8d8 4000 	ldr.w	r4, [r8]
 800bb34:	4627      	mov	r7, r4
 800bb36:	2f00      	cmp	r7, #0
 800bb38:	d143      	bne.n	800bbc2 <_malloc_r+0xd6>
 800bb3a:	2c00      	cmp	r4, #0
 800bb3c:	d04b      	beq.n	800bbd6 <_malloc_r+0xea>
 800bb3e:	6823      	ldr	r3, [r4, #0]
 800bb40:	4639      	mov	r1, r7
 800bb42:	4630      	mov	r0, r6
 800bb44:	eb04 0903 	add.w	r9, r4, r3
 800bb48:	f000 ffba 	bl	800cac0 <_sbrk_r>
 800bb4c:	4581      	cmp	r9, r0
 800bb4e:	d142      	bne.n	800bbd6 <_malloc_r+0xea>
 800bb50:	6821      	ldr	r1, [r4, #0]
 800bb52:	4630      	mov	r0, r6
 800bb54:	1a6d      	subs	r5, r5, r1
 800bb56:	4629      	mov	r1, r5
 800bb58:	f7ff ffa6 	bl	800baa8 <sbrk_aligned>
 800bb5c:	3001      	adds	r0, #1
 800bb5e:	d03a      	beq.n	800bbd6 <_malloc_r+0xea>
 800bb60:	6823      	ldr	r3, [r4, #0]
 800bb62:	442b      	add	r3, r5
 800bb64:	6023      	str	r3, [r4, #0]
 800bb66:	f8d8 3000 	ldr.w	r3, [r8]
 800bb6a:	685a      	ldr	r2, [r3, #4]
 800bb6c:	bb62      	cbnz	r2, 800bbc8 <_malloc_r+0xdc>
 800bb6e:	f8c8 7000 	str.w	r7, [r8]
 800bb72:	e00f      	b.n	800bb94 <_malloc_r+0xa8>
 800bb74:	6822      	ldr	r2, [r4, #0]
 800bb76:	1b52      	subs	r2, r2, r5
 800bb78:	d420      	bmi.n	800bbbc <_malloc_r+0xd0>
 800bb7a:	2a0b      	cmp	r2, #11
 800bb7c:	d917      	bls.n	800bbae <_malloc_r+0xc2>
 800bb7e:	1961      	adds	r1, r4, r5
 800bb80:	42a3      	cmp	r3, r4
 800bb82:	6025      	str	r5, [r4, #0]
 800bb84:	bf18      	it	ne
 800bb86:	6059      	strne	r1, [r3, #4]
 800bb88:	6863      	ldr	r3, [r4, #4]
 800bb8a:	bf08      	it	eq
 800bb8c:	f8c8 1000 	streq.w	r1, [r8]
 800bb90:	5162      	str	r2, [r4, r5]
 800bb92:	604b      	str	r3, [r1, #4]
 800bb94:	4630      	mov	r0, r6
 800bb96:	f000 f82f 	bl	800bbf8 <__malloc_unlock>
 800bb9a:	f104 000b 	add.w	r0, r4, #11
 800bb9e:	1d23      	adds	r3, r4, #4
 800bba0:	f020 0007 	bic.w	r0, r0, #7
 800bba4:	1ac2      	subs	r2, r0, r3
 800bba6:	bf1c      	itt	ne
 800bba8:	1a1b      	subne	r3, r3, r0
 800bbaa:	50a3      	strne	r3, [r4, r2]
 800bbac:	e7af      	b.n	800bb0e <_malloc_r+0x22>
 800bbae:	6862      	ldr	r2, [r4, #4]
 800bbb0:	42a3      	cmp	r3, r4
 800bbb2:	bf0c      	ite	eq
 800bbb4:	f8c8 2000 	streq.w	r2, [r8]
 800bbb8:	605a      	strne	r2, [r3, #4]
 800bbba:	e7eb      	b.n	800bb94 <_malloc_r+0xa8>
 800bbbc:	4623      	mov	r3, r4
 800bbbe:	6864      	ldr	r4, [r4, #4]
 800bbc0:	e7ae      	b.n	800bb20 <_malloc_r+0x34>
 800bbc2:	463c      	mov	r4, r7
 800bbc4:	687f      	ldr	r7, [r7, #4]
 800bbc6:	e7b6      	b.n	800bb36 <_malloc_r+0x4a>
 800bbc8:	461a      	mov	r2, r3
 800bbca:	685b      	ldr	r3, [r3, #4]
 800bbcc:	42a3      	cmp	r3, r4
 800bbce:	d1fb      	bne.n	800bbc8 <_malloc_r+0xdc>
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	6053      	str	r3, [r2, #4]
 800bbd4:	e7de      	b.n	800bb94 <_malloc_r+0xa8>
 800bbd6:	230c      	movs	r3, #12
 800bbd8:	4630      	mov	r0, r6
 800bbda:	6033      	str	r3, [r6, #0]
 800bbdc:	f000 f80c 	bl	800bbf8 <__malloc_unlock>
 800bbe0:	e794      	b.n	800bb0c <_malloc_r+0x20>
 800bbe2:	6005      	str	r5, [r0, #0]
 800bbe4:	e7d6      	b.n	800bb94 <_malloc_r+0xa8>
 800bbe6:	bf00      	nop
 800bbe8:	20000708 	.word	0x20000708

0800bbec <__malloc_lock>:
 800bbec:	4801      	ldr	r0, [pc, #4]	@ (800bbf4 <__malloc_lock+0x8>)
 800bbee:	f7ff b8aa 	b.w	800ad46 <__retarget_lock_acquire_recursive>
 800bbf2:	bf00      	nop
 800bbf4:	20000700 	.word	0x20000700

0800bbf8 <__malloc_unlock>:
 800bbf8:	4801      	ldr	r0, [pc, #4]	@ (800bc00 <__malloc_unlock+0x8>)
 800bbfa:	f7ff b8a5 	b.w	800ad48 <__retarget_lock_release_recursive>
 800bbfe:	bf00      	nop
 800bc00:	20000700 	.word	0x20000700

0800bc04 <_Balloc>:
 800bc04:	b570      	push	{r4, r5, r6, lr}
 800bc06:	69c6      	ldr	r6, [r0, #28]
 800bc08:	4604      	mov	r4, r0
 800bc0a:	460d      	mov	r5, r1
 800bc0c:	b976      	cbnz	r6, 800bc2c <_Balloc+0x28>
 800bc0e:	2010      	movs	r0, #16
 800bc10:	f7ff ff42 	bl	800ba98 <malloc>
 800bc14:	4602      	mov	r2, r0
 800bc16:	61e0      	str	r0, [r4, #28]
 800bc18:	b920      	cbnz	r0, 800bc24 <_Balloc+0x20>
 800bc1a:	216b      	movs	r1, #107	@ 0x6b
 800bc1c:	4b17      	ldr	r3, [pc, #92]	@ (800bc7c <_Balloc+0x78>)
 800bc1e:	4818      	ldr	r0, [pc, #96]	@ (800bc80 <_Balloc+0x7c>)
 800bc20:	f000 ff6c 	bl	800cafc <__assert_func>
 800bc24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc28:	6006      	str	r6, [r0, #0]
 800bc2a:	60c6      	str	r6, [r0, #12]
 800bc2c:	69e6      	ldr	r6, [r4, #28]
 800bc2e:	68f3      	ldr	r3, [r6, #12]
 800bc30:	b183      	cbz	r3, 800bc54 <_Balloc+0x50>
 800bc32:	69e3      	ldr	r3, [r4, #28]
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc3a:	b9b8      	cbnz	r0, 800bc6c <_Balloc+0x68>
 800bc3c:	2101      	movs	r1, #1
 800bc3e:	fa01 f605 	lsl.w	r6, r1, r5
 800bc42:	1d72      	adds	r2, r6, #5
 800bc44:	4620      	mov	r0, r4
 800bc46:	0092      	lsls	r2, r2, #2
 800bc48:	f000 ff76 	bl	800cb38 <_calloc_r>
 800bc4c:	b160      	cbz	r0, 800bc68 <_Balloc+0x64>
 800bc4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc52:	e00e      	b.n	800bc72 <_Balloc+0x6e>
 800bc54:	2221      	movs	r2, #33	@ 0x21
 800bc56:	2104      	movs	r1, #4
 800bc58:	4620      	mov	r0, r4
 800bc5a:	f000 ff6d 	bl	800cb38 <_calloc_r>
 800bc5e:	69e3      	ldr	r3, [r4, #28]
 800bc60:	60f0      	str	r0, [r6, #12]
 800bc62:	68db      	ldr	r3, [r3, #12]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d1e4      	bne.n	800bc32 <_Balloc+0x2e>
 800bc68:	2000      	movs	r0, #0
 800bc6a:	bd70      	pop	{r4, r5, r6, pc}
 800bc6c:	6802      	ldr	r2, [r0, #0]
 800bc6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc72:	2300      	movs	r3, #0
 800bc74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc78:	e7f7      	b.n	800bc6a <_Balloc+0x66>
 800bc7a:	bf00      	nop
 800bc7c:	0800d023 	.word	0x0800d023
 800bc80:	0800d0a3 	.word	0x0800d0a3

0800bc84 <_Bfree>:
 800bc84:	b570      	push	{r4, r5, r6, lr}
 800bc86:	69c6      	ldr	r6, [r0, #28]
 800bc88:	4605      	mov	r5, r0
 800bc8a:	460c      	mov	r4, r1
 800bc8c:	b976      	cbnz	r6, 800bcac <_Bfree+0x28>
 800bc8e:	2010      	movs	r0, #16
 800bc90:	f7ff ff02 	bl	800ba98 <malloc>
 800bc94:	4602      	mov	r2, r0
 800bc96:	61e8      	str	r0, [r5, #28]
 800bc98:	b920      	cbnz	r0, 800bca4 <_Bfree+0x20>
 800bc9a:	218f      	movs	r1, #143	@ 0x8f
 800bc9c:	4b08      	ldr	r3, [pc, #32]	@ (800bcc0 <_Bfree+0x3c>)
 800bc9e:	4809      	ldr	r0, [pc, #36]	@ (800bcc4 <_Bfree+0x40>)
 800bca0:	f000 ff2c 	bl	800cafc <__assert_func>
 800bca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bca8:	6006      	str	r6, [r0, #0]
 800bcaa:	60c6      	str	r6, [r0, #12]
 800bcac:	b13c      	cbz	r4, 800bcbe <_Bfree+0x3a>
 800bcae:	69eb      	ldr	r3, [r5, #28]
 800bcb0:	6862      	ldr	r2, [r4, #4]
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bcb8:	6021      	str	r1, [r4, #0]
 800bcba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bcbe:	bd70      	pop	{r4, r5, r6, pc}
 800bcc0:	0800d023 	.word	0x0800d023
 800bcc4:	0800d0a3 	.word	0x0800d0a3

0800bcc8 <__multadd>:
 800bcc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bccc:	4607      	mov	r7, r0
 800bcce:	460c      	mov	r4, r1
 800bcd0:	461e      	mov	r6, r3
 800bcd2:	2000      	movs	r0, #0
 800bcd4:	690d      	ldr	r5, [r1, #16]
 800bcd6:	f101 0c14 	add.w	ip, r1, #20
 800bcda:	f8dc 3000 	ldr.w	r3, [ip]
 800bcde:	3001      	adds	r0, #1
 800bce0:	b299      	uxth	r1, r3
 800bce2:	fb02 6101 	mla	r1, r2, r1, r6
 800bce6:	0c1e      	lsrs	r6, r3, #16
 800bce8:	0c0b      	lsrs	r3, r1, #16
 800bcea:	fb02 3306 	mla	r3, r2, r6, r3
 800bcee:	b289      	uxth	r1, r1
 800bcf0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bcf4:	4285      	cmp	r5, r0
 800bcf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bcfa:	f84c 1b04 	str.w	r1, [ip], #4
 800bcfe:	dcec      	bgt.n	800bcda <__multadd+0x12>
 800bd00:	b30e      	cbz	r6, 800bd46 <__multadd+0x7e>
 800bd02:	68a3      	ldr	r3, [r4, #8]
 800bd04:	42ab      	cmp	r3, r5
 800bd06:	dc19      	bgt.n	800bd3c <__multadd+0x74>
 800bd08:	6861      	ldr	r1, [r4, #4]
 800bd0a:	4638      	mov	r0, r7
 800bd0c:	3101      	adds	r1, #1
 800bd0e:	f7ff ff79 	bl	800bc04 <_Balloc>
 800bd12:	4680      	mov	r8, r0
 800bd14:	b928      	cbnz	r0, 800bd22 <__multadd+0x5a>
 800bd16:	4602      	mov	r2, r0
 800bd18:	21ba      	movs	r1, #186	@ 0xba
 800bd1a:	4b0c      	ldr	r3, [pc, #48]	@ (800bd4c <__multadd+0x84>)
 800bd1c:	480c      	ldr	r0, [pc, #48]	@ (800bd50 <__multadd+0x88>)
 800bd1e:	f000 feed 	bl	800cafc <__assert_func>
 800bd22:	6922      	ldr	r2, [r4, #16]
 800bd24:	f104 010c 	add.w	r1, r4, #12
 800bd28:	3202      	adds	r2, #2
 800bd2a:	0092      	lsls	r2, r2, #2
 800bd2c:	300c      	adds	r0, #12
 800bd2e:	f000 fed7 	bl	800cae0 <memcpy>
 800bd32:	4621      	mov	r1, r4
 800bd34:	4638      	mov	r0, r7
 800bd36:	f7ff ffa5 	bl	800bc84 <_Bfree>
 800bd3a:	4644      	mov	r4, r8
 800bd3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd40:	3501      	adds	r5, #1
 800bd42:	615e      	str	r6, [r3, #20]
 800bd44:	6125      	str	r5, [r4, #16]
 800bd46:	4620      	mov	r0, r4
 800bd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd4c:	0800d092 	.word	0x0800d092
 800bd50:	0800d0a3 	.word	0x0800d0a3

0800bd54 <__hi0bits>:
 800bd54:	4603      	mov	r3, r0
 800bd56:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bd5a:	bf3a      	itte	cc
 800bd5c:	0403      	lslcc	r3, r0, #16
 800bd5e:	2010      	movcc	r0, #16
 800bd60:	2000      	movcs	r0, #0
 800bd62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bd66:	bf3c      	itt	cc
 800bd68:	021b      	lslcc	r3, r3, #8
 800bd6a:	3008      	addcc	r0, #8
 800bd6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd70:	bf3c      	itt	cc
 800bd72:	011b      	lslcc	r3, r3, #4
 800bd74:	3004      	addcc	r0, #4
 800bd76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd7a:	bf3c      	itt	cc
 800bd7c:	009b      	lslcc	r3, r3, #2
 800bd7e:	3002      	addcc	r0, #2
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	db05      	blt.n	800bd90 <__hi0bits+0x3c>
 800bd84:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bd88:	f100 0001 	add.w	r0, r0, #1
 800bd8c:	bf08      	it	eq
 800bd8e:	2020      	moveq	r0, #32
 800bd90:	4770      	bx	lr

0800bd92 <__lo0bits>:
 800bd92:	6803      	ldr	r3, [r0, #0]
 800bd94:	4602      	mov	r2, r0
 800bd96:	f013 0007 	ands.w	r0, r3, #7
 800bd9a:	d00b      	beq.n	800bdb4 <__lo0bits+0x22>
 800bd9c:	07d9      	lsls	r1, r3, #31
 800bd9e:	d421      	bmi.n	800bde4 <__lo0bits+0x52>
 800bda0:	0798      	lsls	r0, r3, #30
 800bda2:	bf49      	itett	mi
 800bda4:	085b      	lsrmi	r3, r3, #1
 800bda6:	089b      	lsrpl	r3, r3, #2
 800bda8:	2001      	movmi	r0, #1
 800bdaa:	6013      	strmi	r3, [r2, #0]
 800bdac:	bf5c      	itt	pl
 800bdae:	2002      	movpl	r0, #2
 800bdb0:	6013      	strpl	r3, [r2, #0]
 800bdb2:	4770      	bx	lr
 800bdb4:	b299      	uxth	r1, r3
 800bdb6:	b909      	cbnz	r1, 800bdbc <__lo0bits+0x2a>
 800bdb8:	2010      	movs	r0, #16
 800bdba:	0c1b      	lsrs	r3, r3, #16
 800bdbc:	b2d9      	uxtb	r1, r3
 800bdbe:	b909      	cbnz	r1, 800bdc4 <__lo0bits+0x32>
 800bdc0:	3008      	adds	r0, #8
 800bdc2:	0a1b      	lsrs	r3, r3, #8
 800bdc4:	0719      	lsls	r1, r3, #28
 800bdc6:	bf04      	itt	eq
 800bdc8:	091b      	lsreq	r3, r3, #4
 800bdca:	3004      	addeq	r0, #4
 800bdcc:	0799      	lsls	r1, r3, #30
 800bdce:	bf04      	itt	eq
 800bdd0:	089b      	lsreq	r3, r3, #2
 800bdd2:	3002      	addeq	r0, #2
 800bdd4:	07d9      	lsls	r1, r3, #31
 800bdd6:	d403      	bmi.n	800bde0 <__lo0bits+0x4e>
 800bdd8:	085b      	lsrs	r3, r3, #1
 800bdda:	f100 0001 	add.w	r0, r0, #1
 800bdde:	d003      	beq.n	800bde8 <__lo0bits+0x56>
 800bde0:	6013      	str	r3, [r2, #0]
 800bde2:	4770      	bx	lr
 800bde4:	2000      	movs	r0, #0
 800bde6:	4770      	bx	lr
 800bde8:	2020      	movs	r0, #32
 800bdea:	4770      	bx	lr

0800bdec <__i2b>:
 800bdec:	b510      	push	{r4, lr}
 800bdee:	460c      	mov	r4, r1
 800bdf0:	2101      	movs	r1, #1
 800bdf2:	f7ff ff07 	bl	800bc04 <_Balloc>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	b928      	cbnz	r0, 800be06 <__i2b+0x1a>
 800bdfa:	f240 1145 	movw	r1, #325	@ 0x145
 800bdfe:	4b04      	ldr	r3, [pc, #16]	@ (800be10 <__i2b+0x24>)
 800be00:	4804      	ldr	r0, [pc, #16]	@ (800be14 <__i2b+0x28>)
 800be02:	f000 fe7b 	bl	800cafc <__assert_func>
 800be06:	2301      	movs	r3, #1
 800be08:	6144      	str	r4, [r0, #20]
 800be0a:	6103      	str	r3, [r0, #16]
 800be0c:	bd10      	pop	{r4, pc}
 800be0e:	bf00      	nop
 800be10:	0800d092 	.word	0x0800d092
 800be14:	0800d0a3 	.word	0x0800d0a3

0800be18 <__multiply>:
 800be18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be1c:	4614      	mov	r4, r2
 800be1e:	690a      	ldr	r2, [r1, #16]
 800be20:	6923      	ldr	r3, [r4, #16]
 800be22:	460f      	mov	r7, r1
 800be24:	429a      	cmp	r2, r3
 800be26:	bfa2      	ittt	ge
 800be28:	4623      	movge	r3, r4
 800be2a:	460c      	movge	r4, r1
 800be2c:	461f      	movge	r7, r3
 800be2e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800be32:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800be36:	68a3      	ldr	r3, [r4, #8]
 800be38:	6861      	ldr	r1, [r4, #4]
 800be3a:	eb0a 0609 	add.w	r6, sl, r9
 800be3e:	42b3      	cmp	r3, r6
 800be40:	b085      	sub	sp, #20
 800be42:	bfb8      	it	lt
 800be44:	3101      	addlt	r1, #1
 800be46:	f7ff fedd 	bl	800bc04 <_Balloc>
 800be4a:	b930      	cbnz	r0, 800be5a <__multiply+0x42>
 800be4c:	4602      	mov	r2, r0
 800be4e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800be52:	4b43      	ldr	r3, [pc, #268]	@ (800bf60 <__multiply+0x148>)
 800be54:	4843      	ldr	r0, [pc, #268]	@ (800bf64 <__multiply+0x14c>)
 800be56:	f000 fe51 	bl	800cafc <__assert_func>
 800be5a:	f100 0514 	add.w	r5, r0, #20
 800be5e:	462b      	mov	r3, r5
 800be60:	2200      	movs	r2, #0
 800be62:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be66:	4543      	cmp	r3, r8
 800be68:	d321      	bcc.n	800beae <__multiply+0x96>
 800be6a:	f107 0114 	add.w	r1, r7, #20
 800be6e:	f104 0214 	add.w	r2, r4, #20
 800be72:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800be76:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800be7a:	9302      	str	r3, [sp, #8]
 800be7c:	1b13      	subs	r3, r2, r4
 800be7e:	3b15      	subs	r3, #21
 800be80:	f023 0303 	bic.w	r3, r3, #3
 800be84:	3304      	adds	r3, #4
 800be86:	f104 0715 	add.w	r7, r4, #21
 800be8a:	42ba      	cmp	r2, r7
 800be8c:	bf38      	it	cc
 800be8e:	2304      	movcc	r3, #4
 800be90:	9301      	str	r3, [sp, #4]
 800be92:	9b02      	ldr	r3, [sp, #8]
 800be94:	9103      	str	r1, [sp, #12]
 800be96:	428b      	cmp	r3, r1
 800be98:	d80c      	bhi.n	800beb4 <__multiply+0x9c>
 800be9a:	2e00      	cmp	r6, #0
 800be9c:	dd03      	ble.n	800bea6 <__multiply+0x8e>
 800be9e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d05a      	beq.n	800bf5c <__multiply+0x144>
 800bea6:	6106      	str	r6, [r0, #16]
 800bea8:	b005      	add	sp, #20
 800beaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beae:	f843 2b04 	str.w	r2, [r3], #4
 800beb2:	e7d8      	b.n	800be66 <__multiply+0x4e>
 800beb4:	f8b1 a000 	ldrh.w	sl, [r1]
 800beb8:	f1ba 0f00 	cmp.w	sl, #0
 800bebc:	d023      	beq.n	800bf06 <__multiply+0xee>
 800bebe:	46a9      	mov	r9, r5
 800bec0:	f04f 0c00 	mov.w	ip, #0
 800bec4:	f104 0e14 	add.w	lr, r4, #20
 800bec8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800becc:	f8d9 3000 	ldr.w	r3, [r9]
 800bed0:	fa1f fb87 	uxth.w	fp, r7
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	fb0a 330b 	mla	r3, sl, fp, r3
 800beda:	4463      	add	r3, ip
 800bedc:	f8d9 c000 	ldr.w	ip, [r9]
 800bee0:	0c3f      	lsrs	r7, r7, #16
 800bee2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bee6:	fb0a c707 	mla	r7, sl, r7, ip
 800beea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800beee:	b29b      	uxth	r3, r3
 800bef0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bef4:	4572      	cmp	r2, lr
 800bef6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800befa:	f849 3b04 	str.w	r3, [r9], #4
 800befe:	d8e3      	bhi.n	800bec8 <__multiply+0xb0>
 800bf00:	9b01      	ldr	r3, [sp, #4]
 800bf02:	f845 c003 	str.w	ip, [r5, r3]
 800bf06:	9b03      	ldr	r3, [sp, #12]
 800bf08:	3104      	adds	r1, #4
 800bf0a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bf0e:	f1b9 0f00 	cmp.w	r9, #0
 800bf12:	d021      	beq.n	800bf58 <__multiply+0x140>
 800bf14:	46ae      	mov	lr, r5
 800bf16:	f04f 0a00 	mov.w	sl, #0
 800bf1a:	682b      	ldr	r3, [r5, #0]
 800bf1c:	f104 0c14 	add.w	ip, r4, #20
 800bf20:	f8bc b000 	ldrh.w	fp, [ip]
 800bf24:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	fb09 770b 	mla	r7, r9, fp, r7
 800bf2e:	4457      	add	r7, sl
 800bf30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bf34:	f84e 3b04 	str.w	r3, [lr], #4
 800bf38:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bf3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf40:	f8be 3000 	ldrh.w	r3, [lr]
 800bf44:	4562      	cmp	r2, ip
 800bf46:	fb09 330a 	mla	r3, r9, sl, r3
 800bf4a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bf4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf52:	d8e5      	bhi.n	800bf20 <__multiply+0x108>
 800bf54:	9f01      	ldr	r7, [sp, #4]
 800bf56:	51eb      	str	r3, [r5, r7]
 800bf58:	3504      	adds	r5, #4
 800bf5a:	e79a      	b.n	800be92 <__multiply+0x7a>
 800bf5c:	3e01      	subs	r6, #1
 800bf5e:	e79c      	b.n	800be9a <__multiply+0x82>
 800bf60:	0800d092 	.word	0x0800d092
 800bf64:	0800d0a3 	.word	0x0800d0a3

0800bf68 <__pow5mult>:
 800bf68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf6c:	4615      	mov	r5, r2
 800bf6e:	f012 0203 	ands.w	r2, r2, #3
 800bf72:	4607      	mov	r7, r0
 800bf74:	460e      	mov	r6, r1
 800bf76:	d007      	beq.n	800bf88 <__pow5mult+0x20>
 800bf78:	4c25      	ldr	r4, [pc, #148]	@ (800c010 <__pow5mult+0xa8>)
 800bf7a:	3a01      	subs	r2, #1
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf82:	f7ff fea1 	bl	800bcc8 <__multadd>
 800bf86:	4606      	mov	r6, r0
 800bf88:	10ad      	asrs	r5, r5, #2
 800bf8a:	d03d      	beq.n	800c008 <__pow5mult+0xa0>
 800bf8c:	69fc      	ldr	r4, [r7, #28]
 800bf8e:	b97c      	cbnz	r4, 800bfb0 <__pow5mult+0x48>
 800bf90:	2010      	movs	r0, #16
 800bf92:	f7ff fd81 	bl	800ba98 <malloc>
 800bf96:	4602      	mov	r2, r0
 800bf98:	61f8      	str	r0, [r7, #28]
 800bf9a:	b928      	cbnz	r0, 800bfa8 <__pow5mult+0x40>
 800bf9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bfa0:	4b1c      	ldr	r3, [pc, #112]	@ (800c014 <__pow5mult+0xac>)
 800bfa2:	481d      	ldr	r0, [pc, #116]	@ (800c018 <__pow5mult+0xb0>)
 800bfa4:	f000 fdaa 	bl	800cafc <__assert_func>
 800bfa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bfac:	6004      	str	r4, [r0, #0]
 800bfae:	60c4      	str	r4, [r0, #12]
 800bfb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bfb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bfb8:	b94c      	cbnz	r4, 800bfce <__pow5mult+0x66>
 800bfba:	f240 2171 	movw	r1, #625	@ 0x271
 800bfbe:	4638      	mov	r0, r7
 800bfc0:	f7ff ff14 	bl	800bdec <__i2b>
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	f8c8 0008 	str.w	r0, [r8, #8]
 800bfcc:	6003      	str	r3, [r0, #0]
 800bfce:	f04f 0900 	mov.w	r9, #0
 800bfd2:	07eb      	lsls	r3, r5, #31
 800bfd4:	d50a      	bpl.n	800bfec <__pow5mult+0x84>
 800bfd6:	4631      	mov	r1, r6
 800bfd8:	4622      	mov	r2, r4
 800bfda:	4638      	mov	r0, r7
 800bfdc:	f7ff ff1c 	bl	800be18 <__multiply>
 800bfe0:	4680      	mov	r8, r0
 800bfe2:	4631      	mov	r1, r6
 800bfe4:	4638      	mov	r0, r7
 800bfe6:	f7ff fe4d 	bl	800bc84 <_Bfree>
 800bfea:	4646      	mov	r6, r8
 800bfec:	106d      	asrs	r5, r5, #1
 800bfee:	d00b      	beq.n	800c008 <__pow5mult+0xa0>
 800bff0:	6820      	ldr	r0, [r4, #0]
 800bff2:	b938      	cbnz	r0, 800c004 <__pow5mult+0x9c>
 800bff4:	4622      	mov	r2, r4
 800bff6:	4621      	mov	r1, r4
 800bff8:	4638      	mov	r0, r7
 800bffa:	f7ff ff0d 	bl	800be18 <__multiply>
 800bffe:	6020      	str	r0, [r4, #0]
 800c000:	f8c0 9000 	str.w	r9, [r0]
 800c004:	4604      	mov	r4, r0
 800c006:	e7e4      	b.n	800bfd2 <__pow5mult+0x6a>
 800c008:	4630      	mov	r0, r6
 800c00a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c00e:	bf00      	nop
 800c010:	0800d0fc 	.word	0x0800d0fc
 800c014:	0800d023 	.word	0x0800d023
 800c018:	0800d0a3 	.word	0x0800d0a3

0800c01c <__lshift>:
 800c01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c020:	460c      	mov	r4, r1
 800c022:	4607      	mov	r7, r0
 800c024:	4691      	mov	r9, r2
 800c026:	6923      	ldr	r3, [r4, #16]
 800c028:	6849      	ldr	r1, [r1, #4]
 800c02a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c02e:	68a3      	ldr	r3, [r4, #8]
 800c030:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c034:	f108 0601 	add.w	r6, r8, #1
 800c038:	42b3      	cmp	r3, r6
 800c03a:	db0b      	blt.n	800c054 <__lshift+0x38>
 800c03c:	4638      	mov	r0, r7
 800c03e:	f7ff fde1 	bl	800bc04 <_Balloc>
 800c042:	4605      	mov	r5, r0
 800c044:	b948      	cbnz	r0, 800c05a <__lshift+0x3e>
 800c046:	4602      	mov	r2, r0
 800c048:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c04c:	4b27      	ldr	r3, [pc, #156]	@ (800c0ec <__lshift+0xd0>)
 800c04e:	4828      	ldr	r0, [pc, #160]	@ (800c0f0 <__lshift+0xd4>)
 800c050:	f000 fd54 	bl	800cafc <__assert_func>
 800c054:	3101      	adds	r1, #1
 800c056:	005b      	lsls	r3, r3, #1
 800c058:	e7ee      	b.n	800c038 <__lshift+0x1c>
 800c05a:	2300      	movs	r3, #0
 800c05c:	f100 0114 	add.w	r1, r0, #20
 800c060:	f100 0210 	add.w	r2, r0, #16
 800c064:	4618      	mov	r0, r3
 800c066:	4553      	cmp	r3, sl
 800c068:	db33      	blt.n	800c0d2 <__lshift+0xb6>
 800c06a:	6920      	ldr	r0, [r4, #16]
 800c06c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c070:	f104 0314 	add.w	r3, r4, #20
 800c074:	f019 091f 	ands.w	r9, r9, #31
 800c078:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c07c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c080:	d02b      	beq.n	800c0da <__lshift+0xbe>
 800c082:	468a      	mov	sl, r1
 800c084:	2200      	movs	r2, #0
 800c086:	f1c9 0e20 	rsb	lr, r9, #32
 800c08a:	6818      	ldr	r0, [r3, #0]
 800c08c:	fa00 f009 	lsl.w	r0, r0, r9
 800c090:	4310      	orrs	r0, r2
 800c092:	f84a 0b04 	str.w	r0, [sl], #4
 800c096:	f853 2b04 	ldr.w	r2, [r3], #4
 800c09a:	459c      	cmp	ip, r3
 800c09c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c0a0:	d8f3      	bhi.n	800c08a <__lshift+0x6e>
 800c0a2:	ebac 0304 	sub.w	r3, ip, r4
 800c0a6:	3b15      	subs	r3, #21
 800c0a8:	f023 0303 	bic.w	r3, r3, #3
 800c0ac:	3304      	adds	r3, #4
 800c0ae:	f104 0015 	add.w	r0, r4, #21
 800c0b2:	4584      	cmp	ip, r0
 800c0b4:	bf38      	it	cc
 800c0b6:	2304      	movcc	r3, #4
 800c0b8:	50ca      	str	r2, [r1, r3]
 800c0ba:	b10a      	cbz	r2, 800c0c0 <__lshift+0xa4>
 800c0bc:	f108 0602 	add.w	r6, r8, #2
 800c0c0:	3e01      	subs	r6, #1
 800c0c2:	4638      	mov	r0, r7
 800c0c4:	4621      	mov	r1, r4
 800c0c6:	612e      	str	r6, [r5, #16]
 800c0c8:	f7ff fddc 	bl	800bc84 <_Bfree>
 800c0cc:	4628      	mov	r0, r5
 800c0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	e7c5      	b.n	800c066 <__lshift+0x4a>
 800c0da:	3904      	subs	r1, #4
 800c0dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0e0:	459c      	cmp	ip, r3
 800c0e2:	f841 2f04 	str.w	r2, [r1, #4]!
 800c0e6:	d8f9      	bhi.n	800c0dc <__lshift+0xc0>
 800c0e8:	e7ea      	b.n	800c0c0 <__lshift+0xa4>
 800c0ea:	bf00      	nop
 800c0ec:	0800d092 	.word	0x0800d092
 800c0f0:	0800d0a3 	.word	0x0800d0a3

0800c0f4 <__mcmp>:
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	690a      	ldr	r2, [r1, #16]
 800c0f8:	6900      	ldr	r0, [r0, #16]
 800c0fa:	b530      	push	{r4, r5, lr}
 800c0fc:	1a80      	subs	r0, r0, r2
 800c0fe:	d10e      	bne.n	800c11e <__mcmp+0x2a>
 800c100:	3314      	adds	r3, #20
 800c102:	3114      	adds	r1, #20
 800c104:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c108:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c10c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c110:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c114:	4295      	cmp	r5, r2
 800c116:	d003      	beq.n	800c120 <__mcmp+0x2c>
 800c118:	d205      	bcs.n	800c126 <__mcmp+0x32>
 800c11a:	f04f 30ff 	mov.w	r0, #4294967295
 800c11e:	bd30      	pop	{r4, r5, pc}
 800c120:	42a3      	cmp	r3, r4
 800c122:	d3f3      	bcc.n	800c10c <__mcmp+0x18>
 800c124:	e7fb      	b.n	800c11e <__mcmp+0x2a>
 800c126:	2001      	movs	r0, #1
 800c128:	e7f9      	b.n	800c11e <__mcmp+0x2a>
	...

0800c12c <__mdiff>:
 800c12c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c130:	4689      	mov	r9, r1
 800c132:	4606      	mov	r6, r0
 800c134:	4611      	mov	r1, r2
 800c136:	4648      	mov	r0, r9
 800c138:	4614      	mov	r4, r2
 800c13a:	f7ff ffdb 	bl	800c0f4 <__mcmp>
 800c13e:	1e05      	subs	r5, r0, #0
 800c140:	d112      	bne.n	800c168 <__mdiff+0x3c>
 800c142:	4629      	mov	r1, r5
 800c144:	4630      	mov	r0, r6
 800c146:	f7ff fd5d 	bl	800bc04 <_Balloc>
 800c14a:	4602      	mov	r2, r0
 800c14c:	b928      	cbnz	r0, 800c15a <__mdiff+0x2e>
 800c14e:	f240 2137 	movw	r1, #567	@ 0x237
 800c152:	4b3e      	ldr	r3, [pc, #248]	@ (800c24c <__mdiff+0x120>)
 800c154:	483e      	ldr	r0, [pc, #248]	@ (800c250 <__mdiff+0x124>)
 800c156:	f000 fcd1 	bl	800cafc <__assert_func>
 800c15a:	2301      	movs	r3, #1
 800c15c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c160:	4610      	mov	r0, r2
 800c162:	b003      	add	sp, #12
 800c164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c168:	bfbc      	itt	lt
 800c16a:	464b      	movlt	r3, r9
 800c16c:	46a1      	movlt	r9, r4
 800c16e:	4630      	mov	r0, r6
 800c170:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c174:	bfba      	itte	lt
 800c176:	461c      	movlt	r4, r3
 800c178:	2501      	movlt	r5, #1
 800c17a:	2500      	movge	r5, #0
 800c17c:	f7ff fd42 	bl	800bc04 <_Balloc>
 800c180:	4602      	mov	r2, r0
 800c182:	b918      	cbnz	r0, 800c18c <__mdiff+0x60>
 800c184:	f240 2145 	movw	r1, #581	@ 0x245
 800c188:	4b30      	ldr	r3, [pc, #192]	@ (800c24c <__mdiff+0x120>)
 800c18a:	e7e3      	b.n	800c154 <__mdiff+0x28>
 800c18c:	f100 0b14 	add.w	fp, r0, #20
 800c190:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c194:	f109 0310 	add.w	r3, r9, #16
 800c198:	60c5      	str	r5, [r0, #12]
 800c19a:	f04f 0c00 	mov.w	ip, #0
 800c19e:	f109 0514 	add.w	r5, r9, #20
 800c1a2:	46d9      	mov	r9, fp
 800c1a4:	6926      	ldr	r6, [r4, #16]
 800c1a6:	f104 0e14 	add.w	lr, r4, #20
 800c1aa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c1ae:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c1b2:	9301      	str	r3, [sp, #4]
 800c1b4:	9b01      	ldr	r3, [sp, #4]
 800c1b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c1ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c1be:	b281      	uxth	r1, r0
 800c1c0:	9301      	str	r3, [sp, #4]
 800c1c2:	fa1f f38a 	uxth.w	r3, sl
 800c1c6:	1a5b      	subs	r3, r3, r1
 800c1c8:	0c00      	lsrs	r0, r0, #16
 800c1ca:	4463      	add	r3, ip
 800c1cc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c1d0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c1da:	4576      	cmp	r6, lr
 800c1dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c1e0:	f849 3b04 	str.w	r3, [r9], #4
 800c1e4:	d8e6      	bhi.n	800c1b4 <__mdiff+0x88>
 800c1e6:	1b33      	subs	r3, r6, r4
 800c1e8:	3b15      	subs	r3, #21
 800c1ea:	f023 0303 	bic.w	r3, r3, #3
 800c1ee:	3415      	adds	r4, #21
 800c1f0:	3304      	adds	r3, #4
 800c1f2:	42a6      	cmp	r6, r4
 800c1f4:	bf38      	it	cc
 800c1f6:	2304      	movcc	r3, #4
 800c1f8:	441d      	add	r5, r3
 800c1fa:	445b      	add	r3, fp
 800c1fc:	461e      	mov	r6, r3
 800c1fe:	462c      	mov	r4, r5
 800c200:	4544      	cmp	r4, r8
 800c202:	d30e      	bcc.n	800c222 <__mdiff+0xf6>
 800c204:	f108 0103 	add.w	r1, r8, #3
 800c208:	1b49      	subs	r1, r1, r5
 800c20a:	f021 0103 	bic.w	r1, r1, #3
 800c20e:	3d03      	subs	r5, #3
 800c210:	45a8      	cmp	r8, r5
 800c212:	bf38      	it	cc
 800c214:	2100      	movcc	r1, #0
 800c216:	440b      	add	r3, r1
 800c218:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c21c:	b199      	cbz	r1, 800c246 <__mdiff+0x11a>
 800c21e:	6117      	str	r7, [r2, #16]
 800c220:	e79e      	b.n	800c160 <__mdiff+0x34>
 800c222:	46e6      	mov	lr, ip
 800c224:	f854 1b04 	ldr.w	r1, [r4], #4
 800c228:	fa1f fc81 	uxth.w	ip, r1
 800c22c:	44f4      	add	ip, lr
 800c22e:	0c08      	lsrs	r0, r1, #16
 800c230:	4471      	add	r1, lr
 800c232:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c236:	b289      	uxth	r1, r1
 800c238:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c23c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c240:	f846 1b04 	str.w	r1, [r6], #4
 800c244:	e7dc      	b.n	800c200 <__mdiff+0xd4>
 800c246:	3f01      	subs	r7, #1
 800c248:	e7e6      	b.n	800c218 <__mdiff+0xec>
 800c24a:	bf00      	nop
 800c24c:	0800d092 	.word	0x0800d092
 800c250:	0800d0a3 	.word	0x0800d0a3

0800c254 <__d2b>:
 800c254:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800c258:	2101      	movs	r1, #1
 800c25a:	4690      	mov	r8, r2
 800c25c:	4699      	mov	r9, r3
 800c25e:	9e08      	ldr	r6, [sp, #32]
 800c260:	f7ff fcd0 	bl	800bc04 <_Balloc>
 800c264:	4604      	mov	r4, r0
 800c266:	b930      	cbnz	r0, 800c276 <__d2b+0x22>
 800c268:	4602      	mov	r2, r0
 800c26a:	f240 310f 	movw	r1, #783	@ 0x30f
 800c26e:	4b23      	ldr	r3, [pc, #140]	@ (800c2fc <__d2b+0xa8>)
 800c270:	4823      	ldr	r0, [pc, #140]	@ (800c300 <__d2b+0xac>)
 800c272:	f000 fc43 	bl	800cafc <__assert_func>
 800c276:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c27a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c27e:	b10d      	cbz	r5, 800c284 <__d2b+0x30>
 800c280:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c284:	9301      	str	r3, [sp, #4]
 800c286:	f1b8 0300 	subs.w	r3, r8, #0
 800c28a:	d024      	beq.n	800c2d6 <__d2b+0x82>
 800c28c:	4668      	mov	r0, sp
 800c28e:	9300      	str	r3, [sp, #0]
 800c290:	f7ff fd7f 	bl	800bd92 <__lo0bits>
 800c294:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c298:	b1d8      	cbz	r0, 800c2d2 <__d2b+0x7e>
 800c29a:	f1c0 0320 	rsb	r3, r0, #32
 800c29e:	fa02 f303 	lsl.w	r3, r2, r3
 800c2a2:	430b      	orrs	r3, r1
 800c2a4:	40c2      	lsrs	r2, r0
 800c2a6:	6163      	str	r3, [r4, #20]
 800c2a8:	9201      	str	r2, [sp, #4]
 800c2aa:	9b01      	ldr	r3, [sp, #4]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	bf0c      	ite	eq
 800c2b0:	2201      	moveq	r2, #1
 800c2b2:	2202      	movne	r2, #2
 800c2b4:	61a3      	str	r3, [r4, #24]
 800c2b6:	6122      	str	r2, [r4, #16]
 800c2b8:	b1ad      	cbz	r5, 800c2e6 <__d2b+0x92>
 800c2ba:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c2be:	4405      	add	r5, r0
 800c2c0:	6035      	str	r5, [r6, #0]
 800c2c2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c2c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2c8:	6018      	str	r0, [r3, #0]
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	b002      	add	sp, #8
 800c2ce:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c2d2:	6161      	str	r1, [r4, #20]
 800c2d4:	e7e9      	b.n	800c2aa <__d2b+0x56>
 800c2d6:	a801      	add	r0, sp, #4
 800c2d8:	f7ff fd5b 	bl	800bd92 <__lo0bits>
 800c2dc:	9b01      	ldr	r3, [sp, #4]
 800c2de:	2201      	movs	r2, #1
 800c2e0:	6163      	str	r3, [r4, #20]
 800c2e2:	3020      	adds	r0, #32
 800c2e4:	e7e7      	b.n	800c2b6 <__d2b+0x62>
 800c2e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c2ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c2ee:	6030      	str	r0, [r6, #0]
 800c2f0:	6918      	ldr	r0, [r3, #16]
 800c2f2:	f7ff fd2f 	bl	800bd54 <__hi0bits>
 800c2f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c2fa:	e7e4      	b.n	800c2c6 <__d2b+0x72>
 800c2fc:	0800d092 	.word	0x0800d092
 800c300:	0800d0a3 	.word	0x0800d0a3

0800c304 <__ssputs_r>:
 800c304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c308:	461f      	mov	r7, r3
 800c30a:	688e      	ldr	r6, [r1, #8]
 800c30c:	4682      	mov	sl, r0
 800c30e:	42be      	cmp	r6, r7
 800c310:	460c      	mov	r4, r1
 800c312:	4690      	mov	r8, r2
 800c314:	680b      	ldr	r3, [r1, #0]
 800c316:	d82d      	bhi.n	800c374 <__ssputs_r+0x70>
 800c318:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c31c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c320:	d026      	beq.n	800c370 <__ssputs_r+0x6c>
 800c322:	6965      	ldr	r5, [r4, #20]
 800c324:	6909      	ldr	r1, [r1, #16]
 800c326:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c32a:	eba3 0901 	sub.w	r9, r3, r1
 800c32e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c332:	1c7b      	adds	r3, r7, #1
 800c334:	444b      	add	r3, r9
 800c336:	106d      	asrs	r5, r5, #1
 800c338:	429d      	cmp	r5, r3
 800c33a:	bf38      	it	cc
 800c33c:	461d      	movcc	r5, r3
 800c33e:	0553      	lsls	r3, r2, #21
 800c340:	d527      	bpl.n	800c392 <__ssputs_r+0x8e>
 800c342:	4629      	mov	r1, r5
 800c344:	f7ff fbd2 	bl	800baec <_malloc_r>
 800c348:	4606      	mov	r6, r0
 800c34a:	b360      	cbz	r0, 800c3a6 <__ssputs_r+0xa2>
 800c34c:	464a      	mov	r2, r9
 800c34e:	6921      	ldr	r1, [r4, #16]
 800c350:	f000 fbc6 	bl	800cae0 <memcpy>
 800c354:	89a3      	ldrh	r3, [r4, #12]
 800c356:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c35a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c35e:	81a3      	strh	r3, [r4, #12]
 800c360:	6126      	str	r6, [r4, #16]
 800c362:	444e      	add	r6, r9
 800c364:	6026      	str	r6, [r4, #0]
 800c366:	463e      	mov	r6, r7
 800c368:	6165      	str	r5, [r4, #20]
 800c36a:	eba5 0509 	sub.w	r5, r5, r9
 800c36e:	60a5      	str	r5, [r4, #8]
 800c370:	42be      	cmp	r6, r7
 800c372:	d900      	bls.n	800c376 <__ssputs_r+0x72>
 800c374:	463e      	mov	r6, r7
 800c376:	4632      	mov	r2, r6
 800c378:	4641      	mov	r1, r8
 800c37a:	6820      	ldr	r0, [r4, #0]
 800c37c:	f000 fb63 	bl	800ca46 <memmove>
 800c380:	2000      	movs	r0, #0
 800c382:	68a3      	ldr	r3, [r4, #8]
 800c384:	1b9b      	subs	r3, r3, r6
 800c386:	60a3      	str	r3, [r4, #8]
 800c388:	6823      	ldr	r3, [r4, #0]
 800c38a:	4433      	add	r3, r6
 800c38c:	6023      	str	r3, [r4, #0]
 800c38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c392:	462a      	mov	r2, r5
 800c394:	f000 fbf6 	bl	800cb84 <_realloc_r>
 800c398:	4606      	mov	r6, r0
 800c39a:	2800      	cmp	r0, #0
 800c39c:	d1e0      	bne.n	800c360 <__ssputs_r+0x5c>
 800c39e:	4650      	mov	r0, sl
 800c3a0:	6921      	ldr	r1, [r4, #16]
 800c3a2:	f7ff fb31 	bl	800ba08 <_free_r>
 800c3a6:	230c      	movs	r3, #12
 800c3a8:	f8ca 3000 	str.w	r3, [sl]
 800c3ac:	89a3      	ldrh	r3, [r4, #12]
 800c3ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3b6:	81a3      	strh	r3, [r4, #12]
 800c3b8:	e7e9      	b.n	800c38e <__ssputs_r+0x8a>
	...

0800c3bc <_svfiprintf_r>:
 800c3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c0:	4698      	mov	r8, r3
 800c3c2:	898b      	ldrh	r3, [r1, #12]
 800c3c4:	4607      	mov	r7, r0
 800c3c6:	061b      	lsls	r3, r3, #24
 800c3c8:	460d      	mov	r5, r1
 800c3ca:	4614      	mov	r4, r2
 800c3cc:	b09d      	sub	sp, #116	@ 0x74
 800c3ce:	d510      	bpl.n	800c3f2 <_svfiprintf_r+0x36>
 800c3d0:	690b      	ldr	r3, [r1, #16]
 800c3d2:	b973      	cbnz	r3, 800c3f2 <_svfiprintf_r+0x36>
 800c3d4:	2140      	movs	r1, #64	@ 0x40
 800c3d6:	f7ff fb89 	bl	800baec <_malloc_r>
 800c3da:	6028      	str	r0, [r5, #0]
 800c3dc:	6128      	str	r0, [r5, #16]
 800c3de:	b930      	cbnz	r0, 800c3ee <_svfiprintf_r+0x32>
 800c3e0:	230c      	movs	r3, #12
 800c3e2:	603b      	str	r3, [r7, #0]
 800c3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e8:	b01d      	add	sp, #116	@ 0x74
 800c3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ee:	2340      	movs	r3, #64	@ 0x40
 800c3f0:	616b      	str	r3, [r5, #20]
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3f6:	2320      	movs	r3, #32
 800c3f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c3fc:	2330      	movs	r3, #48	@ 0x30
 800c3fe:	f04f 0901 	mov.w	r9, #1
 800c402:	f8cd 800c 	str.w	r8, [sp, #12]
 800c406:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c5a0 <_svfiprintf_r+0x1e4>
 800c40a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c40e:	4623      	mov	r3, r4
 800c410:	469a      	mov	sl, r3
 800c412:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c416:	b10a      	cbz	r2, 800c41c <_svfiprintf_r+0x60>
 800c418:	2a25      	cmp	r2, #37	@ 0x25
 800c41a:	d1f9      	bne.n	800c410 <_svfiprintf_r+0x54>
 800c41c:	ebba 0b04 	subs.w	fp, sl, r4
 800c420:	d00b      	beq.n	800c43a <_svfiprintf_r+0x7e>
 800c422:	465b      	mov	r3, fp
 800c424:	4622      	mov	r2, r4
 800c426:	4629      	mov	r1, r5
 800c428:	4638      	mov	r0, r7
 800c42a:	f7ff ff6b 	bl	800c304 <__ssputs_r>
 800c42e:	3001      	adds	r0, #1
 800c430:	f000 80a7 	beq.w	800c582 <_svfiprintf_r+0x1c6>
 800c434:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c436:	445a      	add	r2, fp
 800c438:	9209      	str	r2, [sp, #36]	@ 0x24
 800c43a:	f89a 3000 	ldrb.w	r3, [sl]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	f000 809f 	beq.w	800c582 <_svfiprintf_r+0x1c6>
 800c444:	2300      	movs	r3, #0
 800c446:	f04f 32ff 	mov.w	r2, #4294967295
 800c44a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c44e:	f10a 0a01 	add.w	sl, sl, #1
 800c452:	9304      	str	r3, [sp, #16]
 800c454:	9307      	str	r3, [sp, #28]
 800c456:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c45a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c45c:	4654      	mov	r4, sl
 800c45e:	2205      	movs	r2, #5
 800c460:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c464:	484e      	ldr	r0, [pc, #312]	@ (800c5a0 <_svfiprintf_r+0x1e4>)
 800c466:	f7fe fc70 	bl	800ad4a <memchr>
 800c46a:	9a04      	ldr	r2, [sp, #16]
 800c46c:	b9d8      	cbnz	r0, 800c4a6 <_svfiprintf_r+0xea>
 800c46e:	06d0      	lsls	r0, r2, #27
 800c470:	bf44      	itt	mi
 800c472:	2320      	movmi	r3, #32
 800c474:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c478:	0711      	lsls	r1, r2, #28
 800c47a:	bf44      	itt	mi
 800c47c:	232b      	movmi	r3, #43	@ 0x2b
 800c47e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c482:	f89a 3000 	ldrb.w	r3, [sl]
 800c486:	2b2a      	cmp	r3, #42	@ 0x2a
 800c488:	d015      	beq.n	800c4b6 <_svfiprintf_r+0xfa>
 800c48a:	4654      	mov	r4, sl
 800c48c:	2000      	movs	r0, #0
 800c48e:	f04f 0c0a 	mov.w	ip, #10
 800c492:	9a07      	ldr	r2, [sp, #28]
 800c494:	4621      	mov	r1, r4
 800c496:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c49a:	3b30      	subs	r3, #48	@ 0x30
 800c49c:	2b09      	cmp	r3, #9
 800c49e:	d94b      	bls.n	800c538 <_svfiprintf_r+0x17c>
 800c4a0:	b1b0      	cbz	r0, 800c4d0 <_svfiprintf_r+0x114>
 800c4a2:	9207      	str	r2, [sp, #28]
 800c4a4:	e014      	b.n	800c4d0 <_svfiprintf_r+0x114>
 800c4a6:	eba0 0308 	sub.w	r3, r0, r8
 800c4aa:	fa09 f303 	lsl.w	r3, r9, r3
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	46a2      	mov	sl, r4
 800c4b2:	9304      	str	r3, [sp, #16]
 800c4b4:	e7d2      	b.n	800c45c <_svfiprintf_r+0xa0>
 800c4b6:	9b03      	ldr	r3, [sp, #12]
 800c4b8:	1d19      	adds	r1, r3, #4
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	9103      	str	r1, [sp, #12]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	bfbb      	ittet	lt
 800c4c2:	425b      	neglt	r3, r3
 800c4c4:	f042 0202 	orrlt.w	r2, r2, #2
 800c4c8:	9307      	strge	r3, [sp, #28]
 800c4ca:	9307      	strlt	r3, [sp, #28]
 800c4cc:	bfb8      	it	lt
 800c4ce:	9204      	strlt	r2, [sp, #16]
 800c4d0:	7823      	ldrb	r3, [r4, #0]
 800c4d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c4d4:	d10a      	bne.n	800c4ec <_svfiprintf_r+0x130>
 800c4d6:	7863      	ldrb	r3, [r4, #1]
 800c4d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4da:	d132      	bne.n	800c542 <_svfiprintf_r+0x186>
 800c4dc:	9b03      	ldr	r3, [sp, #12]
 800c4de:	3402      	adds	r4, #2
 800c4e0:	1d1a      	adds	r2, r3, #4
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	9203      	str	r2, [sp, #12]
 800c4e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c4ea:	9305      	str	r3, [sp, #20]
 800c4ec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c5a4 <_svfiprintf_r+0x1e8>
 800c4f0:	2203      	movs	r2, #3
 800c4f2:	4650      	mov	r0, sl
 800c4f4:	7821      	ldrb	r1, [r4, #0]
 800c4f6:	f7fe fc28 	bl	800ad4a <memchr>
 800c4fa:	b138      	cbz	r0, 800c50c <_svfiprintf_r+0x150>
 800c4fc:	2240      	movs	r2, #64	@ 0x40
 800c4fe:	9b04      	ldr	r3, [sp, #16]
 800c500:	eba0 000a 	sub.w	r0, r0, sl
 800c504:	4082      	lsls	r2, r0
 800c506:	4313      	orrs	r3, r2
 800c508:	3401      	adds	r4, #1
 800c50a:	9304      	str	r3, [sp, #16]
 800c50c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c510:	2206      	movs	r2, #6
 800c512:	4825      	ldr	r0, [pc, #148]	@ (800c5a8 <_svfiprintf_r+0x1ec>)
 800c514:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c518:	f7fe fc17 	bl	800ad4a <memchr>
 800c51c:	2800      	cmp	r0, #0
 800c51e:	d036      	beq.n	800c58e <_svfiprintf_r+0x1d2>
 800c520:	4b22      	ldr	r3, [pc, #136]	@ (800c5ac <_svfiprintf_r+0x1f0>)
 800c522:	bb1b      	cbnz	r3, 800c56c <_svfiprintf_r+0x1b0>
 800c524:	9b03      	ldr	r3, [sp, #12]
 800c526:	3307      	adds	r3, #7
 800c528:	f023 0307 	bic.w	r3, r3, #7
 800c52c:	3308      	adds	r3, #8
 800c52e:	9303      	str	r3, [sp, #12]
 800c530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c532:	4433      	add	r3, r6
 800c534:	9309      	str	r3, [sp, #36]	@ 0x24
 800c536:	e76a      	b.n	800c40e <_svfiprintf_r+0x52>
 800c538:	460c      	mov	r4, r1
 800c53a:	2001      	movs	r0, #1
 800c53c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c540:	e7a8      	b.n	800c494 <_svfiprintf_r+0xd8>
 800c542:	2300      	movs	r3, #0
 800c544:	f04f 0c0a 	mov.w	ip, #10
 800c548:	4619      	mov	r1, r3
 800c54a:	3401      	adds	r4, #1
 800c54c:	9305      	str	r3, [sp, #20]
 800c54e:	4620      	mov	r0, r4
 800c550:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c554:	3a30      	subs	r2, #48	@ 0x30
 800c556:	2a09      	cmp	r2, #9
 800c558:	d903      	bls.n	800c562 <_svfiprintf_r+0x1a6>
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d0c6      	beq.n	800c4ec <_svfiprintf_r+0x130>
 800c55e:	9105      	str	r1, [sp, #20]
 800c560:	e7c4      	b.n	800c4ec <_svfiprintf_r+0x130>
 800c562:	4604      	mov	r4, r0
 800c564:	2301      	movs	r3, #1
 800c566:	fb0c 2101 	mla	r1, ip, r1, r2
 800c56a:	e7f0      	b.n	800c54e <_svfiprintf_r+0x192>
 800c56c:	ab03      	add	r3, sp, #12
 800c56e:	9300      	str	r3, [sp, #0]
 800c570:	462a      	mov	r2, r5
 800c572:	4638      	mov	r0, r7
 800c574:	4b0e      	ldr	r3, [pc, #56]	@ (800c5b0 <_svfiprintf_r+0x1f4>)
 800c576:	a904      	add	r1, sp, #16
 800c578:	f7fd fd6c 	bl	800a054 <_printf_float>
 800c57c:	1c42      	adds	r2, r0, #1
 800c57e:	4606      	mov	r6, r0
 800c580:	d1d6      	bne.n	800c530 <_svfiprintf_r+0x174>
 800c582:	89ab      	ldrh	r3, [r5, #12]
 800c584:	065b      	lsls	r3, r3, #25
 800c586:	f53f af2d 	bmi.w	800c3e4 <_svfiprintf_r+0x28>
 800c58a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c58c:	e72c      	b.n	800c3e8 <_svfiprintf_r+0x2c>
 800c58e:	ab03      	add	r3, sp, #12
 800c590:	9300      	str	r3, [sp, #0]
 800c592:	462a      	mov	r2, r5
 800c594:	4638      	mov	r0, r7
 800c596:	4b06      	ldr	r3, [pc, #24]	@ (800c5b0 <_svfiprintf_r+0x1f4>)
 800c598:	a904      	add	r1, sp, #16
 800c59a:	f7fd fff9 	bl	800a590 <_printf_i>
 800c59e:	e7ed      	b.n	800c57c <_svfiprintf_r+0x1c0>
 800c5a0:	0800d1f8 	.word	0x0800d1f8
 800c5a4:	0800d1fe 	.word	0x0800d1fe
 800c5a8:	0800d202 	.word	0x0800d202
 800c5ac:	0800a055 	.word	0x0800a055
 800c5b0:	0800c305 	.word	0x0800c305

0800c5b4 <__sfputc_r>:
 800c5b4:	6893      	ldr	r3, [r2, #8]
 800c5b6:	b410      	push	{r4}
 800c5b8:	3b01      	subs	r3, #1
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	6093      	str	r3, [r2, #8]
 800c5be:	da07      	bge.n	800c5d0 <__sfputc_r+0x1c>
 800c5c0:	6994      	ldr	r4, [r2, #24]
 800c5c2:	42a3      	cmp	r3, r4
 800c5c4:	db01      	blt.n	800c5ca <__sfputc_r+0x16>
 800c5c6:	290a      	cmp	r1, #10
 800c5c8:	d102      	bne.n	800c5d0 <__sfputc_r+0x1c>
 800c5ca:	bc10      	pop	{r4}
 800c5cc:	f7fe baa9 	b.w	800ab22 <__swbuf_r>
 800c5d0:	6813      	ldr	r3, [r2, #0]
 800c5d2:	1c58      	adds	r0, r3, #1
 800c5d4:	6010      	str	r0, [r2, #0]
 800c5d6:	7019      	strb	r1, [r3, #0]
 800c5d8:	4608      	mov	r0, r1
 800c5da:	bc10      	pop	{r4}
 800c5dc:	4770      	bx	lr

0800c5de <__sfputs_r>:
 800c5de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e0:	4606      	mov	r6, r0
 800c5e2:	460f      	mov	r7, r1
 800c5e4:	4614      	mov	r4, r2
 800c5e6:	18d5      	adds	r5, r2, r3
 800c5e8:	42ac      	cmp	r4, r5
 800c5ea:	d101      	bne.n	800c5f0 <__sfputs_r+0x12>
 800c5ec:	2000      	movs	r0, #0
 800c5ee:	e007      	b.n	800c600 <__sfputs_r+0x22>
 800c5f0:	463a      	mov	r2, r7
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5f8:	f7ff ffdc 	bl	800c5b4 <__sfputc_r>
 800c5fc:	1c43      	adds	r3, r0, #1
 800c5fe:	d1f3      	bne.n	800c5e8 <__sfputs_r+0xa>
 800c600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c604 <_vfiprintf_r>:
 800c604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c608:	460d      	mov	r5, r1
 800c60a:	4614      	mov	r4, r2
 800c60c:	4698      	mov	r8, r3
 800c60e:	4606      	mov	r6, r0
 800c610:	b09d      	sub	sp, #116	@ 0x74
 800c612:	b118      	cbz	r0, 800c61c <_vfiprintf_r+0x18>
 800c614:	6a03      	ldr	r3, [r0, #32]
 800c616:	b90b      	cbnz	r3, 800c61c <_vfiprintf_r+0x18>
 800c618:	f7fe f966 	bl	800a8e8 <__sinit>
 800c61c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c61e:	07d9      	lsls	r1, r3, #31
 800c620:	d405      	bmi.n	800c62e <_vfiprintf_r+0x2a>
 800c622:	89ab      	ldrh	r3, [r5, #12]
 800c624:	059a      	lsls	r2, r3, #22
 800c626:	d402      	bmi.n	800c62e <_vfiprintf_r+0x2a>
 800c628:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c62a:	f7fe fb8c 	bl	800ad46 <__retarget_lock_acquire_recursive>
 800c62e:	89ab      	ldrh	r3, [r5, #12]
 800c630:	071b      	lsls	r3, r3, #28
 800c632:	d501      	bpl.n	800c638 <_vfiprintf_r+0x34>
 800c634:	692b      	ldr	r3, [r5, #16]
 800c636:	b99b      	cbnz	r3, 800c660 <_vfiprintf_r+0x5c>
 800c638:	4629      	mov	r1, r5
 800c63a:	4630      	mov	r0, r6
 800c63c:	f7fe fab0 	bl	800aba0 <__swsetup_r>
 800c640:	b170      	cbz	r0, 800c660 <_vfiprintf_r+0x5c>
 800c642:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c644:	07dc      	lsls	r4, r3, #31
 800c646:	d504      	bpl.n	800c652 <_vfiprintf_r+0x4e>
 800c648:	f04f 30ff 	mov.w	r0, #4294967295
 800c64c:	b01d      	add	sp, #116	@ 0x74
 800c64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c652:	89ab      	ldrh	r3, [r5, #12]
 800c654:	0598      	lsls	r0, r3, #22
 800c656:	d4f7      	bmi.n	800c648 <_vfiprintf_r+0x44>
 800c658:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c65a:	f7fe fb75 	bl	800ad48 <__retarget_lock_release_recursive>
 800c65e:	e7f3      	b.n	800c648 <_vfiprintf_r+0x44>
 800c660:	2300      	movs	r3, #0
 800c662:	9309      	str	r3, [sp, #36]	@ 0x24
 800c664:	2320      	movs	r3, #32
 800c666:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c66a:	2330      	movs	r3, #48	@ 0x30
 800c66c:	f04f 0901 	mov.w	r9, #1
 800c670:	f8cd 800c 	str.w	r8, [sp, #12]
 800c674:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c820 <_vfiprintf_r+0x21c>
 800c678:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c67c:	4623      	mov	r3, r4
 800c67e:	469a      	mov	sl, r3
 800c680:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c684:	b10a      	cbz	r2, 800c68a <_vfiprintf_r+0x86>
 800c686:	2a25      	cmp	r2, #37	@ 0x25
 800c688:	d1f9      	bne.n	800c67e <_vfiprintf_r+0x7a>
 800c68a:	ebba 0b04 	subs.w	fp, sl, r4
 800c68e:	d00b      	beq.n	800c6a8 <_vfiprintf_r+0xa4>
 800c690:	465b      	mov	r3, fp
 800c692:	4622      	mov	r2, r4
 800c694:	4629      	mov	r1, r5
 800c696:	4630      	mov	r0, r6
 800c698:	f7ff ffa1 	bl	800c5de <__sfputs_r>
 800c69c:	3001      	adds	r0, #1
 800c69e:	f000 80a7 	beq.w	800c7f0 <_vfiprintf_r+0x1ec>
 800c6a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6a4:	445a      	add	r2, fp
 800c6a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6a8:	f89a 3000 	ldrb.w	r3, [sl]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	f000 809f 	beq.w	800c7f0 <_vfiprintf_r+0x1ec>
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c6b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6bc:	f10a 0a01 	add.w	sl, sl, #1
 800c6c0:	9304      	str	r3, [sp, #16]
 800c6c2:	9307      	str	r3, [sp, #28]
 800c6c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c6c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c6ca:	4654      	mov	r4, sl
 800c6cc:	2205      	movs	r2, #5
 800c6ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6d2:	4853      	ldr	r0, [pc, #332]	@ (800c820 <_vfiprintf_r+0x21c>)
 800c6d4:	f7fe fb39 	bl	800ad4a <memchr>
 800c6d8:	9a04      	ldr	r2, [sp, #16]
 800c6da:	b9d8      	cbnz	r0, 800c714 <_vfiprintf_r+0x110>
 800c6dc:	06d1      	lsls	r1, r2, #27
 800c6de:	bf44      	itt	mi
 800c6e0:	2320      	movmi	r3, #32
 800c6e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6e6:	0713      	lsls	r3, r2, #28
 800c6e8:	bf44      	itt	mi
 800c6ea:	232b      	movmi	r3, #43	@ 0x2b
 800c6ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c6f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6f6:	d015      	beq.n	800c724 <_vfiprintf_r+0x120>
 800c6f8:	4654      	mov	r4, sl
 800c6fa:	2000      	movs	r0, #0
 800c6fc:	f04f 0c0a 	mov.w	ip, #10
 800c700:	9a07      	ldr	r2, [sp, #28]
 800c702:	4621      	mov	r1, r4
 800c704:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c708:	3b30      	subs	r3, #48	@ 0x30
 800c70a:	2b09      	cmp	r3, #9
 800c70c:	d94b      	bls.n	800c7a6 <_vfiprintf_r+0x1a2>
 800c70e:	b1b0      	cbz	r0, 800c73e <_vfiprintf_r+0x13a>
 800c710:	9207      	str	r2, [sp, #28]
 800c712:	e014      	b.n	800c73e <_vfiprintf_r+0x13a>
 800c714:	eba0 0308 	sub.w	r3, r0, r8
 800c718:	fa09 f303 	lsl.w	r3, r9, r3
 800c71c:	4313      	orrs	r3, r2
 800c71e:	46a2      	mov	sl, r4
 800c720:	9304      	str	r3, [sp, #16]
 800c722:	e7d2      	b.n	800c6ca <_vfiprintf_r+0xc6>
 800c724:	9b03      	ldr	r3, [sp, #12]
 800c726:	1d19      	adds	r1, r3, #4
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	9103      	str	r1, [sp, #12]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	bfbb      	ittet	lt
 800c730:	425b      	neglt	r3, r3
 800c732:	f042 0202 	orrlt.w	r2, r2, #2
 800c736:	9307      	strge	r3, [sp, #28]
 800c738:	9307      	strlt	r3, [sp, #28]
 800c73a:	bfb8      	it	lt
 800c73c:	9204      	strlt	r2, [sp, #16]
 800c73e:	7823      	ldrb	r3, [r4, #0]
 800c740:	2b2e      	cmp	r3, #46	@ 0x2e
 800c742:	d10a      	bne.n	800c75a <_vfiprintf_r+0x156>
 800c744:	7863      	ldrb	r3, [r4, #1]
 800c746:	2b2a      	cmp	r3, #42	@ 0x2a
 800c748:	d132      	bne.n	800c7b0 <_vfiprintf_r+0x1ac>
 800c74a:	9b03      	ldr	r3, [sp, #12]
 800c74c:	3402      	adds	r4, #2
 800c74e:	1d1a      	adds	r2, r3, #4
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	9203      	str	r2, [sp, #12]
 800c754:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c758:	9305      	str	r3, [sp, #20]
 800c75a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c824 <_vfiprintf_r+0x220>
 800c75e:	2203      	movs	r2, #3
 800c760:	4650      	mov	r0, sl
 800c762:	7821      	ldrb	r1, [r4, #0]
 800c764:	f7fe faf1 	bl	800ad4a <memchr>
 800c768:	b138      	cbz	r0, 800c77a <_vfiprintf_r+0x176>
 800c76a:	2240      	movs	r2, #64	@ 0x40
 800c76c:	9b04      	ldr	r3, [sp, #16]
 800c76e:	eba0 000a 	sub.w	r0, r0, sl
 800c772:	4082      	lsls	r2, r0
 800c774:	4313      	orrs	r3, r2
 800c776:	3401      	adds	r4, #1
 800c778:	9304      	str	r3, [sp, #16]
 800c77a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c77e:	2206      	movs	r2, #6
 800c780:	4829      	ldr	r0, [pc, #164]	@ (800c828 <_vfiprintf_r+0x224>)
 800c782:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c786:	f7fe fae0 	bl	800ad4a <memchr>
 800c78a:	2800      	cmp	r0, #0
 800c78c:	d03f      	beq.n	800c80e <_vfiprintf_r+0x20a>
 800c78e:	4b27      	ldr	r3, [pc, #156]	@ (800c82c <_vfiprintf_r+0x228>)
 800c790:	bb1b      	cbnz	r3, 800c7da <_vfiprintf_r+0x1d6>
 800c792:	9b03      	ldr	r3, [sp, #12]
 800c794:	3307      	adds	r3, #7
 800c796:	f023 0307 	bic.w	r3, r3, #7
 800c79a:	3308      	adds	r3, #8
 800c79c:	9303      	str	r3, [sp, #12]
 800c79e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7a0:	443b      	add	r3, r7
 800c7a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7a4:	e76a      	b.n	800c67c <_vfiprintf_r+0x78>
 800c7a6:	460c      	mov	r4, r1
 800c7a8:	2001      	movs	r0, #1
 800c7aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7ae:	e7a8      	b.n	800c702 <_vfiprintf_r+0xfe>
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	f04f 0c0a 	mov.w	ip, #10
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	3401      	adds	r4, #1
 800c7ba:	9305      	str	r3, [sp, #20]
 800c7bc:	4620      	mov	r0, r4
 800c7be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7c2:	3a30      	subs	r2, #48	@ 0x30
 800c7c4:	2a09      	cmp	r2, #9
 800c7c6:	d903      	bls.n	800c7d0 <_vfiprintf_r+0x1cc>
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d0c6      	beq.n	800c75a <_vfiprintf_r+0x156>
 800c7cc:	9105      	str	r1, [sp, #20]
 800c7ce:	e7c4      	b.n	800c75a <_vfiprintf_r+0x156>
 800c7d0:	4604      	mov	r4, r0
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7d8:	e7f0      	b.n	800c7bc <_vfiprintf_r+0x1b8>
 800c7da:	ab03      	add	r3, sp, #12
 800c7dc:	9300      	str	r3, [sp, #0]
 800c7de:	462a      	mov	r2, r5
 800c7e0:	4630      	mov	r0, r6
 800c7e2:	4b13      	ldr	r3, [pc, #76]	@ (800c830 <_vfiprintf_r+0x22c>)
 800c7e4:	a904      	add	r1, sp, #16
 800c7e6:	f7fd fc35 	bl	800a054 <_printf_float>
 800c7ea:	4607      	mov	r7, r0
 800c7ec:	1c78      	adds	r0, r7, #1
 800c7ee:	d1d6      	bne.n	800c79e <_vfiprintf_r+0x19a>
 800c7f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7f2:	07d9      	lsls	r1, r3, #31
 800c7f4:	d405      	bmi.n	800c802 <_vfiprintf_r+0x1fe>
 800c7f6:	89ab      	ldrh	r3, [r5, #12]
 800c7f8:	059a      	lsls	r2, r3, #22
 800c7fa:	d402      	bmi.n	800c802 <_vfiprintf_r+0x1fe>
 800c7fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7fe:	f7fe faa3 	bl	800ad48 <__retarget_lock_release_recursive>
 800c802:	89ab      	ldrh	r3, [r5, #12]
 800c804:	065b      	lsls	r3, r3, #25
 800c806:	f53f af1f 	bmi.w	800c648 <_vfiprintf_r+0x44>
 800c80a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c80c:	e71e      	b.n	800c64c <_vfiprintf_r+0x48>
 800c80e:	ab03      	add	r3, sp, #12
 800c810:	9300      	str	r3, [sp, #0]
 800c812:	462a      	mov	r2, r5
 800c814:	4630      	mov	r0, r6
 800c816:	4b06      	ldr	r3, [pc, #24]	@ (800c830 <_vfiprintf_r+0x22c>)
 800c818:	a904      	add	r1, sp, #16
 800c81a:	f7fd feb9 	bl	800a590 <_printf_i>
 800c81e:	e7e4      	b.n	800c7ea <_vfiprintf_r+0x1e6>
 800c820:	0800d1f8 	.word	0x0800d1f8
 800c824:	0800d1fe 	.word	0x0800d1fe
 800c828:	0800d202 	.word	0x0800d202
 800c82c:	0800a055 	.word	0x0800a055
 800c830:	0800c5df 	.word	0x0800c5df

0800c834 <__sflush_r>:
 800c834:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c83a:	0716      	lsls	r6, r2, #28
 800c83c:	4605      	mov	r5, r0
 800c83e:	460c      	mov	r4, r1
 800c840:	d454      	bmi.n	800c8ec <__sflush_r+0xb8>
 800c842:	684b      	ldr	r3, [r1, #4]
 800c844:	2b00      	cmp	r3, #0
 800c846:	dc02      	bgt.n	800c84e <__sflush_r+0x1a>
 800c848:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	dd48      	ble.n	800c8e0 <__sflush_r+0xac>
 800c84e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c850:	2e00      	cmp	r6, #0
 800c852:	d045      	beq.n	800c8e0 <__sflush_r+0xac>
 800c854:	2300      	movs	r3, #0
 800c856:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c85a:	682f      	ldr	r7, [r5, #0]
 800c85c:	6a21      	ldr	r1, [r4, #32]
 800c85e:	602b      	str	r3, [r5, #0]
 800c860:	d030      	beq.n	800c8c4 <__sflush_r+0x90>
 800c862:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c864:	89a3      	ldrh	r3, [r4, #12]
 800c866:	0759      	lsls	r1, r3, #29
 800c868:	d505      	bpl.n	800c876 <__sflush_r+0x42>
 800c86a:	6863      	ldr	r3, [r4, #4]
 800c86c:	1ad2      	subs	r2, r2, r3
 800c86e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c870:	b10b      	cbz	r3, 800c876 <__sflush_r+0x42>
 800c872:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c874:	1ad2      	subs	r2, r2, r3
 800c876:	2300      	movs	r3, #0
 800c878:	4628      	mov	r0, r5
 800c87a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c87c:	6a21      	ldr	r1, [r4, #32]
 800c87e:	47b0      	blx	r6
 800c880:	1c43      	adds	r3, r0, #1
 800c882:	89a3      	ldrh	r3, [r4, #12]
 800c884:	d106      	bne.n	800c894 <__sflush_r+0x60>
 800c886:	6829      	ldr	r1, [r5, #0]
 800c888:	291d      	cmp	r1, #29
 800c88a:	d82b      	bhi.n	800c8e4 <__sflush_r+0xb0>
 800c88c:	4a28      	ldr	r2, [pc, #160]	@ (800c930 <__sflush_r+0xfc>)
 800c88e:	410a      	asrs	r2, r1
 800c890:	07d6      	lsls	r6, r2, #31
 800c892:	d427      	bmi.n	800c8e4 <__sflush_r+0xb0>
 800c894:	2200      	movs	r2, #0
 800c896:	6062      	str	r2, [r4, #4]
 800c898:	6922      	ldr	r2, [r4, #16]
 800c89a:	04d9      	lsls	r1, r3, #19
 800c89c:	6022      	str	r2, [r4, #0]
 800c89e:	d504      	bpl.n	800c8aa <__sflush_r+0x76>
 800c8a0:	1c42      	adds	r2, r0, #1
 800c8a2:	d101      	bne.n	800c8a8 <__sflush_r+0x74>
 800c8a4:	682b      	ldr	r3, [r5, #0]
 800c8a6:	b903      	cbnz	r3, 800c8aa <__sflush_r+0x76>
 800c8a8:	6560      	str	r0, [r4, #84]	@ 0x54
 800c8aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8ac:	602f      	str	r7, [r5, #0]
 800c8ae:	b1b9      	cbz	r1, 800c8e0 <__sflush_r+0xac>
 800c8b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8b4:	4299      	cmp	r1, r3
 800c8b6:	d002      	beq.n	800c8be <__sflush_r+0x8a>
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	f7ff f8a5 	bl	800ba08 <_free_r>
 800c8be:	2300      	movs	r3, #0
 800c8c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c8c2:	e00d      	b.n	800c8e0 <__sflush_r+0xac>
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	47b0      	blx	r6
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	1c50      	adds	r0, r2, #1
 800c8ce:	d1c9      	bne.n	800c864 <__sflush_r+0x30>
 800c8d0:	682b      	ldr	r3, [r5, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d0c6      	beq.n	800c864 <__sflush_r+0x30>
 800c8d6:	2b1d      	cmp	r3, #29
 800c8d8:	d001      	beq.n	800c8de <__sflush_r+0xaa>
 800c8da:	2b16      	cmp	r3, #22
 800c8dc:	d11d      	bne.n	800c91a <__sflush_r+0xe6>
 800c8de:	602f      	str	r7, [r5, #0]
 800c8e0:	2000      	movs	r0, #0
 800c8e2:	e021      	b.n	800c928 <__sflush_r+0xf4>
 800c8e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8e8:	b21b      	sxth	r3, r3
 800c8ea:	e01a      	b.n	800c922 <__sflush_r+0xee>
 800c8ec:	690f      	ldr	r7, [r1, #16]
 800c8ee:	2f00      	cmp	r7, #0
 800c8f0:	d0f6      	beq.n	800c8e0 <__sflush_r+0xac>
 800c8f2:	0793      	lsls	r3, r2, #30
 800c8f4:	bf18      	it	ne
 800c8f6:	2300      	movne	r3, #0
 800c8f8:	680e      	ldr	r6, [r1, #0]
 800c8fa:	bf08      	it	eq
 800c8fc:	694b      	ldreq	r3, [r1, #20]
 800c8fe:	1bf6      	subs	r6, r6, r7
 800c900:	600f      	str	r7, [r1, #0]
 800c902:	608b      	str	r3, [r1, #8]
 800c904:	2e00      	cmp	r6, #0
 800c906:	ddeb      	ble.n	800c8e0 <__sflush_r+0xac>
 800c908:	4633      	mov	r3, r6
 800c90a:	463a      	mov	r2, r7
 800c90c:	4628      	mov	r0, r5
 800c90e:	6a21      	ldr	r1, [r4, #32]
 800c910:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c914:	47e0      	blx	ip
 800c916:	2800      	cmp	r0, #0
 800c918:	dc07      	bgt.n	800c92a <__sflush_r+0xf6>
 800c91a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c91e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c922:	f04f 30ff 	mov.w	r0, #4294967295
 800c926:	81a3      	strh	r3, [r4, #12]
 800c928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c92a:	4407      	add	r7, r0
 800c92c:	1a36      	subs	r6, r6, r0
 800c92e:	e7e9      	b.n	800c904 <__sflush_r+0xd0>
 800c930:	dfbffffe 	.word	0xdfbffffe

0800c934 <_fflush_r>:
 800c934:	b538      	push	{r3, r4, r5, lr}
 800c936:	690b      	ldr	r3, [r1, #16]
 800c938:	4605      	mov	r5, r0
 800c93a:	460c      	mov	r4, r1
 800c93c:	b913      	cbnz	r3, 800c944 <_fflush_r+0x10>
 800c93e:	2500      	movs	r5, #0
 800c940:	4628      	mov	r0, r5
 800c942:	bd38      	pop	{r3, r4, r5, pc}
 800c944:	b118      	cbz	r0, 800c94e <_fflush_r+0x1a>
 800c946:	6a03      	ldr	r3, [r0, #32]
 800c948:	b90b      	cbnz	r3, 800c94e <_fflush_r+0x1a>
 800c94a:	f7fd ffcd 	bl	800a8e8 <__sinit>
 800c94e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d0f3      	beq.n	800c93e <_fflush_r+0xa>
 800c956:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c958:	07d0      	lsls	r0, r2, #31
 800c95a:	d404      	bmi.n	800c966 <_fflush_r+0x32>
 800c95c:	0599      	lsls	r1, r3, #22
 800c95e:	d402      	bmi.n	800c966 <_fflush_r+0x32>
 800c960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c962:	f7fe f9f0 	bl	800ad46 <__retarget_lock_acquire_recursive>
 800c966:	4628      	mov	r0, r5
 800c968:	4621      	mov	r1, r4
 800c96a:	f7ff ff63 	bl	800c834 <__sflush_r>
 800c96e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c970:	4605      	mov	r5, r0
 800c972:	07da      	lsls	r2, r3, #31
 800c974:	d4e4      	bmi.n	800c940 <_fflush_r+0xc>
 800c976:	89a3      	ldrh	r3, [r4, #12]
 800c978:	059b      	lsls	r3, r3, #22
 800c97a:	d4e1      	bmi.n	800c940 <_fflush_r+0xc>
 800c97c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c97e:	f7fe f9e3 	bl	800ad48 <__retarget_lock_release_recursive>
 800c982:	e7dd      	b.n	800c940 <_fflush_r+0xc>

0800c984 <__swhatbuf_r>:
 800c984:	b570      	push	{r4, r5, r6, lr}
 800c986:	460c      	mov	r4, r1
 800c988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c98c:	4615      	mov	r5, r2
 800c98e:	2900      	cmp	r1, #0
 800c990:	461e      	mov	r6, r3
 800c992:	b096      	sub	sp, #88	@ 0x58
 800c994:	da0c      	bge.n	800c9b0 <__swhatbuf_r+0x2c>
 800c996:	89a3      	ldrh	r3, [r4, #12]
 800c998:	2100      	movs	r1, #0
 800c99a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c99e:	bf14      	ite	ne
 800c9a0:	2340      	movne	r3, #64	@ 0x40
 800c9a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c9a6:	2000      	movs	r0, #0
 800c9a8:	6031      	str	r1, [r6, #0]
 800c9aa:	602b      	str	r3, [r5, #0]
 800c9ac:	b016      	add	sp, #88	@ 0x58
 800c9ae:	bd70      	pop	{r4, r5, r6, pc}
 800c9b0:	466a      	mov	r2, sp
 800c9b2:	f000 f863 	bl	800ca7c <_fstat_r>
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	dbed      	blt.n	800c996 <__swhatbuf_r+0x12>
 800c9ba:	9901      	ldr	r1, [sp, #4]
 800c9bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c9c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c9c4:	4259      	negs	r1, r3
 800c9c6:	4159      	adcs	r1, r3
 800c9c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c9cc:	e7eb      	b.n	800c9a6 <__swhatbuf_r+0x22>

0800c9ce <__smakebuf_r>:
 800c9ce:	898b      	ldrh	r3, [r1, #12]
 800c9d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9d2:	079d      	lsls	r5, r3, #30
 800c9d4:	4606      	mov	r6, r0
 800c9d6:	460c      	mov	r4, r1
 800c9d8:	d507      	bpl.n	800c9ea <__smakebuf_r+0x1c>
 800c9da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c9de:	6023      	str	r3, [r4, #0]
 800c9e0:	6123      	str	r3, [r4, #16]
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	6163      	str	r3, [r4, #20]
 800c9e6:	b003      	add	sp, #12
 800c9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9ea:	466a      	mov	r2, sp
 800c9ec:	ab01      	add	r3, sp, #4
 800c9ee:	f7ff ffc9 	bl	800c984 <__swhatbuf_r>
 800c9f2:	9f00      	ldr	r7, [sp, #0]
 800c9f4:	4605      	mov	r5, r0
 800c9f6:	4639      	mov	r1, r7
 800c9f8:	4630      	mov	r0, r6
 800c9fa:	f7ff f877 	bl	800baec <_malloc_r>
 800c9fe:	b948      	cbnz	r0, 800ca14 <__smakebuf_r+0x46>
 800ca00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca04:	059a      	lsls	r2, r3, #22
 800ca06:	d4ee      	bmi.n	800c9e6 <__smakebuf_r+0x18>
 800ca08:	f023 0303 	bic.w	r3, r3, #3
 800ca0c:	f043 0302 	orr.w	r3, r3, #2
 800ca10:	81a3      	strh	r3, [r4, #12]
 800ca12:	e7e2      	b.n	800c9da <__smakebuf_r+0xc>
 800ca14:	89a3      	ldrh	r3, [r4, #12]
 800ca16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ca1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca1e:	81a3      	strh	r3, [r4, #12]
 800ca20:	9b01      	ldr	r3, [sp, #4]
 800ca22:	6020      	str	r0, [r4, #0]
 800ca24:	b15b      	cbz	r3, 800ca3e <__smakebuf_r+0x70>
 800ca26:	4630      	mov	r0, r6
 800ca28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca2c:	f000 f838 	bl	800caa0 <_isatty_r>
 800ca30:	b128      	cbz	r0, 800ca3e <__smakebuf_r+0x70>
 800ca32:	89a3      	ldrh	r3, [r4, #12]
 800ca34:	f023 0303 	bic.w	r3, r3, #3
 800ca38:	f043 0301 	orr.w	r3, r3, #1
 800ca3c:	81a3      	strh	r3, [r4, #12]
 800ca3e:	89a3      	ldrh	r3, [r4, #12]
 800ca40:	431d      	orrs	r5, r3
 800ca42:	81a5      	strh	r5, [r4, #12]
 800ca44:	e7cf      	b.n	800c9e6 <__smakebuf_r+0x18>

0800ca46 <memmove>:
 800ca46:	4288      	cmp	r0, r1
 800ca48:	b510      	push	{r4, lr}
 800ca4a:	eb01 0402 	add.w	r4, r1, r2
 800ca4e:	d902      	bls.n	800ca56 <memmove+0x10>
 800ca50:	4284      	cmp	r4, r0
 800ca52:	4623      	mov	r3, r4
 800ca54:	d807      	bhi.n	800ca66 <memmove+0x20>
 800ca56:	1e43      	subs	r3, r0, #1
 800ca58:	42a1      	cmp	r1, r4
 800ca5a:	d008      	beq.n	800ca6e <memmove+0x28>
 800ca5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca60:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca64:	e7f8      	b.n	800ca58 <memmove+0x12>
 800ca66:	4601      	mov	r1, r0
 800ca68:	4402      	add	r2, r0
 800ca6a:	428a      	cmp	r2, r1
 800ca6c:	d100      	bne.n	800ca70 <memmove+0x2a>
 800ca6e:	bd10      	pop	{r4, pc}
 800ca70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca74:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca78:	e7f7      	b.n	800ca6a <memmove+0x24>
	...

0800ca7c <_fstat_r>:
 800ca7c:	b538      	push	{r3, r4, r5, lr}
 800ca7e:	2300      	movs	r3, #0
 800ca80:	4d06      	ldr	r5, [pc, #24]	@ (800ca9c <_fstat_r+0x20>)
 800ca82:	4604      	mov	r4, r0
 800ca84:	4608      	mov	r0, r1
 800ca86:	4611      	mov	r1, r2
 800ca88:	602b      	str	r3, [r5, #0]
 800ca8a:	f7f5 feb3 	bl	80027f4 <_fstat>
 800ca8e:	1c43      	adds	r3, r0, #1
 800ca90:	d102      	bne.n	800ca98 <_fstat_r+0x1c>
 800ca92:	682b      	ldr	r3, [r5, #0]
 800ca94:	b103      	cbz	r3, 800ca98 <_fstat_r+0x1c>
 800ca96:	6023      	str	r3, [r4, #0]
 800ca98:	bd38      	pop	{r3, r4, r5, pc}
 800ca9a:	bf00      	nop
 800ca9c:	200006fc 	.word	0x200006fc

0800caa0 <_isatty_r>:
 800caa0:	b538      	push	{r3, r4, r5, lr}
 800caa2:	2300      	movs	r3, #0
 800caa4:	4d05      	ldr	r5, [pc, #20]	@ (800cabc <_isatty_r+0x1c>)
 800caa6:	4604      	mov	r4, r0
 800caa8:	4608      	mov	r0, r1
 800caaa:	602b      	str	r3, [r5, #0]
 800caac:	f7f5 feb1 	bl	8002812 <_isatty>
 800cab0:	1c43      	adds	r3, r0, #1
 800cab2:	d102      	bne.n	800caba <_isatty_r+0x1a>
 800cab4:	682b      	ldr	r3, [r5, #0]
 800cab6:	b103      	cbz	r3, 800caba <_isatty_r+0x1a>
 800cab8:	6023      	str	r3, [r4, #0]
 800caba:	bd38      	pop	{r3, r4, r5, pc}
 800cabc:	200006fc 	.word	0x200006fc

0800cac0 <_sbrk_r>:
 800cac0:	b538      	push	{r3, r4, r5, lr}
 800cac2:	2300      	movs	r3, #0
 800cac4:	4d05      	ldr	r5, [pc, #20]	@ (800cadc <_sbrk_r+0x1c>)
 800cac6:	4604      	mov	r4, r0
 800cac8:	4608      	mov	r0, r1
 800caca:	602b      	str	r3, [r5, #0]
 800cacc:	f7f5 feb8 	bl	8002840 <_sbrk>
 800cad0:	1c43      	adds	r3, r0, #1
 800cad2:	d102      	bne.n	800cada <_sbrk_r+0x1a>
 800cad4:	682b      	ldr	r3, [r5, #0]
 800cad6:	b103      	cbz	r3, 800cada <_sbrk_r+0x1a>
 800cad8:	6023      	str	r3, [r4, #0]
 800cada:	bd38      	pop	{r3, r4, r5, pc}
 800cadc:	200006fc 	.word	0x200006fc

0800cae0 <memcpy>:
 800cae0:	440a      	add	r2, r1
 800cae2:	4291      	cmp	r1, r2
 800cae4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cae8:	d100      	bne.n	800caec <memcpy+0xc>
 800caea:	4770      	bx	lr
 800caec:	b510      	push	{r4, lr}
 800caee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800caf2:	4291      	cmp	r1, r2
 800caf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800caf8:	d1f9      	bne.n	800caee <memcpy+0xe>
 800cafa:	bd10      	pop	{r4, pc}

0800cafc <__assert_func>:
 800cafc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cafe:	4614      	mov	r4, r2
 800cb00:	461a      	mov	r2, r3
 800cb02:	4b09      	ldr	r3, [pc, #36]	@ (800cb28 <__assert_func+0x2c>)
 800cb04:	4605      	mov	r5, r0
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	68d8      	ldr	r0, [r3, #12]
 800cb0a:	b954      	cbnz	r4, 800cb22 <__assert_func+0x26>
 800cb0c:	4b07      	ldr	r3, [pc, #28]	@ (800cb2c <__assert_func+0x30>)
 800cb0e:	461c      	mov	r4, r3
 800cb10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb14:	9100      	str	r1, [sp, #0]
 800cb16:	462b      	mov	r3, r5
 800cb18:	4905      	ldr	r1, [pc, #20]	@ (800cb30 <__assert_func+0x34>)
 800cb1a:	f000 f86f 	bl	800cbfc <fiprintf>
 800cb1e:	f000 f87f 	bl	800cc20 <abort>
 800cb22:	4b04      	ldr	r3, [pc, #16]	@ (800cb34 <__assert_func+0x38>)
 800cb24:	e7f4      	b.n	800cb10 <__assert_func+0x14>
 800cb26:	bf00      	nop
 800cb28:	20000114 	.word	0x20000114
 800cb2c:	0800d24e 	.word	0x0800d24e
 800cb30:	0800d220 	.word	0x0800d220
 800cb34:	0800d213 	.word	0x0800d213

0800cb38 <_calloc_r>:
 800cb38:	b570      	push	{r4, r5, r6, lr}
 800cb3a:	fba1 5402 	umull	r5, r4, r1, r2
 800cb3e:	b93c      	cbnz	r4, 800cb50 <_calloc_r+0x18>
 800cb40:	4629      	mov	r1, r5
 800cb42:	f7fe ffd3 	bl	800baec <_malloc_r>
 800cb46:	4606      	mov	r6, r0
 800cb48:	b928      	cbnz	r0, 800cb56 <_calloc_r+0x1e>
 800cb4a:	2600      	movs	r6, #0
 800cb4c:	4630      	mov	r0, r6
 800cb4e:	bd70      	pop	{r4, r5, r6, pc}
 800cb50:	220c      	movs	r2, #12
 800cb52:	6002      	str	r2, [r0, #0]
 800cb54:	e7f9      	b.n	800cb4a <_calloc_r+0x12>
 800cb56:	462a      	mov	r2, r5
 800cb58:	4621      	mov	r1, r4
 800cb5a:	f7fe f877 	bl	800ac4c <memset>
 800cb5e:	e7f5      	b.n	800cb4c <_calloc_r+0x14>

0800cb60 <__ascii_mbtowc>:
 800cb60:	b082      	sub	sp, #8
 800cb62:	b901      	cbnz	r1, 800cb66 <__ascii_mbtowc+0x6>
 800cb64:	a901      	add	r1, sp, #4
 800cb66:	b142      	cbz	r2, 800cb7a <__ascii_mbtowc+0x1a>
 800cb68:	b14b      	cbz	r3, 800cb7e <__ascii_mbtowc+0x1e>
 800cb6a:	7813      	ldrb	r3, [r2, #0]
 800cb6c:	600b      	str	r3, [r1, #0]
 800cb6e:	7812      	ldrb	r2, [r2, #0]
 800cb70:	1e10      	subs	r0, r2, #0
 800cb72:	bf18      	it	ne
 800cb74:	2001      	movne	r0, #1
 800cb76:	b002      	add	sp, #8
 800cb78:	4770      	bx	lr
 800cb7a:	4610      	mov	r0, r2
 800cb7c:	e7fb      	b.n	800cb76 <__ascii_mbtowc+0x16>
 800cb7e:	f06f 0001 	mvn.w	r0, #1
 800cb82:	e7f8      	b.n	800cb76 <__ascii_mbtowc+0x16>

0800cb84 <_realloc_r>:
 800cb84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb88:	4680      	mov	r8, r0
 800cb8a:	4615      	mov	r5, r2
 800cb8c:	460c      	mov	r4, r1
 800cb8e:	b921      	cbnz	r1, 800cb9a <_realloc_r+0x16>
 800cb90:	4611      	mov	r1, r2
 800cb92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb96:	f7fe bfa9 	b.w	800baec <_malloc_r>
 800cb9a:	b92a      	cbnz	r2, 800cba8 <_realloc_r+0x24>
 800cb9c:	f7fe ff34 	bl	800ba08 <_free_r>
 800cba0:	2400      	movs	r4, #0
 800cba2:	4620      	mov	r0, r4
 800cba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cba8:	f000 f841 	bl	800cc2e <_malloc_usable_size_r>
 800cbac:	4285      	cmp	r5, r0
 800cbae:	4606      	mov	r6, r0
 800cbb0:	d802      	bhi.n	800cbb8 <_realloc_r+0x34>
 800cbb2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cbb6:	d8f4      	bhi.n	800cba2 <_realloc_r+0x1e>
 800cbb8:	4629      	mov	r1, r5
 800cbba:	4640      	mov	r0, r8
 800cbbc:	f7fe ff96 	bl	800baec <_malloc_r>
 800cbc0:	4607      	mov	r7, r0
 800cbc2:	2800      	cmp	r0, #0
 800cbc4:	d0ec      	beq.n	800cba0 <_realloc_r+0x1c>
 800cbc6:	42b5      	cmp	r5, r6
 800cbc8:	462a      	mov	r2, r5
 800cbca:	4621      	mov	r1, r4
 800cbcc:	bf28      	it	cs
 800cbce:	4632      	movcs	r2, r6
 800cbd0:	f7ff ff86 	bl	800cae0 <memcpy>
 800cbd4:	4621      	mov	r1, r4
 800cbd6:	4640      	mov	r0, r8
 800cbd8:	f7fe ff16 	bl	800ba08 <_free_r>
 800cbdc:	463c      	mov	r4, r7
 800cbde:	e7e0      	b.n	800cba2 <_realloc_r+0x1e>

0800cbe0 <__ascii_wctomb>:
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	4608      	mov	r0, r1
 800cbe4:	b141      	cbz	r1, 800cbf8 <__ascii_wctomb+0x18>
 800cbe6:	2aff      	cmp	r2, #255	@ 0xff
 800cbe8:	d904      	bls.n	800cbf4 <__ascii_wctomb+0x14>
 800cbea:	228a      	movs	r2, #138	@ 0x8a
 800cbec:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf0:	601a      	str	r2, [r3, #0]
 800cbf2:	4770      	bx	lr
 800cbf4:	2001      	movs	r0, #1
 800cbf6:	700a      	strb	r2, [r1, #0]
 800cbf8:	4770      	bx	lr
	...

0800cbfc <fiprintf>:
 800cbfc:	b40e      	push	{r1, r2, r3}
 800cbfe:	b503      	push	{r0, r1, lr}
 800cc00:	4601      	mov	r1, r0
 800cc02:	ab03      	add	r3, sp, #12
 800cc04:	4805      	ldr	r0, [pc, #20]	@ (800cc1c <fiprintf+0x20>)
 800cc06:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc0a:	6800      	ldr	r0, [r0, #0]
 800cc0c:	9301      	str	r3, [sp, #4]
 800cc0e:	f7ff fcf9 	bl	800c604 <_vfiprintf_r>
 800cc12:	b002      	add	sp, #8
 800cc14:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc18:	b003      	add	sp, #12
 800cc1a:	4770      	bx	lr
 800cc1c:	20000114 	.word	0x20000114

0800cc20 <abort>:
 800cc20:	2006      	movs	r0, #6
 800cc22:	b508      	push	{r3, lr}
 800cc24:	f000 f834 	bl	800cc90 <raise>
 800cc28:	2001      	movs	r0, #1
 800cc2a:	f7f5 fd94 	bl	8002756 <_exit>

0800cc2e <_malloc_usable_size_r>:
 800cc2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc32:	1f18      	subs	r0, r3, #4
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	bfbc      	itt	lt
 800cc38:	580b      	ldrlt	r3, [r1, r0]
 800cc3a:	18c0      	addlt	r0, r0, r3
 800cc3c:	4770      	bx	lr

0800cc3e <_raise_r>:
 800cc3e:	291f      	cmp	r1, #31
 800cc40:	b538      	push	{r3, r4, r5, lr}
 800cc42:	4605      	mov	r5, r0
 800cc44:	460c      	mov	r4, r1
 800cc46:	d904      	bls.n	800cc52 <_raise_r+0x14>
 800cc48:	2316      	movs	r3, #22
 800cc4a:	6003      	str	r3, [r0, #0]
 800cc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc50:	bd38      	pop	{r3, r4, r5, pc}
 800cc52:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cc54:	b112      	cbz	r2, 800cc5c <_raise_r+0x1e>
 800cc56:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc5a:	b94b      	cbnz	r3, 800cc70 <_raise_r+0x32>
 800cc5c:	4628      	mov	r0, r5
 800cc5e:	f000 f831 	bl	800ccc4 <_getpid_r>
 800cc62:	4622      	mov	r2, r4
 800cc64:	4601      	mov	r1, r0
 800cc66:	4628      	mov	r0, r5
 800cc68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc6c:	f000 b818 	b.w	800cca0 <_kill_r>
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d00a      	beq.n	800cc8a <_raise_r+0x4c>
 800cc74:	1c59      	adds	r1, r3, #1
 800cc76:	d103      	bne.n	800cc80 <_raise_r+0x42>
 800cc78:	2316      	movs	r3, #22
 800cc7a:	6003      	str	r3, [r0, #0]
 800cc7c:	2001      	movs	r0, #1
 800cc7e:	e7e7      	b.n	800cc50 <_raise_r+0x12>
 800cc80:	2100      	movs	r1, #0
 800cc82:	4620      	mov	r0, r4
 800cc84:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cc88:	4798      	blx	r3
 800cc8a:	2000      	movs	r0, #0
 800cc8c:	e7e0      	b.n	800cc50 <_raise_r+0x12>
	...

0800cc90 <raise>:
 800cc90:	4b02      	ldr	r3, [pc, #8]	@ (800cc9c <raise+0xc>)
 800cc92:	4601      	mov	r1, r0
 800cc94:	6818      	ldr	r0, [r3, #0]
 800cc96:	f7ff bfd2 	b.w	800cc3e <_raise_r>
 800cc9a:	bf00      	nop
 800cc9c:	20000114 	.word	0x20000114

0800cca0 <_kill_r>:
 800cca0:	b538      	push	{r3, r4, r5, lr}
 800cca2:	2300      	movs	r3, #0
 800cca4:	4d06      	ldr	r5, [pc, #24]	@ (800ccc0 <_kill_r+0x20>)
 800cca6:	4604      	mov	r4, r0
 800cca8:	4608      	mov	r0, r1
 800ccaa:	4611      	mov	r1, r2
 800ccac:	602b      	str	r3, [r5, #0]
 800ccae:	f7f5 fd42 	bl	8002736 <_kill>
 800ccb2:	1c43      	adds	r3, r0, #1
 800ccb4:	d102      	bne.n	800ccbc <_kill_r+0x1c>
 800ccb6:	682b      	ldr	r3, [r5, #0]
 800ccb8:	b103      	cbz	r3, 800ccbc <_kill_r+0x1c>
 800ccba:	6023      	str	r3, [r4, #0]
 800ccbc:	bd38      	pop	{r3, r4, r5, pc}
 800ccbe:	bf00      	nop
 800ccc0:	200006fc 	.word	0x200006fc

0800ccc4 <_getpid_r>:
 800ccc4:	f7f5 bd30 	b.w	8002728 <_getpid>

0800ccc8 <_init>:
 800ccc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccca:	bf00      	nop
 800cccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccce:	bc08      	pop	{r3}
 800ccd0:	469e      	mov	lr, r3
 800ccd2:	4770      	bx	lr

0800ccd4 <_fini>:
 800ccd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd6:	bf00      	nop
 800ccd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccda:	bc08      	pop	{r3}
 800ccdc:	469e      	mov	lr, r3
 800ccde:	4770      	bx	lr
